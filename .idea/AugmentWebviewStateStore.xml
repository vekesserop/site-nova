<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="eyJjdXJyZW50Q29udmVyc2F0aW9uSWQiOiI1M2ZhZDM4NC0yOGI1LTQxOTgtOGU2NS03YjQzNzdjNWE2ZTUiLCJjb252ZXJzYXRpb25zIjp7ImZlNmRhNzM2LTZlMDItNDkyOS1iNmY0LTAzNjkwYzUxMjZlYyI6eyJpZCI6ImZlNmRhNzM2LTZlMDItNDkyOS1iNmY0LTAzNjkwYzUxMjZlYyIsImNyZWF0ZWRBdElzbyI6IjIwMjUtMDUtMTRUMTQ6MjM6MzQuOTQ0WiIsImxhc3RJbnRlcmFjdGVkQXRJc28iOiIyMDI1LTA1LTE0VDE0OjIzOjM0Ljk0NFoiLCJjaGF0SGlzdG9yeSI6W10sImZlZWRiYWNrU3RhdGVzIjp7fSwidG9vbFVzZVN0YXRlcyI6e30sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjpmYWxzZSwiZXh0cmFEYXRhIjp7Imhhc0RpcnR5RWRpdHMiOmZhbHNlfSwicGVyc29uYVR5cGUiOjB9LCI5NzcwMjllYy0yZGQ1LTRhNjgtODRiNS0yNTAzNTc4ZjMyYTAiOnsiaWQiOiI5NzcwMjllYy0yZGQ1LTRhNjgtODRiNS0yNTAzNTc4ZjMyYTAiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA1LTE0VDE0OjIzOjM0Ljk4OFoiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNS0xNFQxNDoyNDowNy43NDdaIiwiY2hhdEhpc3RvcnkiOlt7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMWRmMWJmYTEtMGQ3ZC00NmY5LWI3MzAtY2E0ODg5ODYwMmFkIiwicmVxdWVzdF9tZXNzYWdlIjoi0L7Qt9C90LDQutC+0LzRjNGB0Y8g0YEg0L/RgNC+0LXQutGC0L7QvCAiLCJyaWNoX3RleHRfanNvbl9yZXByIjp7InR5cGUiOiJkb2MiLCJjb250ZW50IjpbeyJ0eXBlIjoicGFyYWdyYXBoIiwiY29udGVudCI6W3sidHlwZSI6InRleHQiLCJ0ZXh0Ijoi0L7Qt9C90LDQutC+0LzRjNGB0Y8g0YEg0L/RgNC+0LXQutGC0L7QvCAifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCvINC+0LfQvdCw0LrQvtC80LjQu9GB0Y8g0YEg0L/RgNC+0LXQutGC0L7QvCBOb3ZhIEFJIEFjY2VsZXJhdGUuINCS0L7RgiDQutGA0LDRgtC60LjQuSDQvtCx0LfQvtGAOlxuXG7QrdGC0L4g0LvQtdC90LTQuNC90LMg0LTQu9GPINC/0YDQvtC00YPQutGC0LAgTm92YSBBSSAtINGB0L/QtdGG0LjQsNC70LjQt9C40YDQvtCy0LDQvdC90L7QuSDQv9C70LDRgtGE0L7RgNC80Ysg0LTQu9GPIE1ML0FJINC30LDQtNCw0Ycg0L3QsCDQsdCw0LfQtSBLdWJlcm5ldGVzLiBcblxuIyMg0KLQtdGF0L3QuNGH0LXRgdC60LjQuSDRgdGC0LXQujpcbi0gUmVhY3Rcbi0gVHlwZVNjcmlwdFxuLSBWaXRlXG4tIFRhaWx3aW5kIENTU1xuLSBzaGFkY24vdWlcblxuIyMg0KHRgtGA0YPQutGC0YPRgNCwINC/0YDQvtC10LrRgtCwOlxuLSDQndCw0YHRgtGA0L7QtdC9IFZpdGUg0YEgUmVhY3Qg0LggU1dDINC00LvRjyDQsdGL0YHRgtGA0L7QuSDRgdCx0L7RgNC60Lhcbi0g0JjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPIFR5cGVTY3JpcHQg0YEg0L3QsNGB0YLRgNC+0LnQutCw0LzQuCDQsiB0c2NvbmZpZy5hcHAuanNvblxuLSDQndCw0YHRgtGA0L7QtdC90Ysg0LDQu9C40LDRgdGLINC/0YPRgtC10LkgKNC90LDQv9GA0LjQvNC10YAsIFwiQC8qXCIg0YPQutCw0LfRi9Cy0LDQtdGCINC90LAgXCIuL3NyYy8qXCIpXG4tINCR0LDQt9C+0LLRi9C5IFVSTCDQtNC70Y8g0LTQtdC/0LvQvtGPOiAnL3NpdGUtbm92YS8nXG5cbiMjINCa0L7QvNC/0L7QvdC10L3RgtGLOlxu0JIg0L/RgNC+0LXQutGC0LUg0LXRgdGC0Ywg0LrQvtC80L/QvtC90LXQvdGC0YssINC90LDQv9GA0LjQvNC10YAgTWxvcHNKb3VybmV5LnRzeCwg0LrQvtGC0L7RgNGL0Lkg0L7RgtC+0LHRgNCw0LbQsNC10YIg0Y3RgtCw0L/RiyBNTC3Qv9GA0L7RhtC10YHRgdCwLCDRgdGA0LDQstC90LjQstCw0Y8g0LLQsNC90LjQu9GM0L3Ri9C5INC/0L7QtNGF0L7QtCDRgSBOb3ZhIEFJLlxuXG4jIyDQmNC90YHRgtGA0YPQvNC10L3RgtGLINGA0LDQt9GA0LDQsdC+0YLQutC4OlxuYGBgYmFzaFxuIyDQo9GB0YLQsNC90L7QstC60LAg0LfQsNCy0LjRgdC40LzQvtGB0YLQtdC5XG5ucG0gaW5zdGFsbFxuXG4jINCX0LDQv9GD0YHQuiDRgdC10YDQstC10YDQsCDRgNCw0LfRgNCw0LHQvtGC0LrQuFxubnBtIHJ1biBkZXZcblxuIyDQodCx0L7RgNC60LAg0LTQu9GPINC/0YDQvtC00LDQutGI0LXQvdCwXG5ucG0gcnVuIGJ1aWxkXG5gYGBcblxuIyMg0JTQtdC80L46XG7Qn9GA0L7QtdC60YIg0LTQvtGB0YLRg9C/0LXQvSDQv9C+INCw0LTRgNC10YHRgzogaHR0cHM6Ly92ZWtlc3Nlcm9wLmdpdGh1Yi5pby9zaXRlLW5vdmEvXG5cbtCi0LDQutC20LUg0LXRgdGC0Ywg0YHQutGA0LjQv9GCIGNyZWF0ZS1wZGYubWpzINC00LvRjyDRgdC+0LfQtNCw0L3QuNGPIFBERi3QstC10YDRgdC40Lgg0YHQsNC50YLQsCDRgSDQv9C+0LzQvtGJ0YzRjiBQdXBwZXRlZXIuXG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6InZpdGUuY29uZmlnLnRzOjAtMzc1XG5ub2RlX21vZHVsZXMvcHJlbHVkZS1scy9SRUFETUUubWQ6MC02MTNcbm5vZGVfbW9kdWxlcy9AdG9vdGFsbG5hdGUvcXVpY2tqcy1lbXNjcmlwdGVuL1JFQURNRS5tZDowLTU0MFxubm9kZV9tb2R1bGVzL0B0b290YWxsbmF0ZS9xdWlja2pzLWVtc2NyaXB0ZW4vUkVBRE1FLm1kOjEwMDctMTY5MVxubm9kZV9tb2R1bGVzL0B0b290YWxsbmF0ZS9xdWlja2pzLWVtc2NyaXB0ZW4vUkVBRE1FLm1kOjIxNDAwLTIyMDIyXG5ub2RlX21vZHVsZXMvQHRvb3RhbGxuYXRlL3F1aWNranMtZW1zY3JpcHRlbi9SRUFETUUubWQ6MjI2NjMtMjM0MDdcbm5vZGVfbW9kdWxlcy9ncmFwaGVtZXIvUkVBRE1FLm1kOjAtNzQxXG5ub2RlX21vZHVsZXMvZ3JhcGhlbWVyL1JFQURNRS5tZDoyNTAwLTMyMzdcbm5vZGVfbW9kdWxlcy9ncmFwaGVtZXIvUkVBRE1FLm1kOjMyMzctMzk3OFxubm9kZV9tb2R1bGVzL2dyYXBoZW1lci9SRUFETUUubWQ6NDYyOC01Mjk3XG5ub2RlX21vZHVsZXMvZ3JhcGhlbWVyL1JFQURNRS5tZDo1Mjk3LTU1OTdcbm5vZGVfbW9kdWxlcy9AaHVtYW5mcy9jb3JlL3NyYy9pbmRleC5qczowLTE3OFxubm9kZV9tb2R1bGVzL3lhcmdzLXBhcnNlci9SRUFETUUubWQ6MC03MTlcbm5vZGVfbW9kdWxlcy8uYmluL2dsb2I6MC03NTlcbm5vZGVfbW9kdWxlcy9mYXN0LWVxdWFscy9SRUFETUUubWQ6MTU5MjItMTY2NTRcbm5vZGVfbW9kdWxlcy9AaHVtYW53aG9jb2Rlcy9tb2R1bGUtaW1wb3J0ZXIvUkVBRE1FLm1kOjAtNTUwXG5ub2RlX21vZHVsZXMvQGh1bWFud2hvY29kZXMvbW9kdWxlLWltcG9ydGVyL1JFQURNRS5tZDo1NTAtMTMwOVxubm9kZV9tb2R1bGVzL0BodW1hbndob2NvZGVzL21vZHVsZS1pbXBvcnRlci9SRUFETUUubWQ6MTMwOS0yMDM2XG5ub2RlX21vZHVsZXMvYmFzaWMtZnRwL3BhY2thZ2UuanNvbjowLTY5OFxudHNjb25maWcuYXBwLmpzb246MC02NTJcbmRpc3QvaW5kZXguaHRtbDowLTQzNlxuZGlzdC9pbmRleC5odG1sOjEwNjEtMTcxMlxuY3JlYXRlLXBkZi5tanM6MTkzLTEwNjFcbm5vZGVfbW9kdWxlcy9Abm9kZWxpYi9mcy53YWxrL1JFQURNRS5tZDowLTc1NFxubm9kZV9tb2R1bGVzL3BlbmQvUkVBRE1FLm1kOjAtNzQwXG5ub2RlX21vZHVsZXMvZ3JhcGhlbWVyL3BhY2thZ2UuanNvbjowLTYxNlxubm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9SRUFETUUubWQ6MC0yNDlcbm5vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvUkVBRE1FLm1kOjI0MjgtMjg4Mlxubm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9SRUFETUUubWQ6Mjg4Mi0zNTE5XG5ub2RlX21vZHVsZXMvc3VjcmFzZS9kaXN0L2VzbS9jbGkuanM6MC02NDNcbm5vZGVfbW9kdWxlcy9jb3NtaWNvbmZpZy9SRUFETUUubWQ6MC00OTZcbm5vZGVfbW9kdWxlcy92YXVsL1JFQURNRS5tZDowLTgxOFxubm9kZV9tb2R1bGVzL3JlYWN0LWhvb2stZm9ybS9SRUFETUUubWQ6MTMzMS0yMDUwXG5ub2RlX21vZHVsZXMvQHN3Yy90eXBlcy9SRUFETUUubWQ6MC0yMTlcbnNyYy9jb21wb25lbnRzL01sb3BzSm91cm5leS50c3g6ODI4LTE0MTVcbm5vZGVfbW9kdWxlcy9yb2xsdXAvUkVBRE1FLm1kOjE0MjEtMjAyNVxubm9kZV9tb2R1bGVzL29wdGlvbmF0b3IvUkVBRE1FLm1kOjAtNjA0XG5ub2RlX21vZHVsZXMvamFja3NwZWFrL1JFQURNRS5tZDowLTczNiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjowLCJ0ZXh0X25vZGUiOnsiY29udGVudCI6ItC+0LfQvdCw0LrQvtC80YzRgdGPINGBINC/0YDQvtC10LrRgtC+0LwgIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDoyMzo0Ni4yNTJaIiwicmVzcG9uc2VfdGV4dCI6ItCvINC+0LfQvdCw0LrQvtC80LjQu9GB0Y8g0YEg0L/RgNC+0LXQutGC0L7QvCBOb3ZhIEFJIEFjY2VsZXJhdGUuINCS0L7RgiDQutGA0LDRgtC60LjQuSDQvtCx0LfQvtGAOlxuXG7QrdGC0L4g0LvQtdC90LTQuNC90LMg0LTQu9GPINC/0YDQvtC00YPQutGC0LAgTm92YSBBSSAtINGB0L/QtdGG0LjQsNC70LjQt9C40YDQvtCy0LDQvdC90L7QuSDQv9C70LDRgtGE0L7RgNC80Ysg0LTQu9GPIE1ML0FJINC30LDQtNCw0Ycg0L3QsCDQsdCw0LfQtSBLdWJlcm5ldGVzLiBcblxuIyMg0KLQtdGF0L3QuNGH0LXRgdC60LjQuSDRgdGC0LXQujpcbi0gUmVhY3Rcbi0gVHlwZVNjcmlwdFxuLSBWaXRlXG4tIFRhaWx3aW5kIENTU1xuLSBzaGFkY24vdWlcblxuIyMg0KHRgtGA0YPQutGC0YPRgNCwINC/0YDQvtC10LrRgtCwOlxuLSDQndCw0YHRgtGA0L7QtdC9IFZpdGUg0YEgUmVhY3Qg0LggU1dDINC00LvRjyDQsdGL0YHRgtGA0L7QuSDRgdCx0L7RgNC60Lhcbi0g0JjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPIFR5cGVTY3JpcHQg0YEg0L3QsNGB0YLRgNC+0LnQutCw0LzQuCDQsiB0c2NvbmZpZy5hcHAuanNvblxuLSDQndCw0YHRgtGA0L7QtdC90Ysg0LDQu9C40LDRgdGLINC/0YPRgtC10LkgKNC90LDQv9GA0LjQvNC10YAsIFwiQC8qXCIg0YPQutCw0LfRi9Cy0LDQtdGCINC90LAgXCIuL3NyYy8qXCIpXG4tINCR0LDQt9C+0LLRi9C5IFVSTCDQtNC70Y8g0LTQtdC/0LvQvtGPOiAnL3NpdGUtbm92YS8nXG5cbiMjINCa0L7QvNC/0L7QvdC10L3RgtGLOlxu0JIg0L/RgNC+0LXQutGC0LUg0LXRgdGC0Ywg0LrQvtC80L/QvtC90LXQvdGC0YssINC90LDQv9GA0LjQvNC10YAgTWxvcHNKb3VybmV5LnRzeCwg0LrQvtGC0L7RgNGL0Lkg0L7RgtC+0LHRgNCw0LbQsNC10YIg0Y3RgtCw0L/RiyBNTC3Qv9GA0L7RhtC10YHRgdCwLCDRgdGA0LDQstC90LjQstCw0Y8g0LLQsNC90LjQu9GM0L3Ri9C5INC/0L7QtNGF0L7QtCDRgSBOb3ZhIEFJLlxuXG4jIyDQmNC90YHRgtGA0YPQvNC10L3RgtGLINGA0LDQt9GA0LDQsdC+0YLQutC4OlxuYGBgYmFzaFxuIyDQo9GB0YLQsNC90L7QstC60LAg0LfQsNCy0LjRgdC40LzQvtGB0YLQtdC5XG5ucG0gaW5zdGFsbFxuXG4jINCX0LDQv9GD0YHQuiDRgdC10YDQstC10YDQsCDRgNCw0LfRgNCw0LHQvtGC0LrQuFxubnBtIHJ1biBkZXZcblxuIyDQodCx0L7RgNC60LAg0LTQu9GPINC/0YDQvtC00LDQutGI0LXQvdCwXG5ucG0gcnVuIGJ1aWxkXG5gYGBcblxuIyMg0JTQtdC80L46XG7Qn9GA0L7QtdC60YIg0LTQvtGB0YLRg9C/0LXQvSDQv9C+INCw0LTRgNC10YHRgzogaHR0cHM6Ly92ZWtlc3Nlcm9wLmdpdGh1Yi5pby9zaXRlLW5vdmEvXG5cbtCi0LDQutC20LUg0LXRgdGC0Ywg0YHQutGA0LjQv9GCIGNyZWF0ZS1wZGYubWpzINC00LvRjyDRgdC+0LfQtNCw0L3QuNGPIFBERi3QstC10YDRgdC40Lgg0YHQsNC50YLQsCDRgSDQv9C+0LzQvtGJ0YzRjiBQdXBwZXRlZXIuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOlt7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiIzNzUiLCJibG9iX25hbWUiOiI5YjRkMzBmNWRiYjQwYmVlNmZlYzdlN2M3ZTRlMDg4YmJmMmU2M2Y2NmQzYzRmMGRlN2ViYzZlMGIwMTQzZDEzIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoidml0ZS5jb25maWcudHMifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNjEzIiwiYmxvYl9uYW1lIjoiMzFiYmFlN2Y3MWRkNGM2NDI0MzViM2FjNDdkMmRhM2E4M2Q4Nzg5N2RlZjVlYzRhODU1MmQzMzJkNmIxNTgzNCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9wcmVsdWRlLWxzL1JFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI1NDAiLCJibG9iX25hbWUiOiJmZDBlNTRhMGRiYWM2YmViMjM0YTNjYzJiNTA0MmQ5ZWRkNDdhN2U1YjFmZGQ3NDU3OGExZGRmMGUyMGQ2YmU0IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL0B0b290YWxsbmF0ZS9xdWlja2pzLWVtc2NyaXB0ZW4vUkVBRE1FLm1kIn19LHsiY2hhcl9zdGFydCI6IjEwMDciLCJjaGFyX2VuZCI6IjE2OTEiLCJibG9iX25hbWUiOiJmZDBlNTRhMGRiYWM2YmViMjM0YTNjYzJiNTA0MmQ5ZWRkNDdhN2U1YjFmZGQ3NDU3OGExZGRmMGUyMGQ2YmU0IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL0B0b290YWxsbmF0ZS9xdWlja2pzLWVtc2NyaXB0ZW4vUkVBRE1FLm1kIn19LHsiY2hhcl9zdGFydCI6IjIxNDAwIiwiY2hhcl9lbmQiOiIyMjAyMiIsImJsb2JfbmFtZSI6ImZkMGU1NGEwZGJhYzZiZWIyMzRhM2NjMmI1MDQyZDllZGQ0N2E3ZTViMWZkZDc0NTc4YTFkZGYwZTIwZDZiZTQiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJub2RlX21vZHVsZXMvQHRvb3RhbGxuYXRlL3F1aWNranMtZW1zY3JpcHRlbi9SRUFETUUubWQifX0seyJjaGFyX3N0YXJ0IjoiMjI2NjMiLCJjaGFyX2VuZCI6IjIzNDA3IiwiYmxvYl9uYW1lIjoiZmQwZTU0YTBkYmFjNmJlYjIzNGEzY2MyYjUwNDJkOWVkZDQ3YTdlNWIxZmRkNzQ1NzhhMWRkZjBlMjBkNmJlNCIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9AdG9vdGFsbG5hdGUvcXVpY2tqcy1lbXNjcmlwdGVuL1JFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI3NDEiLCJibG9iX25hbWUiOiIzOGU3NjlkYjJkNmVjODk0MTdjZDFlN2U2NWY5NmVhYTQ0MzZmYzQyZTQwZTcxMDIwMzIwZWUyZmZkMTZmYmFiIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL2dyYXBoZW1lci9SRUFETUUubWQifX0seyJjaGFyX3N0YXJ0IjoiMjUwMCIsImNoYXJfZW5kIjoiMzIzNyIsImJsb2JfbmFtZSI6IjM4ZTc2OWRiMmQ2ZWM4OTQxN2NkMWU3ZTY1Zjk2ZWFhNDQzNmZjNDJlNDBlNzEwMjAzMjBlZTJmZmQxNmZiYWIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJub2RlX21vZHVsZXMvZ3JhcGhlbWVyL1JFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIzMjM3IiwiY2hhcl9lbmQiOiIzOTc4IiwiYmxvYl9uYW1lIjoiMzhlNzY5ZGIyZDZlYzg5NDE3Y2QxZTdlNjVmOTZlYWE0NDM2ZmM0MmU0MGU3MTAyMDMyMGVlMmZmZDE2ZmJhYiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9ncmFwaGVtZXIvUkVBRE1FLm1kIn19LHsiY2hhcl9zdGFydCI6IjQ2MjgiLCJjaGFyX2VuZCI6IjUyOTciLCJibG9iX25hbWUiOiIzOGU3NjlkYjJkNmVjODk0MTdjZDFlN2U2NWY5NmVhYTQ0MzZmYzQyZTQwZTcxMDIwMzIwZWUyZmZkMTZmYmFiIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL2dyYXBoZW1lci9SRUFETUUubWQifX0seyJjaGFyX3N0YXJ0IjoiNTI5NyIsImNoYXJfZW5kIjoiNTU5NyIsImJsb2JfbmFtZSI6IjM4ZTc2OWRiMmQ2ZWM4OTQxN2NkMWU3ZTY1Zjk2ZWFhNDQzNmZjNDJlNDBlNzEwMjAzMjBlZTJmZmQxNmZiYWIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJub2RlX21vZHVsZXMvZ3JhcGhlbWVyL1JFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiIxNzgiLCJibG9iX25hbWUiOiI0ODdjN2QwZDRlMTExYjhiNTBjMjZmMzc4NWVlMzI0OThmY2EwMGRkMzAyMzMwYTk4OWQxOWY2MDc5ZGIwNzZjIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL0BodW1hbmZzL2NvcmUvc3JjL2luZGV4LmpzIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjcxOSIsImJsb2JfbmFtZSI6ImZiODNkYmRmNjU5MzU5Y2JkNzk1YjliMTEzZDUyZTIxZGUyODQ4OTk2NjlhNjQxZmMwYWU4ZmVhY2YyNTlkNDUiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJub2RlX21vZHVsZXMveWFyZ3MtcGFyc2VyL1JFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI3NTkiLCJibG9iX25hbWUiOiI4YTdhN2NiODA1NjcxMDA5ZGI0NDFlYTZhOGFlNTg2Y2JkNTJmNDhmYmEyYzZjNTRmNzk0M2JjZTRhMWYzMjNkIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzLy5iaW4vZ2xvYiJ9fSx7ImNoYXJfc3RhcnQiOiIxNTkyMiIsImNoYXJfZW5kIjoiMTY2NTQiLCJibG9iX25hbWUiOiJjZGFhMzJmODQwYTQ3OTM4ODBjOGU5YTNlYzRmNDc1NjNiZjk0OGNiODg5MTVhYmQ1OWJhZDViNjUyZTc3YTIyIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL2Zhc3QtZXF1YWxzL1JFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI1NTAiLCJibG9iX25hbWUiOiI1MTE1ZTc2NzcwZjNjZDgzZjYwMmQ3NmM5NGRkMDY1ZDA4Njc5Y2I5NzdmNjllMWY3MTRhMzkyMmQwZGVjMmVlIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL0BodW1hbndob2NvZGVzL21vZHVsZS1pbXBvcnRlci9SRUFETUUubWQifX0seyJjaGFyX3N0YXJ0IjoiNTUwIiwiY2hhcl9lbmQiOiIxMzA5IiwiYmxvYl9uYW1lIjoiNTExNWU3Njc3MGYzY2Q4M2Y2MDJkNzZjOTRkZDA2NWQwODY3OWNiOTc3ZjY5ZTFmNzE0YTM5MjJkMGRlYzJlZSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9AaHVtYW53aG9jb2Rlcy9tb2R1bGUtaW1wb3J0ZXIvUkVBRE1FLm1kIn19LHsiY2hhcl9zdGFydCI6IjEzMDkiLCJjaGFyX2VuZCI6IjIwMzYiLCJibG9iX25hbWUiOiI1MTE1ZTc2NzcwZjNjZDgzZjYwMmQ3NmM5NGRkMDY1ZDA4Njc5Y2I5NzdmNjllMWY3MTRhMzkyMmQwZGVjMmVlIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL0BodW1hbndob2NvZGVzL21vZHVsZS1pbXBvcnRlci9SRUFETUUubWQifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNjk4IiwiYmxvYl9uYW1lIjoiYmJkYzVlOGJmYmVjOGQyOGI5ZDgxODc0ZDExM2E3NmJiZDgzMWNlYTI3NmVkNWY5ZTVkZGU5YTUwZmUwNTVmYiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9iYXNpYy1mdHAvcGFja2FnZS5qc29uIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjY1MiIsImJsb2JfbmFtZSI6ImM1MjJjZDdiNzg2ZjdlZTM3MjZhNDkxNWQxMDFlZTQyMDhkZTVmNGE1OTIxNTFlNDg5ODBmMDQyNjcyY2IwMjUiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJ0c2NvbmZpZy5hcHAuanNvbiJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI0MzYiLCJibG9iX25hbWUiOiI4ZjA3YzRlNDliNTliOWYwODI0MmJmZWEzYThmODZkNDk2ZTYzMTg2MDQxNTVkYjQ0NWJlZjYzZjBhMzM0NmNiIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZGlzdC9pbmRleC5odG1sIn19LHsiY2hhcl9zdGFydCI6IjEwNjEiLCJjaGFyX2VuZCI6IjE3MTIiLCJibG9iX25hbWUiOiI4ZjA3YzRlNDliNTliOWYwODI0MmJmZWEzYThmODZkNDk2ZTYzMTg2MDQxNTVkYjQ0NWJlZjYzZjBhMzM0NmNiIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoiZGlzdC9pbmRleC5odG1sIn19LHsiY2hhcl9zdGFydCI6IjE5MyIsImNoYXJfZW5kIjoiMTA2MSIsImJsb2JfbmFtZSI6ImQ1MTcwYmYxN2ViMGY0Y2Q5MTE1YjYzOWE1YjYzMDViMmU0YTU0MzJjMTNmNjBlZWI2ODU3ZmIzNzUwMGRkYTIiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJjcmVhdGUtcGRmLm1qcyJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI3NTQiLCJibG9iX25hbWUiOiJhNTkzNmRiZjQ2YTA2M2IyMjFmMmZlMmNjMGRmN2U5M2ViYjRiZTU0MGZlMWNlZDc3OTgwNjUyODM3YjZmZWU0IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL0Bub2RlbGliL2ZzLndhbGsvUkVBRE1FLm1kIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6Ijc0MCIsImJsb2JfbmFtZSI6IjZlYzJmMmE1OGU2M2ZmYTA2YzNkNjZmM2E0MWQ1ZGUzZDE3ODY3N2U5MDc0MDg1YjM1NTdiZTYzMDY1YjY4NzMiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJub2RlX21vZHVsZXMvcGVuZC9SRUFETUUubWQifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNjE2IiwiYmxvYl9uYW1lIjoiMDU0YmU5MGQ1NWMzOTY1MjZhOWNmOTkwOTY1MmIxMTdhYzhjNmY1OWYyZWNjMmY1ZGM4MWU1NWRiMmFjYTMxZiIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9ncmFwaGVtZXIvcGFja2FnZS5qc29uIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjI0OSIsImJsb2JfbmFtZSI6IjgwYzJkYmRkNjg5NGI0OWMzMDkwOGI5YzdhYTE3ZjQ0MjMxMzc0M2U2MjY5OTVkYzg0ZjQ4MGM2M2JhYTIzYzMiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L1JFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIyNDI4IiwiY2hhcl9lbmQiOiIyODgyIiwiYmxvYl9uYW1lIjoiODBjMmRiZGQ2ODk0YjQ5YzMwOTA4YjljN2FhMTdmNDQyMzEzNzQzZTYyNjk5NWRjODRmNDgwYzYzYmFhMjNjMyIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvUkVBRE1FLm1kIn19LHsiY2hhcl9zdGFydCI6IjI4ODIiLCJjaGFyX2VuZCI6IjM1MTkiLCJibG9iX25hbWUiOiI4MGMyZGJkZDY4OTRiNDljMzA5MDhiOWM3YWExN2Y0NDIzMTM3NDNlNjI2OTk1ZGM4NGY0ODBjNjNiYWEyM2MzIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9SRUFETUUubWQifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNjQzIiwiYmxvYl9uYW1lIjoiZmJhZjIxNWQyMTIyMzJkYWYyNjNmMGU0N2E5MzU2YjM0ZjIzMzY3NDllYTNmMDE2MzIxZTQ2OWQyMTY3NWIxNyIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9zdWNyYXNlL2Rpc3QvZXNtL2NsaS5qcyJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI0OTYiLCJibG9iX25hbWUiOiI5MzE1N2QyNTQ5NmU1YmQ4MjBhZjhiMWEyM2E0ZDQ2ZGU3NDNhNjcxNDIxYjk3MDYzYjQzNGFlMzUxNTdkNzE4IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL2Nvc21pY29uZmlnL1JFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiIwIiwiY2hhcl9lbmQiOiI4MTgiLCJibG9iX25hbWUiOiJmYjdlY2VkMjdmMzI0YjQyYTBiZTQxYTAwNjU3MGY4YjM1ZTQwYWJlNDc3OGVmOTFhNTllYTI1NWNiMGE5N2E3IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL3ZhdWwvUkVBRE1FLm1kIn19LHsiY2hhcl9zdGFydCI6IjEzMzEiLCJjaGFyX2VuZCI6IjIwNTAiLCJibG9iX25hbWUiOiIyYmE1NGU1Mjk4NDZhZDE2N2U3OWY1NWY2MGE0OGQzNTIwMmM1MjJiN2E2NzE4YzMxOWNiMzRiYjU3NjA3NzU2IiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoibm9kZV9tb2R1bGVzL3JlYWN0LWhvb2stZm9ybS9SRUFETUUubWQifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiMjE5IiwiYmxvYl9uYW1lIjoiZDkzMmE4ODZkZTYzNzU5ZGUzNThhZjUzMjQ0MTBmNWMyMjZmYmQ5NzI5OTliMzc3Yzg3M2RhYTRhYWZiOWQyMSIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9Ac3djL3R5cGVzL1JFQURNRS5tZCJ9fSx7ImNoYXJfc3RhcnQiOiI4MjgiLCJjaGFyX2VuZCI6IjE0MTUiLCJibG9iX25hbWUiOiIwNDI0NzhlZjFiYmJjNzIzMzE2Yjg0ZjkxZGE5ZTlmYTNhMzE1MjI2NDMyZGVmZmM5MmZmMzcyNWY2ZDJlYjNlIiwiZmlsZSI6eyJyZXBvUm9vdCI6IiIsInBhdGhOYW1lIjoic3JjL2NvbXBvbmVudHMvTWxvcHNKb3VybmV5LnRzeCJ9fSx7ImNoYXJfc3RhcnQiOiIxNDIxIiwiY2hhcl9lbmQiOiIyMDI1IiwiYmxvYl9uYW1lIjoiN2Y3OTQ1NTM3ZDZjOWVlYjk4MDk2OTkwNzg2NDM4MTI0ODBmY2QxMGEyMGY0MmU5MDA0ZGVjMDI1MGZkZjcwNyIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9yb2xsdXAvUkVBRE1FLm1kIn19LHsiY2hhcl9zdGFydCI6IjAiLCJjaGFyX2VuZCI6IjYwNCIsImJsb2JfbmFtZSI6Ijc2NWI0ZjBmNmVhYmYzNzVmYTYxYjVlMGIxMDExNDk0MTNmNmIxODM3ZGU4OTU0YjJjYTY5MjRmMDA1YTQyNzYiLCJmaWxlIjp7InJlcG9Sb290IjoiIiwicGF0aE5hbWUiOiJub2RlX21vZHVsZXMvb3B0aW9uYXRvci9SRUFETUUubWQifX0seyJjaGFyX3N0YXJ0IjoiMCIsImNoYXJfZW5kIjoiNzM2IiwiYmxvYl9uYW1lIjoiNzY5YjBhNjJlZjg2MTNjNWVjYmE4NTIyMzQyNzhkZDdhMzYyNjFlODM5NjQ1ODU5NDU5NDZhOThiZmJiNjVjNyIsImZpbGUiOnsicmVwb1Jvb3QiOiIiLCJwYXRoTmFtZSI6Im5vZGVfbW9kdWxlcy9qYWNrc3BlYWsvUkVBRE1FLm1kIn19XX1dLCJmZWVkYmFja1N0YXRlcyI6eyJ0ZW1wLWZlLTZkYTYxYzA3LWU4OGEtNDIyMC1iMWE0LTg2YzNkZGY3NDZlYSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn19LCJ0b29sVXNlU3RhdGVzIjp7fSwiZHJhZnRFeGNoYW5nZSI6eyJyZXF1ZXN0X21lc3NhZ2UiOiLQv9GA0Lgg0LTQtdC/0LvQvtC1INC00LDQvdC90L7Qs9C+INGB0LDQudGC0LAg0L3QsCDQs9C40YLRhdCw0LHQtSDRjyDQv9C+0LvRg9GH0LDRjiDQv9GA0L7RgdGC0L4g0LHQtdC70YPRjiDRgdGC0YDQsNC90LjRhtGDLiDQtNCw0L3QvdGL0Lkg0L/RgNC+0LXQutGCINC/0L7QtNC60LvRjtGH0LXQvSDQuiDQs9C40YLRhdCw0LHRgyDQuCDQu9GO0LHRi9C1INC40LfQvNC10L3QtdC90LjRjyDQt9C00LXRgdGMINC/0YDQuNC80LXQvdGP0Y7RgtGBINGC0LDQvCDQv9C+0YHQu9C1INC60L7QvNC40YLQsC4g0L3QsNC50LTQuCDQvtGI0LjQsdC60YMg0Lgg0LjRgdC/0YDQsNCy0YwuIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ItC/0YDQuCDQtNC10L/Qu9C+0LUg0LTQsNC90L3QvtCz0L4g0YHQsNC50YLQsCDQvdCwINCz0LjRgtGF0LDQsdC1INGPINC/0L7Qu9GD0YfQsNGOINC/0YDQvtGB0YLQviDQsdC10LvRg9GOINGB0YLRgNCw0L3QuNGG0YMuINC00LDQvdC90YvQuSDQv9GA0L7QtdC60YIg0L/QvtC00LrQu9GO0YfQtdC9INC6INCz0LjRgtGF0LDQsdGDINC4INC70Y7QsdGL0LUg0LjQt9C80LXQvdC10L3QuNGPINC30LTQtdGB0Ywg0L/RgNC40LzQtdC90Y/RjtGC0YEg0YLQsNC8INC/0L7RgdC70LUg0LrQvtC80LjRgtCwLiDQvdCw0LnQtNC4INC+0YjQuNCx0LrRgyDQuCDQuNGB0L/RgNCw0LLRjC4ifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0YXR1cyI6ImRyYWZ0In0sImRyYWZ0QWN0aXZlQ29udGV4dElkcyI6WyIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhL1JFQURNRS5tZCIsIi9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmFmYWxzZWZhbHNlIiwidXNlckd1aWRlbGluZXMiXSwicmVxdWVzdElkcyI6W10sImlzUGlubmVkIjpmYWxzZSwiaXNTaGFyZWFibGUiOnRydWUsImV4dHJhRGF0YSI6eyJoYXNEaXJ0eUVkaXRzIjpmYWxzZX0sInBlcnNvbmFUeXBlIjowfSwiMWM5NDVkZjMtYjU5Mi00NTQ2LTlhZmEtM2ZjMzMzYTkyMjA2Ijp7ImlkIjoiMWM5NDVkZjMtYjU5Mi00NTQ2LTlhZmEtM2ZjMzMzYTkyMjA2IiwibmFtZSI6IldlbGNvbWUgdG8gdGhlIEF1Z21lbnQgQWdlbnQiLCJjcmVhdGVkQXRJc28iOiIyMDI1LTA1LTE0VDE0OjI0OjAzLjc4NloiLCJsYXN0SW50ZXJhY3RlZEF0SXNvIjoiMjAyNS0wNS0xNFQxNDoyNDowMy43ODdaIiwiY2hhdEhpc3RvcnkiOlt7InJlcXVlc3RfaWQiOiJlNmY4NmIzYi1mZjhjLTQxMGQtOGQ5My0wMDQ3MjU4YTIyNzQiLCJ1dWlkIjoiZmEyNDc2OTEtMjg2Ni00MzJhLWI1NjEtNTFjN2Y0MWQxNDc0IiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjowLCJ0b1RpbWVzdGFtcCI6MTc0NzIzMjY0Mzc4OCwic2Vlbl9zdGF0ZSI6InNlZW4ifV0sImZlZWRiYWNrU3RhdGVzIjp7fSwidG9vbFVzZVN0YXRlcyI6e30sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0YXR1cyI6ImRyYWZ0In0sImRyYWZ0QWN0aXZlQ29udGV4dElkcyI6WyIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhL1JFQURNRS5tZCIsIi9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmFmYWxzZWZhbHNlIiwidXNlckd1aWRlbGluZXMiLCJhZ2VudE1lbW9yaWVzIl0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjpmYWxzZSwiZXh0cmFEYXRhIjp7ImlzQWdlbnRDb252ZXJzYXRpb24iOnRydWUsImhhc0FnZW50T25ib2FyZGVkIjp0cnVlLCJoYXNEaXJ0eUVkaXRzIjpmYWxzZX0sInBlcnNvbmFUeXBlIjowfSwiNTNmYWQzODQtMjhiNS00MTk4LThlNjUtN2I0Mzc3YzVhNmU1Ijp7ImlkIjoiNTNmYWQzODQtMjhiNS00MTk4LThlNjUtN2I0Mzc3YzVhNmU1IiwiY3JlYXRlZEF0SXNvIjoiMjAyNS0wNS0xNFQxNDoyNToxOC45MzdaIiwibGFzdEludGVyYWN0ZWRBdElzbyI6IjIwMjUtMDUtMTRUMTQ6MzQ6MjkuMDcwWiIsImNoYXRIaXN0b3J5IjpbeyJyZXF1ZXN0X2lkIjoiNDc3MjZjYjAtYjkxZC00OTA0LTg4YTItMDI0MTRlOTc3NjJmIiwidXVpZCI6Ijg1NTI4NzQ1LWU5MjQtNDgwZi1hNjc5LTQ1YjY1Mzg3ZDZhYyIsImNoYXRJdGVtVHlwZSI6ImFnZW50aWMtY2hlY2twb2ludC1kZWxpbWl0ZXIiLCJzdGF0dXMiOiJzdWNjZXNzIiwiZnJvbVRpbWVzdGFtcCI6MCwidG9UaW1lc3RhbXAiOjE3NDcyMzI3MTg5MzgsInNlZW5fc3RhdGUiOiJzZWVuIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjVjYzcxNjY4LWY4OGUtNGFhMS1iNzg3LWM0NDliNmVhYzkyNyIsInJlcXVlc3RfbWVzc2FnZSI6ItC/0YDQuCDQtNC10L/Qu9C+0LUg0LTQsNC90L3QvtCz0L4g0YHQsNC50YLQsCDQvdCwINCz0LjRgtGF0LDQsdC1INGPINC/0L7Qu9GD0YfQsNGOINC/0YDQvtGB0YLQviDQsdC10LvRg9GOINGB0YLRgNCw0L3QuNGG0YMuINC00LDQvdC90YvQuSDQv9GA0L7QtdC60YIg0L/QvtC00LrQu9GO0YfQtdC9INC6INCz0LjRgtGF0LDQsdGDINC4INC70Y7QsdGL0LUg0LjQt9C80LXQvdC10L3QuNGPINC30LTQtdGB0Ywg0L/RgNC40LzQtdC90Y/RjtGC0YEg0YLQsNC8INC/0L7RgdC70LUg0LzQvtC10LPQviDQutC+0LzQuNGC0LAuINC90LDQudC00Lgg0L7RiNC40LHQutGDINC4INC40YHQv9GA0LDQstGMLiIsInJpY2hfdGV4dF9qc29uX3JlcHIiOnsidHlwZSI6ImRvYyIsImNvbnRlbnQiOlt7InR5cGUiOiJwYXJhZ3JhcGgiLCJjb250ZW50IjpbeyJ0eXBlIjoidGV4dCIsInRleHQiOiLQv9GA0Lgg0LTQtdC/0LvQvtC1INC00LDQvdC90L7Qs9C+INGB0LDQudGC0LAg0L3QsCDQs9C40YLRhdCw0LHQtSDRjyDQv9C+0LvRg9GH0LDRjiDQv9GA0L7RgdGC0L4g0LHQtdC70YPRjiDRgdGC0YDQsNC90LjRhtGDLiDQtNCw0L3QvdGL0Lkg0L/RgNC+0LXQutGCINC/0L7QtNC60LvRjtGH0LXQvSDQuiDQs9C40YLRhdCw0LHRgyDQuCDQu9GO0LHRi9C1INC40LfQvNC10L3QtdC90LjRjyDQt9C00LXRgdGMINC/0YDQuNC80LXQvdGP0Y7RgtGBINGC0LDQvCDQv9C+0YHQu9C1INC80L7QtdCz0L4g0LrQvtC80LjRgtCwLiDQvdCw0LnQtNC4INC+0YjQuNCx0LrRgyDQuCDQuNGB0L/RgNCw0LLRjC4ifV19XX0sIm1lbnRpb25lZF9pdGVtcyI6W10sInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUtkMnpGWGRLUXd6S2F4cnE0TVZ3UlMiLCJ0b29sX25hbWUiOiJjb2RlYmFzZS1yZXRyaWV2YWwiLCJpbnB1dF9qc29uIjoie1wiaW5mb3JtYXRpb25fcmVxdWVzdFwiOiBcIlxcdTA0MWRcXHUwNDMwXFx1MDQzOVxcdTA0NDJcXHUwNDM4IFxcdTA0M2VcXHUwNDQxXFx1MDQzZFxcdTA0M2VcXHUwNDMyXFx1MDQzZFxcdTA0NGJcXHUwNDM1IFxcdTA0NDRcXHUwNDMwXFx1MDQzOVxcdTA0M2JcXHUwNDRiIFxcdTA0M2ZcXHUwNDQwXFx1MDQzZVxcdTA0MzVcXHUwNDNhXFx1MDQ0MlxcdTA0MzAsIFxcdTA0MzJcXHUwNDNhXFx1MDQzYlxcdTA0NGVcXHUwNDQ3XFx1MDQzMFxcdTA0NGYgcGFja2FnZS5qc29uLCBpbmRleC5odG1sLCBcXHUwNDNhXFx1MDQzZVxcdTA0M2RcXHUwNDQ0XFx1MDQzOFxcdTA0MzNcXHUwNDQzXFx1MDQ0MFxcdTA0MzBcXHUwNDQ2XFx1MDQzOFxcdTA0M2VcXHUwNDNkXFx1MDQzZFxcdTA0NGJcXHUwNDM1IFxcdTA0NDRcXHUwNDMwXFx1MDQzOVxcdTA0M2JcXHUwNDRiIFxcdTA0MzRcXHUwNDNiXFx1MDQ0ZiBcXHUwNDQxXFx1MDQzMVxcdTA0M2VcXHUwNDQwXFx1MDQzYVxcdTA0MzggXFx1MDQzOCBcXHUwNDM0XFx1MDQzNVxcdTA0M2ZcXHUwNDNiXFx1MDQzZVxcdTA0NGYsIFxcdTA0MzAgXFx1MDQ0MlxcdTA0MzBcXHUwNDNhXFx1MDQzNlxcdTA0MzUgXFx1MDQ0NFxcdTA0MzBcXHUwNDM5XFx1MDQzYlxcdTA0NGIgXFx1MDQzZFxcdTA0MzBcXHUwNDQxXFx1MDQ0MlxcdTA0NDBcXHUwNDNlXFx1MDQzOVxcdTA0M2FcXHUwNDM4IEdpdEh1YiBQYWdlcyBcXHUwNDM4XFx1MDQzYlxcdTA0MzggXFx1MDQzNFxcdTA0NDBcXHUwNDQzXFx1MDQzM1xcdTA0MzhcXHUwNDQ1IFxcdTA0MzhcXHUwNDNkXFx1MDQ0MVxcdTA0NDJcXHUwNDQwXFx1MDQ0M1xcdTA0M2NcXHUwNDM1XFx1MDQzZFxcdTA0NDJcXHUwNDNlXFx1MDQzMiBcXHUwNDM0XFx1MDQzNVxcdTA0M2ZcXHUwNDNiXFx1MDQzZVxcdTA0NGYuXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0K8g0L/QvtC80L7Qs9GDINCy0LDQvCDQvdCw0LnRgtC4INC4INC40YHQv9GA0LDQstC40YLRjCDQv9GA0L7QsdC70LXQvNGDINGBINCx0LXQu9C+0Lkg0YHRgtGA0LDQvdC40YbQtdC5INC/0YDQuCDQtNC10L/Qu9C+0LUg0L3QsCBHaXRIdWIuINCU0LDQstCw0LnRgtC1INGB0L3QsNGH0LDQu9CwINGB0L7QsdC10YDQtdC8INC40L3RhNC+0YDQvNCw0YbQuNGOINC+INC/0YDQvtC10LrRgtC1LCDRh9GC0L7QsdGLINC/0L7QvdGP0YLRjCwg0YfRgtC+INC80L7QttC10YIg0LLRi9C30YvQstCw0YLRjCDRjdGC0YMg0L/RgNC+0LHQu9C10LzRgy5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjAsInRleHRfbm9kZSI6eyJjb250ZW50Ijoi0L/RgNC4INC00LXQv9C70L7QtSDQtNCw0L3QvdC+0LPQviDRgdCw0LnRgtCwINC90LAg0LPQuNGC0YXQsNCx0LUg0Y8g0L/QvtC70YPRh9Cw0Y4g0L/RgNC+0YHRgtC+INCx0LXQu9GD0Y4g0YHRgtGA0LDQvdC40YbRgy4g0LTQsNC90L3Ri9C5INC/0YDQvtC10LrRgiDQv9C+0LTQutC70Y7Rh9C10L0g0Log0LPQuNGC0YXQsNCx0YMg0Lgg0LvRjtCx0YvQtSDQuNC30LzQtdC90LXQvdC40Y8g0LfQtNC10YHRjCDQv9GA0LjQvNC10L3Rj9GO0YLRgSDRgtCw0Lwg0L/QvtGB0LvQtSDQvNC+0LXQs9C+INC60L7QvNC40YLQsC4g0L3QsNC50LTQuCDQvtGI0LjQsdC60YMg0Lgg0LjRgdC/0YDQsNCy0YwuIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDoyNToyNS44NzJaIiwicmVzcG9uc2VfdGV4dCI6ItCvINC/0L7QvNC+0LPRgyDQstCw0Lwg0L3QsNC50YLQuCDQuCDQuNGB0L/RgNCw0LLQuNGC0Ywg0L/RgNC+0LHQu9C10LzRgyDRgSDQsdC10LvQvtC5INGB0YLRgNCw0L3QuNGG0LXQuSDQv9GA0Lgg0LTQtdC/0LvQvtC1INC90LAgR2l0SHViLiDQlNCw0LLQsNC50YLQtSDRgdC90LDRh9Cw0LvQsCDRgdC+0LHQtdGA0LXQvCDQuNC90YTQvtGA0LzQsNGG0LjRjiDQviDQv9GA0L7QtdC60YLQtSwg0YfRgtC+0LHRiyDQv9C+0L3Rj9GC0YwsINGH0YLQviDQvNC+0LbQtdGCINCy0YvQt9GL0LLQsNGC0Ywg0Y3RgtGDINC/0YDQvtCx0LvQtdC80YMuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZTllMjk0NDQtYzU1Mi00MTI0LWI2M2QtY2UwYTQ2M2YxMzA4IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxNHNMNDVlc1d6UXpSZjhBNFFqWExtZyIsInRvb2xfbmFtZSI6ImNvZGViYXNlLXJldHJpZXZhbCIsImlucHV0X2pzb24iOiJ7XCJpbmZvcm1hdGlvbl9yZXF1ZXN0XCI6IFwiXFx1MDQxZFxcdTA0MzBcXHUwNDM5XFx1MDQ0MlxcdTA0MzggXFx1MDQ0NFxcdTA0MzBcXHUwNDM5XFx1MDQzYlxcdTA0NGIsIFxcdTA0NDFcXHUwNDMyXFx1MDQ0ZlxcdTA0MzdcXHUwNDMwXFx1MDQzZFxcdTA0M2RcXHUwNDRiXFx1MDQzNSBcXHUwNDQxIFxcdTA0MzRcXHUwNDM1XFx1MDQzZlxcdTA0M2JcXHUwNDNlXFx1MDQzNVxcdTA0M2MgXFx1MDQzZFxcdTA0MzAgR2l0SHViIFBhZ2VzLCBcXHUwNDMyXFx1MDQzYVxcdTA0M2JcXHUwNDRlXFx1MDQ0N1xcdTA0MzBcXHUwNDRmIFxcdTA0NDFcXHUwNDNhXFx1MDQ0MFxcdTA0MzhcXHUwNDNmXFx1MDQ0MlxcdTA0NGIgXFx1MDQzNFxcdTA0MzVcXHUwNDNmXFx1MDQzYlxcdTA0M2VcXHUwNDRmIFxcdTA0MzIgcGFja2FnZS5qc29uLCAuZ2l0aHViL3dvcmtmbG93cywgXFx1MDQzOFxcdTA0M2JcXHUwNDM4IFxcdTA0MzRcXHUwNDQwXFx1MDQ0M1xcdTA0MzNcXHUwNDM4XFx1MDQzNSBcXHUwNDNhXFx1MDQzZVxcdTA0M2RcXHUwNDQ0XFx1MDQzOFxcdTA0MzNcXHUwNDQzXFx1MDQ0MFxcdTA0MzBcXHUwNDQ2XFx1MDQzOFxcdTA0M2VcXHUwNDNkXFx1MDQzZFxcdTA0NGJcXHUwNDM1IFxcdTA0NDRcXHUwNDMwXFx1MDQzOVxcdTA0M2JcXHUwNDRiIFxcdTA0MzRcXHUwNDNiXFx1MDQ0ZiBHaXRIdWIgUGFnZXMuXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0KLQtdC/0LXRgNGMINC00LDQstCw0LnRgtC1INC/0L7RgdC80L7RgtGA0LjQvCDQvdCwINGE0LDQudC70Ysg0YHQsdC+0YDQutC4INC4INC00LXQv9C70L7Rjywg0YfRgtC+0LHRiyDQv9C+0L3Rj9GC0YwsINC60LDQuiDQvdCw0YHRgtGA0L7QtdC9INC00LXQv9C70L7QuSDQvdCwIEdpdEh1YiBQYWdlczpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IGluZGV4Lmh0bWxcblxuPCFET0NUWVBFIGh0bWw+XG48aHRtbCBsYW5nPVwicnVcIj5cbiAgPGhlYWQ+XG4gICAgPG1ldGEgY2hhcnNldD1cIlVURi04XCIgLz5cbiAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFwiIC8+XG4gICAgPHRpdGxlPk5vdmEgQUkgLSBLdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8gQUkvTUw8L3RpdGxlPlxuICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgPG1ldGEgbmFtZT1cImF1dGhvclwiIGNvbnRlbnQ9XCJOb3ZhIEFJXCIgLz5cbi4uLlxuICAgIFxuICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbVwiPlxuICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbVwiIGNyb3Nzb3JpZ2luPlxuICAgIDxsaW5rIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUludGVyOndnaHRANDAwOzUwMDs2MDA7NzAwJmRpc3BsYXk9c3dhcFwiIHJlbD1cInN0eWxlc2hlZXRcIj5cbiAgPC9oZWFkPlxuXG4gIDxib2R5PlxuICAgIDxkaXYgaWQ9XCJyb290XCI+PC9kaXY+XG4gICAgPCEtLSBJTVBPUlRBTlQ6IERPIE5PVCBSRU1PVkUgVEhJUyBTQ1JJUFQgVEFHIE9SIFRISVMgVkVSWSBDT01NRU5UISAtLT5cbiAgICA8c2NyaXB0IHNyYz1cImh0dHBzOi8vY2RuLmdwdGVuZy5jby9ncHRlbmdpbmVlci5qc1wiIHR5cGU9XCJtb2R1bGVcIj48L3NjcmlwdD5cbiAgICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBzcmM9XCIvc3JjL21haW4udHN4XCI+PC9zY3JpcHQ+XG4gIDwvYm9keT5cbjwvaHRtbD5cbi4uLlxuUGF0aDogdml0ZS5jb25maWcudHNcbmltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XG5pbXBvcnQgcmVhY3QgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXJlYWN0LXN3Y1wiO1xuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcblxuLy8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoeyBtb2RlIH0pID0+ICh7XG4gIGJhc2U6ICcvc2l0ZS1ub3ZhLycsXG4gIHNlcnZlcjoge1xuICAgIGhvc3Q6IFwiOjpcIixcbiAgICBwb3J0OiA4MDgwLFxuICB9LFxuICBwbHVnaW5zOiBbXG4gICAgcmVhY3QoKSxcbiAgXSxcbiAgcmVzb2x2ZToge1xuICAgIGFsaWFzOiB7XG4gICAgICBcIkBcIjogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCIuL3NyY1wiKSxcbiAgICB9LFxuICB9LFxufSkpO1xuLi4uXG5QYXRoOiBkaXN0L2luZGV4Lmh0bWxcblxuPCFET0NUWVBFIGh0bWw+XG48aHRtbCBsYW5nPVwicnVcIj5cbiAgPGhlYWQ+XG4gICAgPG1ldGEgY2hhcnNldD1cIlVURi04XCIgLz5cbiAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFwiIC8+XG4gICAgPHRpdGxlPk5vdmEgQUkgLSBLdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8gQUkvTUw8L3RpdGxlPlxuICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgPG1ldGEgbmFtZT1cImF1dGhvclwiIGNvbnRlbnQ9XCJOb3ZhIEFJXCIgLz5cbi4uLlxuICAgIFxuICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbVwiPlxuICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbVwiIGNyb3Nzb3JpZ2luPlxuICAgIDxsaW5rIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUludGVyOndnaHRANDAwOzUwMDs2MDA7NzAwJmRpc3BsYXk9c3dhcFwiIHJlbD1cInN0eWxlc2hlZXRcIj5cbiAgICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBjcm9zc29yaWdpbiBzcmM9XCIvc2l0ZS1ub3ZhL2Fzc2V0cy9pbmRleC1DWEp5ODViNy5qc1wiPjwvc2NyaXB0PlxuICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBjcm9zc29yaWdpbiBocmVmPVwiL3NpdGUtbm92YS9hc3NldHMvaW5kZXgtQkRGVnBLRG0uY3NzXCI+XG4gIDwvaGVhZD5cblxuICA8Ym9keT5cbiAgICA8ZGl2IGlkPVwicm9vdFwiPjwvZGl2PlxuICAgIDwhLS0gSU1QT1JUQU5UOiBETyBOT1QgUkVNT1ZFIFRISVMgU0NSSVBUIFRBRyBPUiBUSElTIFZFUlkgQ09NTUVOVCEgLS0+XG4gICAgPHNjcmlwdCBzcmM9XCJodHRwczovL2Nkbi5ncHRlbmcuY28vZ3B0ZW5naW5lZXIuanNcIiB0eXBlPVwibW9kdWxlXCI+PC9zY3JpcHQ+XG4gIDwvYm9keT5cbjwvaHRtbD5cbi4uLlxuUGF0aDogUkVBRE1FLm1kXG4jIE5vdmEgQUkgQWNjZWxlcmF0ZVxuXG7Qm9C10L3QtNC40L3QsyDQtNC70Y8g0L/RgNC+0LTRg9C60YLQsCBOb3ZhIEFJIC0g0YHQv9C10YbQuNCw0LvQuNC30LjRgNC+0LLQsNC90L3QvtC5INC/0LvQsNGC0YTQvtGA0LzRiyDQtNC70Y8gTUwvQUkg0LfQsNC00LDRhyDQvdCwINCx0LDQt9C1IEt1YmVybmV0ZXMuXG5cbioq0JTQtdC80L4qKjogaHR0cHM6Ly92ZWtlc3Nlcm9wLmdpdGh1Yi5pby9zaXRlLW5vdmEvXG5cbiMjINCi0LXRhdC90L7Qu9C+0LPQuNC4XG5cbtCf0YDQvtC10LrRgiDRgNCw0LfRgNCw0LHQvtGC0LDQvSDRgSDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtdC8OlxuXG4tIFJlYWN0XG4tIFR5cGVTY3JpcHRcbi0gVml0ZVxuLSBUYWlsd2luZCBDU1Ncbi0gc2hhZGNuL3VpXG5cbiMjINCb0L7QutCw0LvRjNC90LDRjyDRgNCw0LfRgNCw0LHQvtGC0LrQsFxuXG5gYGBiYXNoXG4jINCj0YHRgtCw0L3QvtCy0LrQsCDQt9Cw0LLQuNGB0LjQvNC+0YHRgtC10Llcbm5wbSBpbnN0YWxsXG5cbiMg0JfQsNC/0YPRgdC6INGB0LXRgNCy0LXRgNCwINGA0LDQt9GA0LDQsdC+0YLQutC4XG5ucG0gcnVuIGRldlxuXG4jINCh0LHQvtGA0LrQsCDQtNC70Y8g0L/RgNC+0LTQsNC60YjQtdC90LBcbm5wbSBydW4gYnVpbGRcbmBgYFxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvLmJpbi9naC1wYWdlc1xuIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qge0NvbW1hbmR9ID0gcmVxdWlyZSgnY29tbWFuZGVyJyk7XG5jb25zdCBhZGRyID0gcmVxdWlyZSgnZW1haWwtYWRkcmVzc2VzJyk7XG5jb25zdCBnaHBhZ2VzID0gcmVxdWlyZSgnLi4vbGliL2luZGV4LmpzJyk7XG5jb25zdCBwa2cgPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKTtcblxuZnVuY3Rpb24gcHVibGlzaChkaXN0LCBjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBiYXNlUGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBkaXN0KTtcbiAgICBnaHBhZ2VzLnB1Ymxpc2goYmFzZVBhdGgsIGNvbmZpZywgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYWluKGFyZ3MpIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgIGNvbnN0IHByb2dyYW0gPSBuZXcgQ29tbWFuZCgpXG4gICAgICAudmVyc2lvbihwa2cudmVyc2lvbilcbiAgICAgIC5yZXF1aXJlZE9wdGlvbihcbiAgICAgICAgJy1kLCAtLWRpc3QgPGRpc3Q+JyxcbiAgICAgICAgJ0Jhc2UgZGlyZWN0b3J5IGZvciBhbGwgc291cmNlIGZpbGVzJyxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctcywgLS1zcmMgPHNyYz4nLFxuICAgICAgICAnUGF0dGVybiB1c2VkIHRvIHNlbGVjdCB3aGljaCBmaWxlcyB0byBwdWJsaXNoJyxcbiAgICAgICAgZ2hwYWdlcy5kZWZhdWx0cy5zcmMsXG4gICAgICApXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLWIsIC0tYnJhbmNoIDxicmFuY2g+JyxcbiAgICAgICAgJ05hbWUgb2YgdGhlIGJyYW5jaCB5b3UgYXJlIHB1c2hpbmcgdG8nLFxuICAgICAgICBnaHBhZ2VzLmRlZmF1bHRzLmJyYW5jaCxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctZSwgLS1kZXN0IDxkZXN0PicsXG4gICAgICAgICdUYXJnZXQgZGlyZWN0b3J5IHdpdGhpbiB0aGUgZGVzdGluYXRpb24gYnJhbmNoIChyZWxhdGl2ZSB0byB0aGUgcm9vdCknLFxuICAgICAgICBnaHBhZ2VzLmRlZmF1bHRzLmRlc3QsXG4gICAgICApXG4gICAgICAub3B0aW9uKCctYSwgLS1hZGQnLCAnT25seSBhZGQsIGFuZCBuZXZlciByZW1vdmUgZXhpc3RpbmcgZmlsZXMnKVxuICAgICAgLm9wdGlvbignLXgsIC0tc2lsZW50JywgJ0RvIG5vdCBvdXRwdXQgdGhlIHJlcG9zaXRvcnkgdXJsJylcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctbSwgLS1tZXNzYWdlIDxtZXNzYWdlPicsXG4gICAgICAgICdjb21taXQgbWVzc2FnZScsXG4gICAgICAgIGdocGFnZXMuZGVmYXVsdHMubWVzc2FnZSxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oJy1nLCAtLXRhZyA8dGFnPicsICdhZGQgdGFnIHRvIGNvbW1pdCcpXG4gICAgICAub3B0aW9uKCctLWdpdCA8Z2l0PicsICdQYXRoIHRvIGdpdCBleGVjdXRhYmxlJywgZ2hwYWdlcy5kZWZhdWx0cy5naXQpXG4gICAgICAub3B0aW9uKCctdCwgLS1kb3RmaWxlcycsICdJbmNsdWRlIGRvdGZpbGVzJylcbiAgICAgIC5vcHRpb24oJy0tbm9qZWt5bGwnLCAnQWRkIGEgLm5vamVreWxsIGZpbGUgdG8gZGlzYWJsZSBKZWt5bGwnKVxuICAgICAgLm9wdGlvbihcbiAgICAgICAgJy0tY25hbWUgPENOQU1FPicsXG4gICAgICAgICdBZGQgYSBDTkFNRSBmaWxlIHdpdGggdGhlIG5hbWUgb2YgeW91ciBjdXN0b20gZG9tYWluJyxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oJy1yLCAtLXJlcG8gPHJlcG8+JywgJ1VSTCBvZiB0aGUgcmVwb3NpdG9yeSB5b3UgYXJlIHB1c2hpbmcgdG8nKVxuICAgICAgLm9wdGlvbignLXAsIC0tZGVwdGggPGRlcHRoPicsICdkZXB0aCBmb3IgY2xvbmUnLCBnaHBhZ2VzLmRlZmF1bHRzLmRlcHRoKVxuICAgICAgLm9wdGlvbihcbiAgICAgICAgJy1vLCAtLXJlbW90ZSA8bmFtZT4nLFxuICAgICAgICAnVGhlIG5hbWUgb2YgdGhlIHJlbW90ZScsXG4gICAgICAgIGdocGFnZXMuZGVmYXVsdHMucmVtb3RlLFxuICAgICAgKVxuICAgICAgLm9wdGlvbihcbiAgICAgICAgJy11LCAtLXVzZXIgPGFkZHJlc3M+JyxcbiAgICAgICAgJ1RoZSBuYW1lIGFuZCBlbWFpbCBvZiB0aGUgdXNlciAoZGVmYXVsdHMgdG8gdGhlIGdpdCBjb25maWcpLiAgRm9ybWF0IGlzIFwiWW91ciBOYW1lIDxlbWFpbEBleGFtcGxlLmNvbT5cIi4nLFxuICAgICAgKVxuICAgICAgLm9wdGlvbihcbiAgICAgICAgJy12LCAtLXJlbW92ZSA8cGF0dGVybj4nLFxuICAgICAgICAnUmVtb3ZlIGZpbGVzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHBhdHRlcm4gJyArXG4gICAgICAgICAgJyhpZ25vcmVkIGlmIHVzZWQgdG9nZXRoZXIgd2l0aCAtLWFkZCkuJyxcbiAgICAgICAgZ2hwYWdlcy5kZWZhdWx0cy5yZW1vdmUsXG4gICAgICApXG4gICAgICAub3B0aW9uKCctbiwgLS1uby1wdXNoJywgJ0NvbW1pdCBvbmx5ICh3aXRoIG5vIHB1c2gpJylcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctZiwgLS1uby1oaXN0b3J5JyxcbiAgICAgICAgJ1B1c2ggZm9yY2UgbmV3IGNvbW1pdCB3aXRob3V0IHBhcmVudCBoaXN0b3J5JyxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctLWJlZm9yZS1hZGQgPGZpbGU+JyxcbiAgICAgICAgJ0V4ZWN1dGUgdGhlIGZ1bmN0aW9uIGV4cG9ydGVkIGJ5IDxmaWxlPiBiZWZvcmUgXCJnaXQgYWRkXCInLFxuICAgICAgKVxuICAgICAgLnBhcnNlKGFyZ3MpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHByb2dyYW0ub3B0cygpO1xuXG4gICAgbGV0IHVzZXI7XG4gICAgaWYgKG9wdGlvbnMudXNlcikge1xuICAgICAgY29uc3QgcGFydHMgPSBhZGRyLnBhcnNlT25lQWRkcmVzcyhvcHRpb25zLnVzZXIpO1xuICAgICAgaWYgKCFwYXJ0cykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYENvdWxkIG5vdCBwYXJzZSBuYW1lIGFuZCBlbWFpbCBmcm9tIHVzZXIgb3B0aW9uIFwiJHtvcHRpb25zLnVzZXJ9XCIgYCArXG4gICAgICAgICAgICAnKGZvcm1hdCBzaG91bGQgYmUgXCJZb3VyIE5hbWUgPGVtYWlsQGV4YW1wbGUuY29tPlwiKScsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB1c2VyID0ge25hbWU6IHBhcnRzLm5hbWUsIGVtYWlsOiBwYXJ0cy5hZGRyZXNzfTtcbiAgICB9XG4gICAgbGV0IGJlZm9yZUFkZDtcbiAgICBpZiAob3B0aW9ucy5iZWZvcmVBZGQpIHtcbiAgICAgIGNvbnN0IG0gPSByZXF1aXJlKFxuICAgICAgICByZXF1aXJlLnJlc29sdmUob3B0aW9ucy5iZWZvcmVBZGQsIHtcbiAgICAgICAgICBwYXRoczogW3Byb2Nlc3MuY3dkKCldLFxuICAgICAgICB9KSxcbiAgICAgICk7XG5cbiAgICAgIGlmICh0eXBlb2YgbSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBiZWZvcmVBZGQgPSBtO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG0uZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBiZWZvcmVBZGQgPSBtLmRlZmF1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYENvdWxkIG5vdCBmaW5kIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYmVmb3JlIGFkZGluZyBmaWxlcyBpbiBgICtcbiAgICAgICAgICAgIGBcIiR7b3B0aW9ucy5iZWZvcmVBZGR9XCIuXFxuIGAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgcmVwbzogb3B0aW9ucy5yZXBvLFxuICAgICAgc2lsZW50OiAhIW9wdGlvbnMuc2lsZW50LFxuICAgICAgYnJhbmNoOiBvcHRpb25zLmJyYW5jaCxcbiAgICAgIHNyYzogb3B0aW9ucy5zcmMsXG4gICAgICBkZXN0OiBvcHRpb25zLmRlc3QsXG4gICAgICBtZXNzYWdlOiBvcHRpb25zLm1lc3NhZ2UsXG4gICAgICB0YWc6IG9wdGlvbnMudGFnLFxuICAgICAgZ2l0OiBvcHRpb25zLmdpdCxcbiAgICAgIGRlcHRoOiBvcHRpb25zLmRlcHRoLFxuICAgICAgZG90ZmlsZXM6ICEhb3B0aW9ucy5kb3RmaWxlcyxcbiAgICAgIG5vamVreWxsOiAhIW9wdGlvbnMubm9qZWt5bGwsXG4gICAgICBjbmFtZTogb3B0aW9ucy5jbmFtZSxcbiAgICAgIGFkZDogISFvcHRpb25zLmFkZCxcbiAgICAgIHJlbW92ZTogb3B0aW9ucy5yZW1vdmUsXG4gICAgICByZW1vdGU6IG9wdGlvbnMucmVtb3RlLFxuICAgICAgcHVzaDogISFvcHRpb25zLnB1c2gsXG4gICAgICBoaXN0b3J5OiAhIW9wdGlvbnMuaGlzdG9yeSxcbiAgICAgIHVzZXI6IHVzZXIsXG4gICAgICBiZWZvcmVBZGQ6IGJlZm9yZUFkZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHB1Ymxpc2gob3B0aW9ucy5kaXN0LCBjb25maWcpO1xuICB9KTtcbn1cblxuaWYgKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7XG4gIG1haW4ocHJvY2Vzcy5hcmd2KVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKCdQdWJsaXNoZWRcXG4nKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShgJHtlcnIuc3RhY2t9XFxuYCwgKCkgPT4gcHJvY2Vzcy5leGl0KDEpKTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYWluO1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvbGlsY29uZmlnL3JlYWRtZS5tZFxuIyBMaWxjb25maWcg4pqZ77iPXG5bIVtucG0gdmVyc2lvbl0oaHR0cHM6Ly9iYWRnZS5mdXJ5LmlvL2pzL2xpbGNvbmZpZy5zdmcpXShodHRwczovL2JhZGdlLmZ1cnkuaW8vanMvbGlsY29uZmlnKVxuWyFbaW5zdGFsbCBzaXplXShodHRwczovL3BhY2thZ2VwaG9iaWEubm93LnNoL2JhZGdlP3A9bGlsY29uZmlnKV0oaHR0cHM6Ly9wYWNrYWdlcGhvYmlhLm5vdy5zaC9yZXN1bHQ/cD1saWxjb25maWcpXG5bIVtDb3ZlcmFnZSBTdGF0dXNdKGh0dHBzOi8vY292ZXJhbGxzLmlvL3JlcG9zL2dpdGh1Yi9hbnRvbms1Mi9saWxjb25maWcvYmFkZ2Uuc3ZnKV0oaHR0cHM6Ly9jb3ZlcmFsbHMuaW8vZ2l0aHViL2FudG9uazUyL2xpbGNvbmZpZylcblxuQSB6ZXJvLWRlcGVuZGVuY3kgYWx0ZXJuYXRpdmUgdG8gW2Nvc21pY29uZmlnXShodHRwczovL3d3dy5ucG1qcy5jb20vcGFja2FnZS9jb3NtaWNvbmZpZykgd2l0aCB0aGUgc2FtZSBBUEkuXG5cbiMjIEluc3RhbGxhdGlvblxuXG5gYGBzaFxubnBtIGluc3RhbGwgbGlsY29uZmlnXG5gYGBcblxuIyMgVXNhZ2VcblxuYGBganNcbmltcG9ydCB7bGlsY29uZmlnLCBsaWxjb25maWdTeW5jfSBmcm9tICdsaWxjb25maWcnO1xuXG4vLyBhbGwga2V5cyBhcmUgb3B0aW9uYWxcbmNvbnN0IG9wdGlvbnMgPSB7XG4gICAgc3RvcERpcjogJy9Vc2Vycy95b3Uvc29tZS9kaXInLFxuICAgIHNlYXJjaFBsYWNlczogWydwYWNrYWdlLmpzb24nLCAnbXlhcHAuY29uZi5qcyddLFxuICAgIGlnbm9yZUVtcHR5U2VhcmNoUGxhY2VzOiBmYWxzZVxufVxuLi4uXG5QYXRoOiBwYWNrYWdlLmpzb25cbntcbiAgXCJuYW1lXCI6IFwidml0ZV9yZWFjdF9zaGFkY25fdHNcIixcbiAgXCJwcml2YXRlXCI6IHRydWUsXG4gIFwidmVyc2lvblwiOiBcIjAuMC4wXCIsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgIFwiYnVpbGRcIjogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgXCJidWlsZDpkZXZcIjogXCJ2aXRlIGJ1aWxkIC0tbW9kZSBkZXZlbG9wbWVudFwiLFxuICAgIFwibGludFwiOiBcImVzbGludCAuXCIsXG4gICAgXCJwcmV2aWV3XCI6IFwidml0ZSBwcmV2aWV3XCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGhvb2tmb3JtL3Jlc29sdmVyc1wiOiBcIl4zLjkuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFjY29yZGlvblwiOiBcIl4xLjIuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFsZXJ0LWRpYWxvZ1wiOiBcIl4xLjEuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFzcGVjdC1yYXRpb1wiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWF2YXRhclwiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWNoZWNrYm94XCI6IFwiXjEuMS4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtY29sbGFwc2libGVcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1jb250ZXh0LW1lbnVcIjogXCJeMi4yLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1kaWFsb2dcIjogXCJeMS4xLjJcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1kcm9wZG93bi1tZW51XCI6IFwiXjIuMS4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtaG92ZXItY2FyZFwiOiBcIl4xLjEuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWxhYmVsXCI6IFwiXjIuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtbWVudWJhclwiOiBcIl4xLjEuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LW5hdmlnYXRpb24tbWVudVwiOiBcIl4xLjIuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXJcIjogXCJeMS4xLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1wcm9ncmVzc1wiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXJhZGlvLWdyb3VwXCI6IFwiXjEuMi4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2Nyb2xsLWFyZWFcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zZWxlY3RcIjogXCJeMi4xLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zZXBhcmF0b3JcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zbGlkZXJcIjogXCJeMS4yLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zbG90XCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc3dpdGNoXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtdGFic1wiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvYXN0XCI6IFwiXjEuMi4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9nZ2xlXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9nZ2xlLWdyb3VwXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9vbHRpcFwiOiBcIl4xLjEuNFwiLFxuICAgIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI6IFwiXjUuNTYuMlwiLFxuICAgIFwiY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5XCI6IFwiXjAuNy4xXCIsXG4gICAgXCJjbHN4XCI6IFwiXjIuMS4xXCIsXG4gICAgXCJjbWRrXCI6IFwiXjEuMC4wXCIsXG4gICAgXCJkYXRlLWZuc1wiOiBcIl4zLjYuMFwiLFxuICAgIFwiZW1ibGEtY2Fyb3VzZWwtcmVhY3RcIjogXCJeOC4zLjBcIixcbiAgICBcImlucHV0LW90cFwiOiBcIl4xLjIuNFwiLFxuICAgIFwibHVjaWRlLXJlYWN0XCI6IFwiXjAuNDYyLjBcIixcbiAgICBcIm5leHQtdGhlbWVzXCI6IFwiXjAuMy4wXCIsXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4zLjFcIixcbiAgICBcInJlYWN0LWRheS1waWNrZXJcIjogXCJeOC4xMC4xXCIsXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMy4xXCIsXG4gICAgXCJyZWFjdC1ob29rLWZvcm1cIjogXCJeNy41My4wXCIsXG4gICAgXCJyZWFjdC1yZXNpemFibGUtcGFuZWxzXCI6IFwiXjIuMS4zXCIsXG4gICAgXCJyZWFjdC1yb3V0ZXItZG9tXCI6IFwiXjYuMjYuMlwiLFxuICAgIFwicmVjaGFydHNcIjogXCJeMi4xMi43XCIsXG4gICAgXCJzb25uZXJcIjogXCJeMS41LjBcIixcbiAgICBcInRhaWx3aW5kLW1lcmdlXCI6IFwiXjIuNS4yXCIsXG4gICAgXCJ0YWlsd2luZGNzcy1hbmltYXRlXCI6IFwiXjEuMC43XCIsXG4gICAgXCJ2YXVsXCI6IFwiXjAuOS4zXCIsXG4gICAgXCJ6b2RcIjogXCJeMy4yMy44XCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGVzbGludC9qc1wiOiBcIl45LjkuMFwiLFxuICAgIFwiQHRhaWx3aW5kY3NzL3R5cG9ncmFwaHlcIjogXCJeMC41LjE1XCIsXG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMi41LjVcIixcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4zLjNcIixcbiAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMy4wXCIsXG4gICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjogXCJeMy41LjBcIixcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjIwXCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOS45LjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNS4xLjAtcmMuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1yZWZyZXNoXCI6IFwiXjAuNC45XCIsXG4gICAgXCJnaC1wYWdlc1wiOiBcIl42LjMuMFwiLFxuICAgIFwiZ2xvYmFsc1wiOiBcIl4xNS45LjBcIixcbiAgICBcInBvc3Rjc3NcIjogXCJeOC40LjQ3XCIsXG4gICAgXCJ0YWlsd2luZGNzc1wiOiBcIl4zLjQuMTFcIixcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNS41LjNcIixcbiAgICBcInR5cGVzY3JpcHQtZXNsaW50XCI6IFwiXjguMC4xXCIsXG4gICAgXCJ2aXRlXCI6IFwiXjUuNC4xXCJcbiAgfVxufVxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvQGh1bWFuZnMvY29yZS9SRUFETUUubWRcbi4uLlxuXG4+IFshV0FSTklOR11cbj4gVGhpcyBwcm9qZWN0IGlzICoqZXhwZXJpbWVudGFsKiogYW5kIG1heSBjaGFuZ2Ugc2lnbmlmaWNhbnRseSBiZWZvcmUgdjEuMC4wLiBVc2UgYXQgeW91ciBvd24gY2F1dGlvbiBhbmQgZGVmaW5pdGVseSBub3QgaW4gcHJvZHVjdGlvbiFcblxuIyMgSW5zdGFsbGF0aW9uXG5cbiMjIyBOb2RlLmpzXG5cbkluc3RhbGwgdXNpbmcgeW91ciBmYXZvcml0ZSBwYWNrYWdlIG1hbmFnZXIgZm9yIE5vZGUuanM6XG5cbmBgYHNoZWxsXG5ucG0gaW5zdGFsbCBAaHVtYW5mcy9jb3JlXG5cbiMgb3JcblxucG5wbSBpbnN0YWxsIEBodW1hbmZzL2NvcmVcblxuIyBvclxuXG55YXJuIGFkZCBAaHVtYW5mcy9jb3JlXG5cbiMgb3JcblxuYnVuIGluc3RhbGwgQGh1bWFuZnMvY29yZVxuYGBgXG5cblRoZW4geW91IGNhbiBpbXBvcnQgdGhlIGBIZnNgIGFuZCBgUGF0aGAgY2xhc3NlcyBsaWtlIHRoaXM6XG5cbmBgYGpzXG5pbXBvcnQgeyBIZnMsIFBhdGggfSBmcm9tIFwiQGh1bWFuZnMvY29yZVwiO1xuYGBgXG5cbiMjIyBEZW5vXG5cbkluc3RhbGwgdXNpbmcgW0pTUl0oaHR0cHM6Ly9qc3IuaW8pOlxuXG5gYGBzaGVsbFxuZGVubyBhZGQgQGh1bWFuZnMvY29yZVxuXG4jIG9yXG5cbmpzciBhZGQgQGh1bWFuZnMvY29yZVxuYGBgXG5cblRoZW4geW91IGNhbiBpbXBvcnQgdGhlIGBIZnNgIGNsYXNzIGxpa2UgdGhpczpcblxuYGBganNcbmltcG9ydCB7IEhmcywgUGF0aCB9IGZyb20gXCJAaHVtYW5mcy9jb3JlXCI7XG5gYGBcblxuIyMjIEJyb3dzZXJcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2Fqdi9zY3JpcHRzL3RyYXZpcy1naC1wYWdlc1xuIyEvdXNyL2Jpbi9lbnYgYmFzaFxuXG5zZXQgLWVcblxuaWYgW1sgXCIkVFJBVklTX0JSQU5DSFwiID09IFwibWFzdGVyXCIgJiYgXCIkVFJBVklTX1BVTExfUkVRVUVTVFwiID09IFwiZmFsc2VcIiAmJiAkVFJBVklTX0pPQl9OVU1CRVIgPX4gXCIuM1wiIF1dOyB0aGVuXG4gIGdpdCBkaWZmIC0tbmFtZS1vbmx5ICRUUkFWSVNfQ09NTUlUX1JBTkdFIHwgZ3JlcCAtcUUgJ1xcLm1kJHxeTElDRU5TRSR8dHJhdmlzLWdoLXBhZ2VzJCcgJiYge1xuICAgIHJtIC1yZiAuLi9naC1wYWdlc1xuICAgIGdpdCBjbG9uZSAtYiBnaC1wYWdlcyAtLXNpbmdsZS1icmFuY2ggaHR0cHM6Ly8ke0dJVEhVQl9UT0tFTn1AZ2l0aHViLmNvbS9hanYtdmFsaWRhdG9yL2Fqdi5naXQgLi4vZ2gtcGFnZXNcbiAgICBta2RpciAtcCAuLi9naC1wYWdlcy9fc291cmNlXG4gICAgY3AgKi5tZCAuLi9naC1wYWdlcy9fc291cmNlXG4gICAgY3AgTElDRU5TRSAuLi9naC1wYWdlcy9fc291cmNlXG4gICAgY3VycmVudERpcj0kKHB3ZClcbiAgICBjZCAuLi9naC1wYWdlc1xuICAgICRjdXJyZW50RGlyL25vZGVfbW9kdWxlcy8uYmluL2doLXBhZ2VzLWdlbmVyYXRvclxuICAgICMgcmVtb3ZlIGxvZ28gZnJvbSBSRUFETUVcbiAgICBzZWQgLWkgLUUgXCJzLzxpbWdbXj5dK2Fqdl9sb2dvW14+XSs+Ly9cIiBpbmRleC5tZFxuICAgIGdpdCBjb25maWcgdXNlci5lbWFpbCBcIiRHSVRfVVNFUl9FTUFJTFwiXG4gICAgZ2l0IGNvbmZpZyB1c2VyLm5hbWUgXCIkR0lUX1VTRVJfTkFNRVwiXG4gICAgZ2l0IGFkZCAuXG4gICAgZ2l0IGNvbW1pdCAtYW0gXCJ1cGRhdGVkIGJ5IHRyYXZpcyBidWlsZCAjJFRSQVZJU19CVUlMRF9OVU1CRVJcIlxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvbGlsY29uZmlnL3NyYy9pbmRleC5qc1xuLy8gQHRzLWNoZWNrXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbmNvbnN0IGZzUmVhZEZpbGVBc3luYyA9IGZzLnByb21pc2VzLnJlYWRGaWxlO1xuXG4vKiogQHR5cGUgeyhuYW1lOiBzdHJpbmcsIHN5bmM6IGJvb2xlYW4pID0+IHN0cmluZ1tdfSAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdFNlYXJjaFBsYWNlcyhuYW1lLCBzeW5jKSB7XG5cdHJldHVybiBbXG5cdFx0J3BhY2thZ2UuanNvbicsXG5cdFx0YC4ke25hbWV9cmMuanNvbmAsXG5cdFx0YC4ke25hbWV9cmMuanNgLFxuXHRcdGAuJHtuYW1lfXJjLmNqc2AsXG5cdFx0Li4uKHN5bmMgPyBbXSA6IFtgLiR7bmFtZX1yYy5tanNgXSksXG5cdFx0YC5jb25maWcvJHtuYW1lfXJjYCxcblx0XHRgLmNvbmZpZy8ke25hbWV9cmMuanNvbmAsXG5cdFx0YC5jb25maWcvJHtuYW1lfXJjLmpzYCxcblx0XHRgLmNvbmZpZy8ke25hbWV9cmMuY2pzYCxcblx0XHQuLi4oc3luYyA/IFtdIDogW2AuY29uZmlnLyR7bmFtZX1yYy5tanNgXSksXG5cdFx0YCR7bmFtZX0uY29uZmlnLmpzYCxcblx0XHRgJHtuYW1lfS5jb25maWcuY2pzYCxcblx0XHQuLi4oc3luYyA/IFtdIDogW2Ake25hbWV9LmNvbmZpZy5tanNgXSksXG5cdF07XG59XG4uLi5cblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vaW5kZXgnKS5saWxjb25maWd9ICovXG5tb2R1bGUuZXhwb3J0cy5saWxjb25maWcgPSBmdW5jdGlvbiBsaWxjb25maWcobmFtZSwgb3B0aW9ucykge1xuXHRjb25zdCB7XG5cdFx0aWdub3JlRW1wdHlTZWFyY2hQbGFjZXMsXG5cdFx0bG9hZGVycyxcblx0XHRwYWNrYWdlUHJvcCxcblx0XHRzZWFyY2hQbGFjZXMsXG5cdFx0c3RvcERpcixcblx0XHR0cmFuc2Zvcm0sXG5cdFx0Y2FjaGUsXG5cdH0gPSBnZXRPcHRpb25zKG5hbWUsIG9wdGlvbnMgPz8ge30sIGZhbHNlKTtcblx0Y29uc3Qgc2VhcmNoQ2FjaGUgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IGxvYWRDYWNoZSA9IG5ldyBNYXAoKTtcblx0Y29uc3QgZW1wbGFjZSA9IG1ha2VFbXBsYWNlKGNhY2hlKTtcblxuXHRyZXR1cm4ge1xuXHRcdGFzeW5jIHNlYXJjaChzZWFyY2hGcm9tID0gcHJvY2Vzcy5jd2QoKSkge1xuXHRcdFx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW5kZXgnKS5MaWxjb25maWdSZXN1bHR9ICovXG5cdFx0XHRjb25zdCByZXN1bHQgPSB7XG5cdFx0XHRcdGNvbmZpZzogbnVsbCxcblx0XHRcdFx0ZmlsZXBhdGg6ICcnLFxuXHRcdFx0fTtcblxuXHRcdFx0LyoqIEB0eXBlIHtTZXQ8c3RyaW5nPn0gKi9cblx0XHRcdGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG5cdFx0XHRsZXQgZGlyID0gc2VhcmNoRnJvbTtcblx0XHRcdGRpckxvb3A6IHdoaWxlICh0cnVlKSB7XG5cdFx0XHRcdGlmIChjYWNoZSkge1xuXHRcdFx0XHRcdGNvbnN0IHIgPSBzZWFyY2hDYWNoZS5nZXQoZGlyKTtcblx0XHRcdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHAgb2YgdmlzaXRlZCkgc2VhcmNoQ2FjaGUuc2V0KHAsIHIpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZpc2l0ZWQuYWRkKGRpcik7XG5cdFx0XHRcdH1cbi4uLlxuUGF0aDogdGFpbHdpbmQuY29uZmlnLnRzXG5cbmltcG9ydCB0eXBlIHsgQ29uZmlnIH0gZnJvbSBcInRhaWx3aW5kY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZGFya01vZGU6IFtcImNsYXNzXCJdLFxuICBjb250ZW50OiBbXG4gICAgXCIuL3BhZ2VzLyoqLyoue3RzLHRzeH1cIixcbiAgICBcIi4vY29tcG9uZW50cy8qKi8qLnt0cyx0c3h9XCIsXG4gICAgXCIuL2FwcC8qKi8qLnt0cyx0c3h9XCIsXG4gICAgXCIuL3NyYy8qKi8qLnt0cyx0c3h9XCIsXG4gIF0sXG4gIHByZWZpeDogXCJcIixcbiAgdGhlbWU6IHtcbiAgICBjb250YWluZXI6IHtcbiAgICAgIGNlbnRlcjogdHJ1ZSxcbiAgICAgIHBhZGRpbmc6IFwiMnJlbVwiLFxuICAgICAgc2NyZWVuczoge1xuICAgICAgICBcIjJ4bFwiOiBcIjE0MDBweFwiXG4gICAgICB9XG4gICAgfSxcbi4uLlxuUGF0aDogc3JjL21haW4udHN4XG5pbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCdcbmltcG9ydCBBcHAgZnJvbSAnLi9BcHAudHN4J1xuaW1wb3J0ICcuL2luZGV4LmNzcydcblxuY3JlYXRlUm9vdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikhKS5yZW5kZXIoPEFwcCAvPik7XG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy95YW1sL3BhY2thZ2UuanNvblxuLi4uXG4gICAgXCJ0ZXN0OmRpc3Q6dHlwZXNcIjogXCJ0c2MgLS1hbGxvd0pzIC0tbW9kdWxlUmVzb2x1dGlvbiBub2RlIC0tbm9FbWl0IC0tdGFyZ2V0IGVzNSBkaXN0L2luZGV4LmpzXCIsXG4gICAgXCJ0ZXN0OnR5cGVzXCI6IFwidHNjIC0tbm9FbWl0ICYmIHRzYyAtLW5vRW1pdCAtcCB0ZXN0cy90c2NvbmZpZy5qc29uXCIsXG4gICAgXCJkb2NzOmluc3RhbGxcIjogXCJjZCBkb2NzLXNsYXRlICYmIGJ1bmRsZSBpbnN0YWxsXCIsXG4gICAgXCJwcmVkb2NzOmRlcGxveVwiOiBcIm5vZGUgZG9jcy9wcmVwYXJlLWRvY3MubWpzXCIsXG4gICAgXCJkb2NzOmRlcGxveVwiOiBcImNkIGRvY3Mtc2xhdGUgJiYgLi9kZXBsb3kuc2hcIixcbiAgICBcInByZWRvY3NcIjogXCJub2RlIGRvY3MvcHJlcGFyZS1kb2NzLm1qc1wiLFxuICAgIFwiZG9jc1wiOiBcImNkIGRvY3Mtc2xhdGUgJiYgYnVuZGxlIGV4ZWMgbWlkZGxlbWFuIHNlcnZlclwiLFxuICAgIFwicHJldmVyc2lvblwiOiBcIm5wbSB0ZXN0ICYmIG5wbSBydW4gYnVpbGRcIixcbiAgICBcInByZXB1Ymxpc2hPbmx5XCI6IFwibnBtIHJ1biBjbGVhbiAmJiBucG0gdGVzdCAmJiBucG0gcnVuIGJ1aWxkXCJcbiAgfSxcbiAgXCJicm93c2Vyc2xpc3RcIjogXCJkZWZhdWx0cywgbm90IGllIDExXCIsXG4gIFwicHJldHRpZXJcIjoge1xuICAgIFwiYXJyb3dQYXJlbnNcIjogXCJhdm9pZFwiLFxuICAgIFwic2VtaVwiOiBmYWxzZSxcbiAgICBcInNpbmdsZVF1b3RlXCI6IHRydWUsXG4gICAgXCJ0cmFpbGluZ0NvbW1hXCI6IFwibm9uZVwiXG4gIH0sXG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9jb21tYW5kZXIvUmVhZG1lLm1kXG4uLi5cbmBgYFxuXG4jIyBFeGFtcGxlc1xuXG5gYGBqc1xuY29uc3QgcHJvZ3JhbSA9IHJlcXVpcmUoJ2NvbW1hbmRlcicpO1xuXG5wcm9ncmFtXG4gIC52ZXJzaW9uKCcwLjEuMCcpXG4gIC5vcHRpb24oJy1DLCAtLWNoZGlyIDxwYXRoPicsICdjaGFuZ2UgdGhlIHdvcmtpbmcgZGlyZWN0b3J5JylcbiAgLm9wdGlvbignLWMsIC0tY29uZmlnIDxwYXRoPicsICdzZXQgY29uZmlnIHBhdGguIGRlZmF1bHRzIHRvIC4vZGVwbG95LmNvbmYnKVxuICAub3B0aW9uKCctVCwgLS1uby10ZXN0cycsICdpZ25vcmUgdGVzdCBob29rJyk7XG5cbnByb2dyYW1cbiAgLmNvbW1hbmQoJ3NldHVwIFtlbnZdJylcbiAgLmRlc2NyaXB0aW9uKCdydW4gc2V0dXAgY29tbWFuZHMgZm9yIGFsbCBlbnZzJylcbiAgLm9wdGlvbihcIi1zLCAtLXNldHVwX21vZGUgW21vZGVdXCIsIFwiV2hpY2ggc2V0dXAgbW9kZSB0byB1c2VcIilcbiAgLmFjdGlvbihmdW5jdGlvbihlbnYsIG9wdGlvbnMpe1xuICAgIGNvbnN0IG1vZGUgPSBvcHRpb25zLnNldHVwX21vZGUgfHwgXCJub3JtYWxcIjtcbiAgICBlbnYgPSBlbnYgfHwgJ2FsbCc7XG4gICAgY29uc29sZS5sb2coJ3NldHVwIGZvciAlcyBlbnYocykgd2l0aCAlcyBtb2RlJywgZW52LCBtb2RlKTtcbiAgfSk7XG5cbnByb2dyYW1cbiAgLmNvbW1hbmQoJ2V4ZWMgPGNtZD4nKVxuICAuYWxpYXMoJ2V4JylcbiAgLmRlc2NyaXB0aW9uKCdleGVjdXRlIHRoZSBnaXZlbiByZW1vdGUgY21kJylcbiAgLm9wdGlvbihcIi1lLCAtLWV4ZWNfbW9kZSA8bW9kZT5cIiwgXCJXaGljaCBleGVjIG1vZGUgdG8gdXNlXCIpXG4gIC5hY3Rpb24oZnVuY3Rpb24oY21kLCBvcHRpb25zKXtcbiAgICBjb25zb2xlLmxvZygnZXhlYyBcIiVzXCIgdXNpbmcgJXMgbW9kZScsIGNtZCwgb3B0aW9ucy5leGVjX21vZGUpO1xuICB9KS5vbignLS1oZWxwJywgZnVuY3Rpb24oKSB7XG4gICAgY29uc29sZS5sb2coJycpO1xuICAgIGNvbnNvbGUubG9nKCdFeGFtcGxlczonKTtcbiAgICBjb25zb2xlLmxvZygnJyk7XG4gICAgY29uc29sZS5sb2coJyAgJCBkZXBsb3kgZXhlYyBzZXF1ZW50aWFsJyk7XG4gICAgY29uc29sZS5sb2coJyAgJCBkZXBsb3kgZXhlYyBhc3luYycpO1xuICB9KTtcblxucHJvZ3JhbVxuICAuY29tbWFuZCgnKicpXG4gIC5hY3Rpb24oZnVuY3Rpb24oZW52KXtcbiAgICBjb25zb2xlLmxvZygnZGVwbG95aW5nIFwiJXNcIicsIGVudik7XG4gIH0pO1xuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9NbG9wc0pvdXJuZXkudHN4XG4uLi5cbiAgICB7XG4gICAgICBzdGFnZTogXCLQntGA0LrQtdGB0YLRgNCw0YbQuNGPINC80L7QtNC10LvQtdC5XCIsXG4gICAgICB2YW5pbGxhOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcItCU0LXQu9Cw0LXRgiDRgdC+0LHRgdGC0LLQtdC90L3Ri9C5IGluZ3Jlc3MsINC/0LjRiNC10YIgWUFNTCDQtNC70Y8gS0ZTZXJ2aW5nL1NlbGRvbiwg0L3QsNGB0YLRgNCw0LjQstCw0LXRgiBQcm9tZXRoZXVzIEFkYXB0ZXIg0LggSFBBLlwiLFxuICAgICAgICBpY29uOiA8WENpcmNsZSBjbGFzc05hbWU9XCJ0ZXh0LXJlZC01MDBcIiAvPixcbiAgICAgICAgZWZmb3J0OiBcItCi0YDQtdCx0YPQtdGCINGN0LrRgdC/0LXRgNGC0LjQt9GLXCIsXG4gICAgICAgIHRpbWU6IFwiMS0yINC90LXQtNC10LvQuFwiXG4gICAgICB9LFxuICAgICAgbm92YToge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCLQk9C+0YLQvtCy0YvQtSDRiNCw0LHQu9C+0L3RiyBkZXBsb3ltZW50ICsgYXV0b3NjYWxpbmc7INC80LXRgtGA0LjQutC4INC80L7QtNC10LvQtdC5INC/0L7Qv9Cw0LTQsNGO0YIg0LIgVGhhbm9zINCx0LXQtyDQtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9GFIGV4cG9ydGVycy5cIixcbiAgICAgICAgaWNvbjogPENoZWNrQ2lyY2xlIGNsYXNzTmFtZT1cInRleHQtZ3JlZW4tNTAwXCIgLz4sXG4gICAgICAgIGVmZm9ydDogXCLQk9C+0YLQvtCy0YvQtSDRiNCw0LHQu9C+0L3Ri1wiLFxuICAgICAgICB0aW1lOiBcIjEtMiDQtNC90Y9cIlxuICAgICAgfVxuICAgIH0sXG4uLi5cblBhdGg6IHNyYy9jb21wb25lbnRzL0RhdGFTY2llbmNlSm91cm5leS50c3hcbi4uLlxuICAgIHtcbiAgICAgIHN0YWdlOiBcIkRlcGxveW1lbnQgLyBBLUJcIixcbiAgICAgIHZhbmlsbGE6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwi0J/QuNGI0LXRgiDRgdC10YDQstC40YEgWUFNTCwg0LTQvtCz0L7QstCw0YDQuNCy0LDQtdGC0YHRjyDQviBJbmdyZXNzOyDQtNC+0LvRjNGI0LUgMS0yINC00L3QtdC5LlwiLFxuICAgICAgICBpY29uOiA8QWxlcnRUcmlhbmdsZSBjbGFzc05hbWU9XCJ0ZXh0LWFtYmVyLTUwMFwiIC8+LFxuICAgICAgICBlZmZvcnQ6IFwi0KLRgNC10LHRg9C10YIgRGV2T3BzXCIsXG4gICAgICAgIHRpbWU6IFwiMS0yINC00L3Rj1wiXG4gICAgICB9LFxuICAgICAgbm92YToge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCLQndCw0LbQuNC80LDQtdGCIMKrUHJvbW90ZSBtb2RlbMK7INCyIE1MZmxvdyDihpIg0YHQtdGA0LLQuNGBINGA0LDQt9Cy0ZHRgNC90YPRgiwg0LrQsNC90LDRgNC10LXRh9C90YvQuSDRgtGA0LDRhNC40LogMTAgJSDQvdCw0YHRgtGA0L7QtdC9LlwiLFxuICAgICAgICBpY29uOiA8Q2hlY2tDaXJjbGUgY2xhc3NOYW1lPVwidGV4dC1ncmVlbi01MDBcIiAvPixcbiAgICAgICAgZWZmb3J0OiBcIk9uZS1jbGljayBkZXBsb3lcIixcbiAgICAgICAgdGltZTogXCLQnNC40L3Rg9GC0YtcIlxuICAgICAgfVxuICAgIH0sXG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9jbWRrL3BhY2thZ2UuanNvblxue1xuICBcIm5hbWVcIjogXCJjbWRrXCIsXG4gIFwidmVyc2lvblwiOiBcIjEuMC4wXCIsXG4gIFwibGljZW5zZVwiOiBcIk1JVFwiLFxuICBcIm1haW5cIjogXCIuL2Rpc3QvaW5kZXguanNcIixcbiAgXCJtb2R1bGVcIjogXCIuL2Rpc3QvaW5kZXgubWpzXCIsXG4gIFwidHlwZXNcIjogXCIuL2Rpc3QvaW5kZXguZC50c1wiLFxuICBcImZpbGVzXCI6IFtcbiAgICBcImRpc3RcIlxuICBdLFxuICBcImV4cG9ydHNcIjoge1xuICAgIFwiLlwiOiB7XG4gICAgICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIixcbiAgICAgIFwiaW1wb3J0XCI6IFwiLi9kaXN0L2luZGV4Lm1qc1wiLFxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L2luZGV4LmpzXCJcbiAgICB9XG4gIH0sXG4gIFwicGVlckRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJyZWFjdFwiOiBcIl4xOC4wLjBcIixcbiAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4wLjBcIlxuICB9LFxuICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtZGlhbG9nXCI6IFwiMS4wLjVcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1wcmltaXRpdmVcIjogXCIxLjAuM1wiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIjE4LjAuMTVcIlxuICB9LFxuICBcInNpZGVFZmZlY3RzXCI6IGZhbHNlLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiYnVpbGRcIjogXCJ0c3VwIHNyY1wiLFxuICAgIFwiZGV2XCI6IFwidHN1cCBzcmMgLS13YXRjaFwiXG4gIH1cbn0uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9yZWFjdC9SRUFETUUubWRcbiMgYHJlYWN0YFxuXG5SZWFjdCBpcyBhIEphdmFTY3JpcHQgbGlicmFyeSBmb3IgY3JlYXRpbmcgdXNlciBpbnRlcmZhY2VzLlxuXG5UaGUgYHJlYWN0YCBwYWNrYWdlIGNvbnRhaW5zIG9ubHkgdGhlIGZ1bmN0aW9uYWxpdHkgbmVjZXNzYXJ5IHRvIGRlZmluZSBSZWFjdCBjb21wb25lbnRzLiBJdCBpcyB0eXBpY2FsbHkgdXNlZCB0b2dldGhlciB3aXRoIGEgUmVhY3QgcmVuZGVyZXIgbGlrZSBgcmVhY3QtZG9tYCBmb3IgdGhlIHdlYiwgb3IgYHJlYWN0LW5hdGl2ZWAgZm9yIHRoZSBuYXRpdmUgZW52aXJvbm1lbnRzLlxuXG4qKk5vdGU6KiogYnkgZGVmYXVsdCwgUmVhY3Qgd2lsbCBiZSBpbiBkZXZlbG9wbWVudCBtb2RlLiBUaGUgZGV2ZWxvcG1lbnQgdmVyc2lvbiBpbmNsdWRlcyBleHRyYSB3YXJuaW5ncyBhYm91dCBjb21tb24gbWlzdGFrZXMsIHdoZXJlYXMgdGhlIHByb2R1Y3Rpb24gdmVyc2lvbiBpbmNsdWRlcyBleHRyYSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25zIGFuZCBzdHJpcHMgYWxsIGVycm9yIG1lc3NhZ2VzLiBEb24ndCBmb3JnZXQgdG8gdXNlIHRoZSBbcHJvZHVjdGlvbiBidWlsZF0oaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL29wdGltaXppbmctcGVyZm9ybWFuY2UuaHRtbCN1c2UtdGhlLXByb2R1Y3Rpb24tYnVpbGQpIHdoZW4gZGVwbG95aW5nIHlvdXIgYXBwbGljYXRpb24uXG5cbiMjIFVzYWdlXG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9iYXJlLW9zL3BhY2thZ2UuanNvblxue1xuICBcIm5hbWVcIjogXCJiYXJlLW9zXCIsXG4gIFwidmVyc2lvblwiOiBcIjMuNi4xXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJPcGVyYXRpbmcgc3lzdGVtIHV0aWxpdGllcyBmb3IgSmF2YXNjcmlwdFwiLFxuICBcImV4cG9ydHNcIjoge1xuICAgIFwiLlwiOiB7XG4gICAgICBcInR5cGVzXCI6IFwiLi9pbmRleC5kLnRzXCIsXG4gICAgICBcImRlZmF1bHRcIjogXCIuL2luZGV4LmpzXCJcbiAgICB9LFxuICAgIFwiLi9wYWNrYWdlXCI6IFwiLi9wYWNrYWdlLmpzb25cIixcbiAgICBcIi4vY29uc3RhbnRzXCI6IFwiLi9saWIvY29uc3RhbnRzLmpzXCIsXG4gICAgXCIuL2Vycm9yc1wiOiBcIi4vbGliL2Vycm9ycy5qc1wiXG4gIH0sXG4gIFwiZmlsZXNcIjogW1xuICAgIFwiaW5kZXguanNcIixcbiAgICBcImluZGV4LmQudHNcIixcbiAgICBcImJpbmRpbmcuY1wiLFxuICAgIFwiYmluZGluZy5qc1wiLFxuICAgIFwiQ01ha2VMaXN0cy50eHRcIixcbiAgICBcImxpYlwiLFxuICAgIFwicHJlYnVpbGRzXCJcbiAgXSxcbiAgXCJhZGRvblwiOiB0cnVlLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwidGUuLi4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFLZDJ6RlhkS1F3ektheHJxNE1Wd1JTIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDoyNTo0Ny4yMDJaIiwicmVzcG9uc2VfdGV4dCI6ItCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDQv9C+0YHQvNC+0YLRgNC40Lwg0L3QsCDRhNCw0LnQu9GLINGB0LHQvtGA0LrQuCDQuCDQtNC10L/Qu9C+0Y8sINGH0YLQvtCx0Ysg0L/QvtC90Y/RgtGMLCDQutCw0Log0L3QsNGB0YLRgNC+0LXQvSDQtNC10L/Qu9C+0Lkg0L3QsCBHaXRIdWIgUGFnZXM6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiYzIxODc2YmUtNzk4ZS00ZTEyLThjNWMtYjZlZDk5NDBhOTBhIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxWER6UjVqREVzQXRuZjZpNDFQY2JiQiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJ2aXRlLmNvbmZpZy50c1wifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCU0LDQstCw0LnRgtC1INC/0YDQvtCy0LXRgNC40Lwg0YHQvtC00LXRgNC20LjQvNC+0LUg0YTQsNC50LvQsCB2aXRlLmNvbmZpZy50cyDQuCDQv9C+0YHQvNC+0YLRgNC40LwsINC60LDQuiDQvdCw0YHRgtGA0L7QtdC9INC00LXQv9C70L7QuTpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlRoZSBmb2xsb3dpbmcgY29kZSBzZWN0aW9ucyB3ZXJlIHJldHJpZXZlZDpcblBhdGg6IG5vZGVfbW9kdWxlcy9hanYvc2NyaXB0cy90cmF2aXMtZ2gtcGFnZXNcbiMhL3Vzci9iaW4vZW52IGJhc2hcblxuc2V0IC1lXG5cbmlmIFtbIFwiJFRSQVZJU19CUkFOQ0hcIiA9PSBcIm1hc3RlclwiICYmIFwiJFRSQVZJU19QVUxMX1JFUVVFU1RcIiA9PSBcImZhbHNlXCIgJiYgJFRSQVZJU19KT0JfTlVNQkVSID1+IFwiLjNcIiBdXTsgdGhlblxuICBnaXQgZGlmZiAtLW5hbWUtb25seSAkVFJBVklTX0NPTU1JVF9SQU5HRSB8IGdyZXAgLXFFICdcXC5tZCR8XkxJQ0VOU0UkfHRyYXZpcy1naC1wYWdlcyQnICYmIHtcbiAgICBybSAtcmYgLi4vZ2gtcGFnZXNcbiAgICBnaXQgY2xvbmUgLWIgZ2gtcGFnZXMgLS1zaW5nbGUtYnJhbmNoIGh0dHBzOi8vJHtHSVRIVUJfVE9LRU59QGdpdGh1Yi5jb20vYWp2LXZhbGlkYXRvci9hanYuZ2l0IC4uL2doLXBhZ2VzXG4gICAgbWtkaXIgLXAgLi4vZ2gtcGFnZXMvX3NvdXJjZVxuICAgIGNwICoubWQgLi4vZ2gtcGFnZXMvX3NvdXJjZVxuICAgIGNwIExJQ0VOU0UgLi4vZ2gtcGFnZXMvX3NvdXJjZVxuICAgIGN1cnJlbnREaXI9JChwd2QpXG4gICAgY2QgLi4vZ2gtcGFnZXNcbiAgICAkY3VycmVudERpci9ub2RlX21vZHVsZXMvLmJpbi9naC1wYWdlcy1nZW5lcmF0b3JcbiAgICAjIHJlbW92ZSBsb2dvIGZyb20gUkVBRE1FXG4gICAgc2VkIC1pIC1FIFwicy88aW1nW14+XSthanZfbG9nb1tePl0rPi8vXCIgaW5kZXgubWRcbiAgICBnaXQgY29uZmlnIHVzZXIuZW1haWwgXCIkR0lUX1VTRVJfRU1BSUxcIlxuICAgIGdpdCBjb25maWcgdXNlci5uYW1lIFwiJEdJVF9VU0VSX05BTUVcIlxuICAgIGdpdCBhZGQgLlxuICAgIGdpdCBjb21taXQgLWFtIFwidXBkYXRlZCBieSB0cmF2aXMgYnVpbGQgIyRUUkFWSVNfQlVJTERfTlVNQkVSXCJcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzLy5iaW4vZ2gtcGFnZXNcbiMhL3Vzci9iaW4vZW52IG5vZGVcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHtDb21tYW5kfSA9IHJlcXVpcmUoJ2NvbW1hbmRlcicpO1xuY29uc3QgYWRkciA9IHJlcXVpcmUoJ2VtYWlsLWFkZHJlc3NlcycpO1xuY29uc3QgZ2hwYWdlcyA9IHJlcXVpcmUoJy4uL2xpYi9pbmRleC5qcycpO1xuY29uc3QgcGtnID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XG5cbmZ1bmN0aW9uIHB1Ymxpc2goZGlzdCwgY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgYmFzZVBhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgZGlzdCk7XG4gICAgZ2hwYWdlcy5wdWJsaXNoKGJhc2VQYXRoLCBjb25maWcsIChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFpbihhcmdzKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICBjb25zdCBwcm9ncmFtID0gbmV3IENvbW1hbmQoKVxuICAgICAgLnZlcnNpb24ocGtnLnZlcnNpb24pXG4gICAgICAucmVxdWlyZWRPcHRpb24oXG4gICAgICAgICctZCwgLS1kaXN0IDxkaXN0PicsXG4gICAgICAgICdCYXNlIGRpcmVjdG9yeSBmb3IgYWxsIHNvdXJjZSBmaWxlcycsXG4gICAgICApXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLXMsIC0tc3JjIDxzcmM+JyxcbiAgICAgICAgJ1BhdHRlcm4gdXNlZCB0byBzZWxlY3Qgd2hpY2ggZmlsZXMgdG8gcHVibGlzaCcsXG4gICAgICAgIGdocGFnZXMuZGVmYXVsdHMuc3JjLFxuICAgICAgKVxuICAgICAgLm9wdGlvbihcbiAgICAgICAgJy1iLCAtLWJyYW5jaCA8YnJhbmNoPicsXG4gICAgICAgICdOYW1lIG9mIHRoZSBicmFuY2ggeW91IGFyZSBwdXNoaW5nIHRvJyxcbiAgICAgICAgZ2hwYWdlcy5kZWZhdWx0cy5icmFuY2gsXG4gICAgICApXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLWUsIC0tZGVzdCA8ZGVzdD4nLFxuICAgICAgICAnVGFyZ2V0IGRpcmVjdG9yeSB3aXRoaW4gdGhlIGRlc3RpbmF0aW9uIGJyYW5jaCAocmVsYXRpdmUgdG8gdGhlIHJvb3QpJyxcbiAgICAgICAgZ2hwYWdlcy5kZWZhdWx0cy5kZXN0LFxuICAgICAgKVxuICAgICAgLm9wdGlvbignLWEsIC0tYWRkJywgJ09ubHkgYWRkLCBhbmQgbmV2ZXIgcmVtb3ZlIGV4aXN0aW5nIGZpbGVzJylcbiAgICAgIC5vcHRpb24oJy14LCAtLXNpbGVudCcsICdEbyBub3Qgb3V0cHV0IHRoZSByZXBvc2l0b3J5IHVybCcpXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLW0sIC0tbWVzc2FnZSA8bWVzc2FnZT4nLFxuICAgICAgICAnY29tbWl0IG1lc3NhZ2UnLFxuICAgICAgICBnaHBhZ2VzLmRlZmF1bHRzLm1lc3NhZ2UsXG4gICAgICApXG4gICAgICAub3B0aW9uKCctZywgLS10YWcgPHRhZz4nLCAnYWRkIHRhZyB0byBjb21taXQnKVxuICAgICAgLm9wdGlvbignLS1naXQgPGdpdD4nLCAnUGF0aCB0byBnaXQgZXhlY3V0YWJsZScsIGdocGFnZXMuZGVmYXVsdHMuZ2l0KVxuICAgICAgLm9wdGlvbignLXQsIC0tZG90ZmlsZXMnLCAnSW5jbHVkZSBkb3RmaWxlcycpXG4gICAgICAub3B0aW9uKCctLW5vamVreWxsJywgJ0FkZCBhIC5ub2pla3lsbCBmaWxlIHRvIGRpc2FibGUgSmVreWxsJylcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctLWNuYW1lIDxDTkFNRT4nLFxuICAgICAgICAnQWRkIGEgQ05BTUUgZmlsZSB3aXRoIHRoZSBuYW1lIG9mIHlvdXIgY3VzdG9tIGRvbWFpbicsXG4gICAgICApXG4gICAgICAub3B0aW9uKCctciwgLS1yZXBvIDxyZXBvPicsICdVUkwgb2YgdGhlIHJlcG9zaXRvcnkgeW91IGFyZSBwdXNoaW5nIHRvJylcbiAgICAgIC5vcHRpb24oJy1wLCAtLWRlcHRoIDxkZXB0aD4nLCAnZGVwdGggZm9yIGNsb25lJywgZ2hwYWdlcy5kZWZhdWx0cy5kZXB0aClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctbywgLS1yZW1vdGUgPG5hbWU+JyxcbiAgICAgICAgJ1RoZSBuYW1lIG9mIHRoZSByZW1vdGUnLFxuICAgICAgICBnaHBhZ2VzLmRlZmF1bHRzLnJlbW90ZSxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctdSwgLS11c2VyIDxhZGRyZXNzPicsXG4gICAgICAgICdUaGUgbmFtZSBhbmQgZW1haWwgb2YgdGhlIHVzZXIgKGRlZmF1bHRzIHRvIHRoZSBnaXQgY29uZmlnKS4gIEZvcm1hdCBpcyBcIllvdXIgTmFtZSA8ZW1haWxAZXhhbXBsZS5jb20+XCIuJyxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctdiwgLS1yZW1vdmUgPHBhdHRlcm4+JyxcbiAgICAgICAgJ1JlbW92ZSBmaWxlcyB0aGF0IG1hdGNoIHRoZSBnaXZlbiBwYXR0ZXJuICcgK1xuICAgICAgICAgICcoaWdub3JlZCBpZiB1c2VkIHRvZ2V0aGVyIHdpdGggLS1hZGQpLicsXG4gICAgICAgIGdocGFnZXMuZGVmYXVsdHMucmVtb3ZlLFxuICAgICAgKVxuICAgICAgLm9wdGlvbignLW4sIC0tbm8tcHVzaCcsICdDb21taXQgb25seSAod2l0aCBubyBwdXNoKScpXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLWYsIC0tbm8taGlzdG9yeScsXG4gICAgICAgICdQdXNoIGZvcmNlIG5ldyBjb21taXQgd2l0aG91dCBwYXJlbnQgaGlzdG9yeScsXG4gICAgICApXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLS1iZWZvcmUtYWRkIDxmaWxlPicsXG4gICAgICAgICdFeGVjdXRlIHRoZSBmdW5jdGlvbiBleHBvcnRlZCBieSA8ZmlsZT4gYmVmb3JlIFwiZ2l0IGFkZFwiJyxcbiAgICAgIClcbiAgICAgIC5wYXJzZShhcmdzKTtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBwcm9ncmFtLm9wdHMoKTtcblxuICAgIGxldCB1c2VyO1xuICAgIGlmIChvcHRpb25zLnVzZXIpIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gYWRkci5wYXJzZU9uZUFkZHJlc3Mob3B0aW9ucy51c2VyKTtcbiAgICAgIGlmICghcGFydHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb3VsZCBub3QgcGFyc2UgbmFtZSBhbmQgZW1haWwgZnJvbSB1c2VyIG9wdGlvbiBcIiR7b3B0aW9ucy51c2VyfVwiIGAgK1xuICAgICAgICAgICAgJyhmb3JtYXQgc2hvdWxkIGJlIFwiWW91ciBOYW1lIDxlbWFpbEBleGFtcGxlLmNvbT5cIiknLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdXNlciA9IHtuYW1lOiBwYXJ0cy5uYW1lLCBlbWFpbDogcGFydHMuYWRkcmVzc307XG4gICAgfVxuICAgIGxldCBiZWZvcmVBZGQ7XG4gICAgaWYgKG9wdGlvbnMuYmVmb3JlQWRkKSB7XG4gICAgICBjb25zdCBtID0gcmVxdWlyZShcbiAgICAgICAgcmVxdWlyZS5yZXNvbHZlKG9wdGlvbnMuYmVmb3JlQWRkLCB7XG4gICAgICAgICAgcGF0aHM6IFtwcm9jZXNzLmN3ZCgpXSxcbiAgICAgICAgfSksXG4gICAgICApO1xuXG4gICAgICBpZiAodHlwZW9mIG0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYmVmb3JlQWRkID0gbTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG0gPT09ICdvYmplY3QnICYmIHR5cGVvZiBtLmRlZmF1bHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYmVmb3JlQWRkID0gbS5kZWZhdWx0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb3VsZCBub3QgZmluZCBmdW5jdGlvbiB0byBleGVjdXRlIGJlZm9yZSBhZGRpbmcgZmlsZXMgaW4gYCArXG4gICAgICAgICAgICBgXCIke29wdGlvbnMuYmVmb3JlQWRkfVwiLlxcbiBgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIHJlcG86IG9wdGlvbnMucmVwbyxcbiAgICAgIHNpbGVudDogISFvcHRpb25zLnNpbGVudCxcbiAgICAgIGJyYW5jaDogb3B0aW9ucy5icmFuY2gsXG4gICAgICBzcmM6IG9wdGlvbnMuc3JjLFxuICAgICAgZGVzdDogb3B0aW9ucy5kZXN0LFxuICAgICAgbWVzc2FnZTogb3B0aW9ucy5tZXNzYWdlLFxuICAgICAgdGFnOiBvcHRpb25zLnRhZyxcbiAgICAgIGdpdDogb3B0aW9ucy5naXQsXG4gICAgICBkZXB0aDogb3B0aW9ucy5kZXB0aCxcbiAgICAgIGRvdGZpbGVzOiAhIW9wdGlvbnMuZG90ZmlsZXMsXG4gICAgICBub2pla3lsbDogISFvcHRpb25zLm5vamVreWxsLFxuICAgICAgY25hbWU6IG9wdGlvbnMuY25hbWUsXG4gICAgICBhZGQ6ICEhb3B0aW9ucy5hZGQsXG4gICAgICByZW1vdmU6IG9wdGlvbnMucmVtb3ZlLFxuICAgICAgcmVtb3RlOiBvcHRpb25zLnJlbW90ZSxcbiAgICAgIHB1c2g6ICEhb3B0aW9ucy5wdXNoLFxuICAgICAgaGlzdG9yeTogISFvcHRpb25zLmhpc3RvcnksXG4gICAgICB1c2VyOiB1c2VyLFxuICAgICAgYmVmb3JlQWRkOiBiZWZvcmVBZGQsXG4gICAgfTtcblxuICAgIHJldHVybiBwdWJsaXNoKG9wdGlvbnMuZGlzdCwgY29uZmlnKTtcbiAgfSk7XG59XG5cbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBtYWluKHByb2Nlc3MuYXJndilcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZSgnUHVibGlzaGVkXFxuJyk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgcHJvY2Vzcy5zdGRlcnIud3JpdGUoYCR7ZXJyLnN0YWNrfVxcbmAsICgpID0+IHByb2Nlc3MuZXhpdCgxKSk7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFpbjtcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cztcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2xpbGNvbmZpZy9zcmMvaW5kZXguanNcbi8vIEB0cy1jaGVja1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuXG5jb25zdCBmc1JlYWRGaWxlQXN5bmMgPSBmcy5wcm9taXNlcy5yZWFkRmlsZTtcblxuLyoqIEB0eXBlIHsobmFtZTogc3RyaW5nLCBzeW5jOiBib29sZWFuKSA9PiBzdHJpbmdbXX0gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRTZWFyY2hQbGFjZXMobmFtZSwgc3luYykge1xuXHRyZXR1cm4gW1xuXHRcdCdwYWNrYWdlLmpzb24nLFxuXHRcdGAuJHtuYW1lfXJjLmpzb25gLFxuXHRcdGAuJHtuYW1lfXJjLmpzYCxcblx0XHRgLiR7bmFtZX1yYy5janNgLFxuXHRcdC4uLihzeW5jID8gW10gOiBbYC4ke25hbWV9cmMubWpzYF0pLFxuXHRcdGAuY29uZmlnLyR7bmFtZX1yY2AsXG5cdFx0YC5jb25maWcvJHtuYW1lfXJjLmpzb25gLFxuXHRcdGAuY29uZmlnLyR7bmFtZX1yYy5qc2AsXG5cdFx0YC5jb25maWcvJHtuYW1lfXJjLmNqc2AsXG5cdFx0Li4uKHN5bmMgPyBbXSA6IFtgLmNvbmZpZy8ke25hbWV9cmMubWpzYF0pLFxuXHRcdGAke25hbWV9LmNvbmZpZy5qc2AsXG5cdFx0YCR7bmFtZX0uY29uZmlnLmNqc2AsXG5cdFx0Li4uKHN5bmMgPyBbXSA6IFtgJHtuYW1lfS5jb25maWcubWpzYF0pLFxuXHRdO1xufVxuLi4uXG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2luZGV4JykubGlsY29uZmlnfSAqL1xubW9kdWxlLmV4cG9ydHMubGlsY29uZmlnID0gZnVuY3Rpb24gbGlsY29uZmlnKG5hbWUsIG9wdGlvbnMpIHtcblx0Y29uc3Qge1xuXHRcdGlnbm9yZUVtcHR5U2VhcmNoUGxhY2VzLFxuXHRcdGxvYWRlcnMsXG5cdFx0cGFja2FnZVByb3AsXG5cdFx0c2VhcmNoUGxhY2VzLFxuXHRcdHN0b3BEaXIsXG5cdFx0dHJhbnNmb3JtLFxuXHRcdGNhY2hlLFxuXHR9ID0gZ2V0T3B0aW9ucyhuYW1lLCBvcHRpb25zID8/IHt9LCBmYWxzZSk7XG5cdGNvbnN0IHNlYXJjaENhY2hlID0gbmV3IE1hcCgpO1xuXHRjb25zdCBsb2FkQ2FjaGUgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IGVtcGxhY2UgPSBtYWtlRW1wbGFjZShjYWNoZSk7XG5cblx0cmV0dXJuIHtcblx0XHRhc3luYyBzZWFyY2goc2VhcmNoRnJvbSA9IHByb2Nlc3MuY3dkKCkpIHtcblx0XHRcdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2luZGV4JykuTGlsY29uZmlnUmVzdWx0fSAqL1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0ge1xuXHRcdFx0XHRjb25maWc6IG51bGwsXG5cdFx0XHRcdGZpbGVwYXRoOiAnJyxcblx0XHRcdH07XG5cblx0XHRcdC8qKiBAdHlwZSB7U2V0PHN0cmluZz59ICovXG5cdFx0XHRjb25zdCB2aXNpdGVkID0gbmV3IFNldCgpO1xuXHRcdFx0bGV0IGRpciA9IHNlYXJjaEZyb207XG5cdFx0XHRkaXJMb29wOiB3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRpZiAoY2FjaGUpIHtcblx0XHRcdFx0XHRjb25zdCByID0gc2VhcmNoQ2FjaGUuZ2V0KGRpcik7XG5cdFx0XHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCBwIG9mIHZpc2l0ZWQpIHNlYXJjaENhY2hlLnNldChwLCByKTtcblx0XHRcdFx0XHRcdHJldHVybiByO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2aXNpdGVkLmFkZChkaXIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yIChjb25zdCBzZWFyY2hQbGFjZSBvZiBzZWFyY2hQbGFjZXMpIHtcblx0XHRcdFx0XHRjb25zdCBmaWxlcGF0aCA9IHBhdGguam9pbihkaXIsIHNlYXJjaFBsYWNlKTtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0YXdhaXQgZnMucHJvbWlzZXMuYWNjZXNzKGZpbGVwYXRoKTtcblx0XHRcdFx0XHR9IGNhdGNoIHtcblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb25zdCBjb250ZW50ID0gU3RyaW5nKGF3YWl0IGZzUmVhZEZpbGVBc3luYyhmaWxlcGF0aCkpO1xuXHRcdFx0XHRcdGNvbnN0IGxvYWRlcktleSA9IHBhdGguZXh0bmFtZShzZWFyY2hQbGFjZSkgfHwgJ25vRXh0Jztcblx0XHRcdFx0XHRjb25zdCBsb2FkZXIgPSBsb2FkZXJzW2xvYWRlcktleV07XG5cblx0XHRcdFx0XHQvLyBoYW5kbGUgcGFja2FnZS5qc29uXG5cdFx0XHRcdFx0aWYgKHNlYXJjaFBsYWNlID09PSAncGFja2FnZS5qc29uJykge1xuXHRcdFx0XHRcdFx0Y29uc3QgcGtnID0gYXdhaXQgbG9hZGVyKGZpbGVwYXRoLCBjb250ZW50KTtcblx0XHRcdFx0XHRcdGNvbnN0IG1heWJlQ29uZmlnID0gZ2V0UGFja2FnZVByb3AocGFja2FnZVByb3AsIHBrZyk7XG5cdFx0XHRcdFx0XHRpZiAobWF5YmVDb25maWcgIT0gbnVsbCkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHQuY29uZmlnID0gbWF5YmVDb25maWc7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5maWxlcGF0aCA9IGZpbGVwYXRoO1xuXHRcdFx0XHRcdFx0XHRicmVhayBkaXJMb29wO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG4uLi5cblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vaW5kZXgnKS5saWxjb25maWdTeW5jfSAqL1xubW9kdWxlLmV4cG9ydHMubGlsY29uZmlnU3luYyA9IGZ1bmN0aW9uIGxpbGNvbmZpZ1N5bmMobmFtZSwgb3B0aW9ucykge1xuXHRjb25zdCB7XG5cdFx0aWdub3JlRW1wdHlTZWFyY2hQbGFjZXMsXG5cdFx0bG9hZGVycyxcblx0XHRwYWNrYWdlUHJvcCxcblx0XHRzZWFyY2hQbGFjZXMsXG5cdFx0c3RvcERpcixcblx0XHR0cmFuc2Zvcm0sXG5cdFx0Y2FjaGUsXG5cdH0gPSBnZXRPcHRpb25zKG5hbWUsIG9wdGlvbnMgPz8ge30sIHRydWUpO1xuXHRjb25zdCBzZWFyY2hDYWNoZSA9IG5ldyBNYXAoKTtcblx0Y29uc3QgbG9hZENhY2hlID0gbmV3IE1hcCgpO1xuXHRjb25zdCBlbXBsYWNlID0gbWFrZUVtcGxhY2UoY2FjaGUpO1xuXG5cdHJldHVybiB7XG5cdFx0c2VhcmNoKHNlYXJjaEZyb20gPSBwcm9jZXNzLmN3ZCgpKSB7XG5cdFx0XHQvKiogQHR5cGUge2ltcG9ydCgnLi9pbmRleCcpLkxpbGNvbmZpZ1Jlc3VsdH0gKi9cblx0XHRcdGNvbnN0IHJlc3VsdCA9IHtcblx0XHRcdFx0Y29uZmlnOiBudWxsLFxuXHRcdFx0XHRmaWxlcGF0aDogJycsXG5cdFx0XHR9O1xuXG5cdFx0XHQvKiogQHR5cGUge1NldDxzdHJpbmc+fSAqL1xuXHRcdFx0Y29uc3QgdmlzaXRlZCA9IG5ldyBTZXQoKTtcblx0XHRcdGxldCBkaXIgPSBzZWFyY2hGcm9tO1xuXHRcdFx0ZGlyTG9vcDogd2hpbGUgKHRydWUpIHtcblx0XHRcdFx0aWYgKGNhY2hlKSB7XG5cdFx0XHRcdFx0Y29uc3QgciA9IHNlYXJjaENhY2hlLmdldChkaXIpO1xuXHRcdFx0XHRcdGlmIChyICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGZvciAoY29uc3QgcCBvZiB2aXNpdGVkKSBzZWFyY2hDYWNoZS5zZXQocCwgcik7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmlzaXRlZC5hZGQoZGlyKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGZvciAoY29uc3Qgc2VhcmNoUGxhY2Ugb2Ygc2VhcmNoUGxhY2VzKSB7XG5cdFx0XHRcdFx0Y29uc3QgZmlsZXBhdGggPSBwYXRoLmpvaW4oZGlyLCBzZWFyY2hQbGFjZSk7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdGZzLmFjY2Vzc1N5bmMoZmlsZXBhdGgpO1xuXHRcdFx0XHRcdH0gY2F0Y2gge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbnN0IGxvYWRlcktleSA9IHBhdGguZXh0bmFtZShzZWFyY2hQbGFjZSkgfHwgJ25vRXh0Jztcblx0XHRcdFx0XHRjb25zdCBsb2FkZXIgPSBsb2FkZXJzW2xvYWRlcktleV07XG5cdFx0XHRcdFx0Y29uc3QgY29udGVudCA9IFN0cmluZyhmcy5yZWFkRmlsZVN5bmMoZmlsZXBhdGgpKTtcblxuXHRcdFx0XHRcdC8vIGhhbmRsZSBwYWNrYWdlLmpzb25cblx0XHRcdFx0XHRpZiAoc2VhcmNoUGxhY2UgPT09ICdwYWNrYWdlLmpzb24nKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBwa2cgPSBsb2FkZXIoZmlsZXBhdGgsIGNvbnRlbnQpO1xuXHRcdFx0XHRcdFx0Y29uc3QgbWF5YmVDb25maWcgPSBnZXRQYWNrYWdlUHJvcChwYWNrYWdlUHJvcCwgcGtnKTtcblx0XHRcdFx0XHRcdGlmIChtYXliZUNvbmZpZyAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5jb25maWcgPSBtYXliZUNvbmZpZztcblx0XHRcdFx0XHRcdFx0cmVzdWx0LmZpbGVwYXRoID0gZmlsZXBhdGg7XG5cdFx0XHRcdFx0XHRcdGJyZWFrIGRpckxvb3A7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2Nvc21pY29uZmlnL2Rpc3QvZGVmYXVsdHMuanNcbi4uLlxuZXhwb3J0cy5nZXREZWZhdWx0U2VhcmNoUGxhY2VzU3luYyA9IGdldERlZmF1bHRTZWFyY2hQbGFjZXNTeW5jO1xuZXhwb3J0cy5nbG9iYWxDb25maWdTZWFyY2hQbGFjZXMgPSBbXG4gICAgJ2NvbmZpZycsXG4gICAgJ2NvbmZpZy5qc29uJyxcbiAgICAnY29uZmlnLnlhbWwnLFxuICAgICdjb25maWcueW1sJyxcbiAgICAnY29uZmlnLmpzJyxcbiAgICAnY29uZmlnLnRzJyxcbiAgICAnY29uZmlnLmNqcycsXG4gICAgJ2NvbmZpZy5tanMnLFxuXTtcbmV4cG9ydHMuZ2xvYmFsQ29uZmlnU2VhcmNoUGxhY2VzU3luYyA9IFtcbiAgICAnY29uZmlnJyxcbiAgICAnY29uZmlnLmpzb24nLFxuICAgICdjb25maWcueWFtbCcsXG4gICAgJ2NvbmZpZy55bWwnLFxuICAgICdjb25maWcuanMnLFxuICAgICdjb25maWcudHMnLFxuICAgICdjb25maWcuY2pzJyxcbl07XG4vLyB0aGlzIG5lZWRzIHRvIGJlIGhhcmRjb2RlZCwgYXMgdGhpcyBpcyBpbnRlbmRlZCBmb3IgZW5kIHVzZXJzLCB3aG8gY2FuJ3Qgc3VwcGx5IG9wdGlvbnMgYXQgdGhpcyBwb2ludFxuZXhwb3J0cy5tZXRhU2VhcmNoUGxhY2VzID0gW1xuICAgICdwYWNrYWdlLmpzb24nLFxuICAgICdwYWNrYWdlLnlhbWwnLFxuICAgICcuY29uZmlnL2NvbmZpZy5qc29uJyxcbiAgICAnLmNvbmZpZy9jb25maWcueWFtbCcsXG4gICAgJy5jb25maWcvY29uZmlnLnltbCcsXG4gICAgJy5jb25maWcvY29uZmlnLmpzJyxcbiAgICAnLmNvbmZpZy9jb25maWcudHMnLFxuICAgICcuY29uZmlnL2NvbmZpZy5janMnLFxuICAgICcuY29uZmlnL2NvbmZpZy5tanMnLFxuXTtcbi4uLlxuUGF0aDogcGFja2FnZS5qc29uXG57XG4gIFwibmFtZVwiOiBcInZpdGVfcmVhY3Rfc2hhZGNuX3RzXCIsXG4gIFwicHJpdmF0ZVwiOiB0cnVlLFxuICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICBcImJ1aWxkXCI6IFwidml0ZSBidWlsZFwiLFxuICAgIFwiYnVpbGQ6ZGV2XCI6IFwidml0ZSBidWlsZCAtLW1vZGUgZGV2ZWxvcG1lbnRcIixcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLlwiLFxuICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBob29rZm9ybS9yZXNvbHZlcnNcIjogXCJeMy45LjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1hY2NvcmRpb25cIjogXCJeMS4yLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1hbGVydC1kaWFsb2dcIjogXCJeMS4xLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1hc3BlY3QtcmF0aW9cIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1hdmF0YXJcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1jaGVja2JveFwiOiBcIl4xLjEuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWNvbGxhcHNpYmxlXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtY29udGV4dC1tZW51XCI6IFwiXjIuMi4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtZGlhbG9nXCI6IFwiXjEuMS4yXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtZHJvcGRvd24tbWVudVwiOiBcIl4yLjEuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWhvdmVyLWNhcmRcIjogXCJeMS4xLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1sYWJlbFwiOiBcIl4yLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LW1lbnViYXJcIjogXCJeMS4xLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1uYXZpZ2F0aW9uLW1lbnVcIjogXCJeMS4yLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1wb3BvdmVyXCI6IFwiXjEuMS4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtcHJvZ3Jlc3NcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1yYWRpby1ncm91cFwiOiBcIl4xLjIuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNjcm9sbC1hcmVhXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2VsZWN0XCI6IFwiXjIuMS4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2VwYXJhdG9yXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2xpZGVyXCI6IFwiXjEuMi4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2xvdFwiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXN3aXRjaFwiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRhYnNcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC10b2FzdFwiOiBcIl4xLjIuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvZ2dsZVwiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvZ2dsZS1ncm91cFwiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvb2x0aXBcIjogXCJeMS4xLjRcIixcbiAgICBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiOiBcIl41LjU2LjJcIixcbiAgICBcImNsYXNzLXZhcmlhbmNlLWF1dGhvcml0eVwiOiBcIl4wLjcuMVwiLFxuICAgIFwiY2xzeFwiOiBcIl4yLjEuMVwiLFxuICAgIFwiY21ka1wiOiBcIl4xLjAuMFwiLFxuICAgIFwiZGF0ZS1mbnNcIjogXCJeMy42LjBcIixcbiAgICBcImVtYmxhLWNhcm91c2VsLXJlYWN0XCI6IFwiXjguMy4wXCIsXG4gICAgXCJpbnB1dC1vdHBcIjogXCJeMS4yLjRcIixcbiAgICBcImx1Y2lkZS1yZWFjdFwiOiBcIl4wLjQ2Mi4wXCIsXG4gICAgXCJuZXh0LXRoZW1lc1wiOiBcIl4wLjMuMFwiLFxuICAgIFwicmVhY3RcIjogXCJeMTguMy4xXCIsXG4gICAgXCJyZWFjdC1kYXktcGlja2VyXCI6IFwiXjguMTAuMVwiLFxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjMuMVwiLFxuICAgIFwicmVhY3QtaG9vay1mb3JtXCI6IFwiXjcuNTMuMFwiLFxuICAgIFwicmVhY3QtcmVzaXphYmxlLXBhbmVsc1wiOiBcIl4yLjEuM1wiLFxuICAgIFwicmVhY3Qtcm91dGVyLWRvbVwiOiBcIl42LjI2LjJcIixcbiAgICBcInJlY2hhcnRzXCI6IFwiXjIuMTIuN1wiLFxuICAgIFwic29ubmVyXCI6IFwiXjEuNS4wXCIsXG4gICAgXCJ0YWlsd2luZC1tZXJnZVwiOiBcIl4yLjUuMlwiLFxuICAgIFwidGFpbHdpbmRjc3MtYW5pbWF0ZVwiOiBcIl4xLjAuN1wiLFxuICAgIFwidmF1bFwiOiBcIl4wLjkuM1wiLFxuICAgIFwiem9kXCI6IFwiXjMuMjMuOFwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBlc2xpbnQvanNcIjogXCJeOS45LjBcIixcbiAgICBcIkB0YWlsd2luZGNzcy90eXBvZ3JhcGh5XCI6IFwiXjAuNS4xNVwiLFxuICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjIuNS41XCIsXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMy4zXCIsXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjMuMFwiLFxuICAgIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3Qtc3djXCI6IFwiXjMuNS4wXCIsXG4gICAgXCJhdXRvcHJlZml4ZXJcIjogXCJeMTAuNC4yMFwiLFxuICAgIFwiZXNsaW50XCI6IFwiXjkuOS4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjUuMS4wLXJjLjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtcmVmcmVzaFwiOiBcIl4wLjQuOVwiLFxuICAgIFwiZ2gtcGFnZXNcIjogXCJeNi4zLjBcIixcbiAgICBcImdsb2JhbHNcIjogXCJeMTUuOS4wXCIsXG4gICAgXCJwb3N0Y3NzXCI6IFwiXjguNC40N1wiLFxuICAgIFwidGFpbHdpbmRjc3NcIjogXCJeMy40LjExXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuNS4zXCIsXG4gICAgXCJ0eXBlc2NyaXB0LWVzbGludFwiOiBcIl44LjAuMVwiLFxuICAgIFwidml0ZVwiOiBcIl41LjQuMVwiXG4gIH1cbn1cbi4uLlxuUGF0aDogZGlzdC8ubm9qZWt5bGxcblxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvZmFzdHEvLmdpdGh1Yi93b3JrZmxvd3MvY2kueW1sXG5uYW1lOiBjaVxuXG5vbjogW3B1c2gsIHB1bGxfcmVxdWVzdF1cblxuam9iczpcbiAgbGVnYWN5OlxuICAgIHJ1bnMtb246IHVidW50dS1sYXRlc3RcblxuICAgIHN0cmF0ZWd5OlxuICAgICAgbWF0cml4OlxuICAgICAgICBub2RlLXZlcnNpb246IFsnMC4xMCcsICcwLjEyJywgNC54LCA2LngsIDgueF1cblxuICAgIHN0ZXBzOlxuICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHYzXG4gICAgICAgIHdpdGg6XG4gICAgICAgICAgcGVyc2lzdC1jcmVkZW50aWFsczogZmFsc2VcblxuICAgICAgLSBuYW1lOiBVc2UgTm9kZS5qc1xuICAgICAgICB1c2VzOiBhY3Rpb25zL3NldHVwLW5vZGVAdjFcbiAgICAgICAgd2l0aDpcbiAgICAgICAgICBub2RlLXZlcnNpb246ICR7eyBtYXRyaXgubm9kZS12ZXJzaW9uIH19XG5cbiAgICAgIC0gbmFtZTogSW5zdGFsbFxuICAgICAgICBydW46IHxcbiAgICAgICAgICBucG0gaW5zdGFsbCAtLXByb2R1Y3Rpb24gJiYgbnBtIGluc3RhbGwgdGFwZVxuXG4gICAgICAtIG5hbWU6IFJ1biB0ZXN0c1xuICAgICAgICBydW46IHxcbiAgICAgICAgICBucG0gcnVuIGxlZ2FjeVxuXG4gIHRlc3Q6XG4gICAgcnVucy1vbjogdWJ1bnR1LWxhdGVzdFxuXG4gICAgc3RyYXRlZ3k6XG4gICAgICBtYXRyaXg6XG4gICAgICAgIG5vZGUtdmVyc2lvbjogWzEwLngsIDEyLngsIDEzLngsIDE0LngsIDE1LngsIDE2LngsIDE4LngsIDIwLnhdXG5cbiAgICBzdGVwczpcbiAgICAgIC0gdXNlczogYWN0aW9ucy9jaGVja291dEB2M1xuICAgICAgICB3aXRoOlxuICAgICAgICAgIHBlcnNpc3QtY3JlZGVudGlhbHM6IGZhbHNlXG5cbiAgICAgIC0gbmFtZTogVXNlIE5vZGUuanNcbiAgICAgICAgdXNlczogYWN0aW9ucy9zZXR1cC1ub2RlQHYzXG4gICAgICAgIHdpdGg6XG4gICAgICAgICAgbm9kZS12ZXJzaW9uOiAke3sgbWF0cml4Lm5vZGUtdmVyc2lvbiB9fVxuXG4gICAgICAtIG5hbWU6IEluc3RhbGxcbiAgICAgICAgcnVuOiB8XG4gICAgICAgICAgbnBtIGluc3RhbGxcblxuICAgICAgLSBuYW1lOiBSdW4gdGVzdHNcbiAgICAgICAgcnVuOiB8XG4gICAgICAgICAgbnBtIHJ1biB0ZXN0XG5cbiAgdHlwZXM6XG4gICAgcnVucy1vbjogdWJ1bnR1LWxhdGVzdFxuXG4gICAgc3RlcHM6XG4gICAgICAtIHVzZXM6IGFjdGlvbnMvY2hlY2tvdXRAdjNcbiAgICAgICAgd2l0aDpcbiAgICAgICAgICBwZXJzaXN0LWNyZWRlbnRpYWxzOiBmYWxzZVxuXG4gICAgICAtIG5hbWU6IFVzZSBOb2RlLmpzXG4gICAgICAgIHVzZXM6IGFjdGlvbnMvc2V0dXAtbm9kZUB2M1xuICAgICAgICB3aXRoOlxuICAgICAgICAgIG5vZGUtdmVyc2lvbjogMTZcblxuICAgICAgLSBuYW1lOiBJbnN0YWxsXG4gICAgICAgIHJ1bjogfFxuICAgICAgICAgIG5wbSBpbnN0YWxsXG5cbiAgICAgIC0gbmFtZTogUnVuIHR5cGVzIHRlc3RzXG4gICAgICAgIHJ1bjogfFxuICAgICAgICAgIG5wbSBydW4gdHlwZXNjcmlwdFxuLi4uXG5QYXRoOiBwdWJsaWMvLm5vamVreWxsXG5cbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2FzdC10eXBlcy8uZ2l0aHViL3dvcmtmbG93cy9tYWluLnltbFxubmFtZTogQ0lcblxub246XG4gIHB1c2g6XG4gICAgYnJhbmNoZXM6IFsgbWFzdGVyIF1cbiAgcHVsbF9yZXF1ZXN0OlxuICAgIGJyYW5jaGVzOiBbIG1hc3RlciBdXG5cbmpvYnM6XG4gIHRlc3Q6XG4gICAgbmFtZTogVGVzdCBvbiBub2RlICR7eyBtYXRyaXgubm9kZV92ZXJzaW9uIH19IGFuZCAke3sgbWF0cml4Lm9zIH19XG4gICAgcnVucy1vbjogJHt7IG1hdHJpeC5vcyB9fVxuICAgIHN0cmF0ZWd5OlxuICAgICAgbWF0cml4OlxuICAgICAgICBub2RlX3ZlcnNpb246IFsnMTAnLCAnMTInLCAnMTQnXVxuICAgICAgICBvczogW3VidW50dS1sYXRlc3RdXG5cbiAgICBzdGVwczpcbiAgICAtIHVzZXM6IGFjdGlvbnMvY2hlY2tvdXRAdjJcbiAgICAtIG5hbWU6IFVzZSBOb2RlLmpzICR7eyBtYXRyaXgubm9kZV92ZXJzaW9uIH19XG4gICAgICB1c2VzOiBhY3Rpb25zL3NldHVwLW5vZGVAdjFcbiAgICAgIHdpdGg6XG4gICAgICAgIG5vZGUtdmVyc2lvbjogJHt7IG1hdHJpeC5ub2RlX3ZlcnNpb24gfX1cblxuICAgIC0gbmFtZTogbnBtIGluc3RhbGwsIGJ1aWxkIGFuZCB0ZXN0XG4gICAgICBydW46IHxcbiAgICAgICAgbnBtIGluc3RhbGxcbiAgICAgICAgbnBtIHJ1biBidWlsZCAtLWlmLXByZXNlbnRcbiAgICAgICAgbnBtIHRlc3Rcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2Zhc3QtZXF1YWxzLy5yZWxlYXNlLWl0Lmpzb25cbntcbiAgXCJnaXRodWJcIjoge1xuICAgIFwicmVsZWFzZVwiOiB0cnVlLFxuICAgIFwidGFnTmFtZVwiOiBcInYke3ZlcnNpb259XCJcbiAgfSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImJlZm9yZVN0YXJ0XCI6IFwibnBtIHJ1biBwcmVwdWJsaXNoOmNvbXBpbGVcIlxuICB9XG59XG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9wcm94eS1mcm9tLWVudi8udHJhdmlzLnltbFxubGFuZ3VhZ2U6IG5vZGVfanNcbm5vZGVfanM6XG4gIC0gbm9kZVxuICAtIGx0cy8qXG5zY3JpcHQ6XG4gIC0gbnBtIHJ1biBsaW50XG4gICMgdGVzdC1jb3ZlcmFnZSB3aWxsIGFsc28gcnVuIHRoZSB0ZXN0cywgYnV0IGRvZXMgbm90IHByaW50IGhlbHBmdWwgb3V0cHV0IHVwb24gdGVzdCBmYWlsdXJlLlxuICAjIFNvIHdlIGFsc28gcnVuIHRoZSB0ZXN0cyBzZXBhcmF0ZWx5LlxuICAtIG5wbSBydW4gdGVzdFxuICAtIG5wbSBydW4gdGVzdC1jb3ZlcmFnZSAmJiBjYXQgY292ZXJhZ2UvbGNvdi5pbmZvIHwgLi9ub2RlX21vZHVsZXMvLmJpbi9jb3ZlcmFsbHMgJiYgcm0gLXJmIGNvdmVyYWdlXG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy8uYmluL2doLXBhZ2VzLWNsZWFuXG4jIS91c3IvYmluL2VudiBub2RlXG5cbmNvbnN0IGdocGFnZXMgPSByZXF1aXJlKCcuLi9saWIvaW5kZXguanMnKTtcblxuZnVuY3Rpb24gbWFpbigpIHtcbiAgZ2hwYWdlcy5jbGVhbigpO1xufVxuXG5pZiAocmVxdWlyZS5tYWluID09PSBtb2R1bGUpIHtcbiAgbWFpbigpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1haW47XG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9qaXRpL3BhY2thZ2UuanNvblxuLi4uXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJidWlsZFwiOiBcInBucG0gY2xlYW4gJiYgTk9ERV9FTlY9cHJvZHVjdGlvbiBwbnBtIHdlYnBhY2tcIixcbiAgICBcImNsZWFuXCI6IFwicm0gLXJmIGRpc3RcIixcbiAgICBcImRldlwiOiBcInBucG0gY2xlYW4gJiYgcG5wbSB3ZWJwYWNrIC0td2F0Y2hcIixcbiAgICBcImppdGlcIjogXCJKSVRJX0RFQlVHPTEgSklUSV9DQUNIRT1mYWxzZSBKSVRJX1JFUVVJUkVfQ0FDSEU9ZmFsc2UgLi9iaW4vaml0aS5qc1wiLFxuICAgIFwiaml0aTpsZWdhY3lcIjogXCJKSVRJX0RFQlVHPTEgbnB4IG5vZGVAMTIgLi9iaW4vaml0aS5qc1wiLFxuICAgIFwibGludFwiOiBcImVzbGludCAuICYmIHByZXR0aWVyIC1jIHNyYyBsaWIgdGVzdCBzdHVic1wiLFxuICAgIFwibGludDpmaXhcIjogXCJlc2xpbnQgLS1maXggLiAmJiBwcmV0dGllciAtdyBzcmMgbGliIHRlc3Qgc3R1YnNcIixcbiAgICBcInJlbGVhc2VcIjogXCJwbnBtIGJ1aWxkICYmIHBucG0gdGVzdCAmJiBjaGFuZ2Vsb2dlbiAtLXJlbGVhc2UgLS1wdXNoICYmIG5wbSBwdWJsaXNoXCIsXG4gICAgXCJ0ZXN0XCI6IFwicG5wbSBsaW50ICYmIHZpdGVzdCBydW4gLS1jb3ZlcmFnZSAmJiBwbnBtIHRlc3Q6YnVuXCIsXG4gICAgXCJ0ZXN0OmJ1blwiOiBcImJ1biAtLWJ1biB0ZXN0IHRlc3QvYnVuXCJcbiAgfSxcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2lzLWNvcmUtbW9kdWxlLy5ueWNyY1xue1xuXHRcImFsbFwiOiB0cnVlLFxuXHRcImNoZWNrLWNvdmVyYWdlXCI6IGZhbHNlLFxuXHRcInJlcG9ydGVyXCI6IFtcInRleHQtc3VtbWFyeVwiLCBcInRleHRcIiwgXCJodG1sXCIsIFwianNvblwiXSxcblx0XCJleGNsdWRlXCI6IFtcblx0XHRcImNvdmVyYWdlXCIsXG5cdFx0XCJ0ZXN0XCJcblx0XVxufVxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvZmFzdC1lcXVhbHMvLnJlbGVhc2UtaXQuYmV0YS5qc29uXG57XG4gIFwiZ2l0aHViXCI6IHtcbiAgICBcInJlbGVhc2VcIjogdHJ1ZSxcbiAgICBcInRhZ05hbWVcIjogXCJ2JHt2ZXJzaW9ufVwiXG4gIH0sXG4gIFwibnBtXCI6IHtcbiAgICBcInRhZ1wiOiBcIm5leHRcIlxuICB9LFxuICBcInByZVJlbGVhc2VJZFwiOiBcImJldGFcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImJlZm9yZVN0YXJ0XCI6IFwibnBtIHJ1biBwcmVwdWJsaXNoOmNvbXBpbGVcIlxuICB9XG59XG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9mZC1zbGljZXIvLnRyYXZpcy55bWxcbmxhbmd1YWdlOiBub2RlX2pzXG5ub2RlX2pzOlxuICAtIFwiMC4xMFwiXG5zY3JpcHQ6XG4gIC0gXCJucG0gcnVuIHRlc3QtdHJhdmlzXCJcbmFmdGVyX3NjcmlwdDpcbiAgLSBcIm5wbSBpbnN0YWxsIGNvdmVyYWxsc0AyICYmIGNhdCAuL2NvdmVyYWdlL2xjb3YuaW5mbyB8IC4vbm9kZV9tb2R1bGVzLy5iaW4vY292ZXJhbGxzXCJcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2dyYXBoZW1lci9wYWNrYWdlLmpzb25cbi4uLlxuICBcInNjcmlwdHNcIjoge1xuICAgIFwicHJlcHVibGlzaE9ubHlcIjogXCJucG0gcnVuIGJ1aWxkXCIsXG4gICAgXCJidWlsZFwiOiBcInRzYyAtLXByb2plY3QgdHNjb25maWcuanNvblwiLFxuICAgIFwicHJldGVzdFwiOiBcIm5wbSBydW4gYnVpbGRcIixcbiAgICBcInRlc3RcIjogXCJ0cy1ub2RlIG5vZGVfbW9kdWxlcy90YXBlL2Jpbi90YXBlIHRlc3RzLyoqLnRzXCIsXG4gICAgXCJwcmV0dGllcjpjaGVja1wiOiBcInByZXR0aWVyIC0tY2hlY2sgLlwiLFxuICAgIFwicHJldHRpZXI6Zml4XCI6IFwicHJldHRpZXIgLS13cml0ZSAuXCJcbiAgfSxcbiAgXCJyZXBvc2l0b3J5XCI6IHtcbiAgICBcInR5cGVcIjogXCJnaXRcIixcbiAgICBcInVybFwiOiBcImh0dHBzOi8vZ2l0aHViLmNvbS9mbG1udC9ncmFwaGVtZXIuZ2l0XCJcbiAgfSxcbiAgXCJidWdzXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2ZsbW50L2dyYXBoZW1lci9pc3N1ZXNcIixcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHR5cGVzL3RhcGVcIjogXCJeNC4xMy4wXCIsXG4gICAgXCJodXNreVwiOiBcIl40LjMuMFwiLFxuICAgIFwibGludC1zdGFnZWRcIjogXCJeMTAuMy4wXCIsXG4gICAgXCJwcmV0dGllclwiOiBcIl4yLjEuMVwiLFxuICAgIFwidGFwZVwiOiBcIl40LjYuM1wiLFxuICAgIFwidHMtbm9kZVwiOiBcIl45LjAuMFwiLFxuICAgIFwidHlwZXNjcmlwdFwiOiBcIl40LjAuMlwiXG4gIH0sXG4gIFwiaHVza3lcIjoge1xuICAgIFwiaG9va3NcIjoge1xuICAgICAgXCJwcmUtY29tbWl0XCI6IFwibGludC1zdGFnZWRcIixcbiAgICAgIFwicHJlLXB1c2hcIjogXCJucG0gdGVzdFwiXG4gICAgfVxuICB9LFxuICBcImxpbnQtc3RhZ2VkXCI6IHtcbiAgICBcIioue2pzLHRzLG1kLGpzb259XCI6IFwicHJldHRpZXIgLS13cml0ZVwiXG4gIH1cbn1cbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2Fqdi9zY3JpcHRzL3B1Ymxpc2gtYnVpbHQtdmVyc2lvblxuLi4uXG5cbmlmIFtbIC1uICRUUkFWSVNfVEFHICYmICRUUkFWSVNfSk9CX05VTUJFUiA9fiBcIi4zXCIgXV07IHRoZW5cbiAgZWNobyBcIkFib3V0IHRvIHB1Ymxpc2ggJFRSQVZJU19UQUcgdG8gYWp2LWRpc3QuLi5cIlxuXG4gIGdpdCBjb25maWcgdXNlci5lbWFpbCBcIiRHSVRfVVNFUl9FTUFJTFwiXG4gIGdpdCBjb25maWcgdXNlci5uYW1lIFwiJEdJVF9VU0VSX05BTUVcIlxuXG4gIGdpdCBjbG9uZSBodHRwczovLyR7R0lUSFVCX1RPS0VOfUBnaXRodWIuY29tL2Fqdi12YWxpZGF0b3IvYWp2LWRpc3QuZ2l0IC4uL2Fqdi1kaXN0XG5cbiAgcm0gLXJmIC4uL2Fqdi1kaXN0L2Rpc3RcbiAgbWtkaXIgLi4vYWp2LWRpc3QvZGlzdFxuICBjcCAuL2Rpc3QvYWp2LiogLi4vYWp2LWRpc3QvZGlzdFxuICBjYXQgYm93ZXIuanNvbiB8IHNlZCAncy9cIm5hbWVcIjogXCJhanZcIi9cIm5hbWVcIjogXCJhanYtZGlzdFwiLycgPiAuLi9hanYtZGlzdC9ib3dlci5qc29uXG4gIGNkIC4uL2Fqdi1kaXN0XG5cbiAgaWYgW1sgYGdpdCBzdGF0dXMgLS1wb3JjZWxhaW5gIF1dOyB0aGVuXG4gICAgZWNobyBcIkNoYW5nZXMgZGV0ZWN0ZWQuIFVwZGF0aW5nIG1hc3RlciBicmFuY2guLi5cIlxuICAgIGdpdCBhZGQgLUFcbiAgICBnaXQgY29tbWl0IC1tIFwidXBkYXRlZCBieSB0cmF2aXMgYnVpbGQgIyRUUkFWSVNfQlVJTERfTlVNQkVSXCJcbiAgICBnaXQgcHVzaCAtLXF1aWV0IG9yaWdpbiBtYXN0ZXIgPiAvZGV2L251bGwgMj4mMVxuICBmaVxuXG4gIGVjaG8gXCJQdWJsaXNoaW5nIHRhZy4uLlwiXG5cbiAgZ2l0IHRhZyAkVFJBVklTX1RBR1xuICBnaXQgcHVzaCAtLXRhZ3MgPiAvZGV2L251bGwgMj4mMVxuXG4gIGVjaG8gXCJEb25lXCJcbmZpXG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9lc3RyYXZlcnNlL2d1bHBmaWxlLmpzXG4uLi5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ3VscCA9IHJlcXVpcmUoJ2d1bHAnKSxcbiAgICBnaXQgPSByZXF1aXJlKCdndWxwLWdpdCcpLFxuICAgIGJ1bXAgPSByZXF1aXJlKCdndWxwLWJ1bXAnKSxcbiAgICBmaWx0ZXIgPSByZXF1aXJlKCdndWxwLWZpbHRlcicpLFxuICAgIHRhZ1ZlcnNpb24gPSByZXF1aXJlKCdndWxwLXRhZy12ZXJzaW9uJyk7XG5cbnZhciBURVNUID0gWyAndGVzdC8qLmpzJyBdO1xudmFyIFBPV0VSRUQgPSBbICdwb3dlcmVkLXRlc3QvKi5qcycgXTtcbnZhciBTT1VSQ0UgPSBbICdzcmMvKiovKi5qcycgXTtcblxuLyoqXG4gKiBCdW1waW5nIHZlcnNpb24gbnVtYmVyIGFuZCB0YWdnaW5nIHRoZSByZXBvc2l0b3J5IHdpdGggaXQuXG4gKiBQbGVhc2UgcmVhZCBodHRwOi8vc2VtdmVyLm9yZy9cbiAqXG4gKiBZb3UgY2FuIHVzZSB0aGUgY29tbWFuZHNcbiAqXG4gKiAgICAgZ3VscCBwYXRjaCAgICAgIyBtYWtlcyB2MC4xLjAgLT4gdjAuMS4xXG4gKiAgICAgZ3VscCBmZWF0dXJlICAgIyBtYWtlcyB2MC4xLjEgLT4gdjAuMi4wXG4gKiAgICAgZ3VscCByZWxlYXNlICAgIyBtYWtlcyB2MC4yLjEgLT4gdjEuMC4wXG4gKlxuICogVG8gYnVtcCB0aGUgdmVyc2lvbiBudW1iZXJzIGFjY29yZGluZ2x5IGFmdGVyIHlvdSBkaWQgYSBwYXRjaCxcbiAqIGludHJvZHVjZWQgYSBmZWF0dXJlIG9yIG1hZGUgYSBiYWNrd2FyZHMtaW5jb21wYXRpYmxlIHJlbGVhc2UuXG4gKi9cbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2Zhc3QtanNvbi1zdGFibGUtc3RyaW5naWZ5Ly50cmF2aXMueW1sXG5sYW5ndWFnZTogbm9kZV9qc1xubm9kZV9qczpcbiAgLSBcIjhcIlxuICAtIFwiMTBcIlxuICAtIFwiMTJcIlxuICAtIFwiMTNcIlxuYWZ0ZXJfc2NyaXB0OlxuICAtIGNvdmVyYWxscyA8IGNvdmVyYWdlL2xjb3YuaW5mb1xuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvdGFpbHdpbmRjc3Mvc2NyaXB0cy9jcmVhdGUtcGx1Z2luLWxpc3QuanNcbmltcG9ydCB7IGNvcmVQbHVnaW5zIH0gZnJvbSAnLi4vc3JjL2NvcmVQbHVnaW5zJ1xuaW1wb3J0IGZzIGZyb20gJ2ZzJ1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCdcblxubGV0IGNvcmVQbHVnaW5MaXN0ID0gT2JqZWN0LmtleXMoY29yZVBsdWdpbnMpXG5cbmZzLndyaXRlRmlsZVN5bmMoXG4gIHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLC4uLiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTRzTDQ1ZXNXelF6UmY4QTRRalhMbWcifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjI2OjAxLjAwNloiLCJyZXNwb25zZV90ZXh0Ijoi0JTQsNCy0LDQudGC0LUg0L/RgNC+0LLQtdGA0LjQvCDRgdC+0LTQtdGA0LbQuNC80L7QtSDRhNCw0LnQu9CwIHZpdGUuY29uZmlnLnRzINC4INC/0L7RgdC80L7RgtGA0LjQvCwg0LrQsNC6INC90LDRgdGC0YDQvtC10L0g0LTQtdC/0LvQvtC5OlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjI4M2JjZjcxLTNiZmMtNDY4Ni1iZjM4LWNkY2IwMjBjMTY3NyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTFkMkNDWmFvZ3l6M01WNDk0Z2ZuZksiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwicGFja2FnZS5qc29uXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0KLQtdC/0LXRgNGMINC00LDQstCw0LnRgtC1INC/0YDQvtCy0LXRgNC40LwsINC10YHRgtGMINC70Lgg0YHQutGA0LjQv9GCINC00LvRjyDQtNC10L/Qu9C+0Y8g0L3QsCBHaXRIdWIgUGFnZXMg0LIgcGFja2FnZS5qc29uOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiB2aXRlLmNvbmZpZy50czpcbiAgICAgMVx0aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbiAgICAgMlx0aW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjtcbiAgICAgM1x0aW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbiAgICAgNFx0XG4gICAgIDVcdC8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG4gICAgIDZcdGV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoeyBtb2RlIH0pID0+ICh7XG4gICAgIDdcdCAgYmFzZTogJy9zaXRlLW5vdmEvJyxcbiAgICAgOFx0ICBzZXJ2ZXI6IHtcbiAgICAgOVx0ICAgIGhvc3Q6IFwiOjpcIixcbiAgICAxMFx0ICAgIHBvcnQ6IDgwODAsXG4gICAgMTFcdCAgfSxcbiAgICAxMlx0ICBwbHVnaW5zOiBbXG4gICAgMTNcdCAgICByZWFjdCgpLFxuICAgIDE0XHQgIF0sXG4gICAgMTVcdCAgcmVzb2x2ZToge1xuICAgIDE2XHQgICAgYWxpYXM6IHtcbiAgICAxN1x0ICAgICAgXCJAXCI6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi9zcmNcIiksXG4gICAgMThcdCAgICB9LFxuICAgIDE5XHQgIH0sXG4gICAgMjBcdH0pKTtcbiAgICAyMVx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyMVxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxWER6UjVqREVzQXRuZjZpNDFQY2JiQiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6MjY6MDkuNzc2WiIsInJlc3BvbnNlX3RleHQiOiLQotC10L/QtdGA0Ywg0LTQsNCy0LDQudGC0LUg0L/RgNC+0LLQtdGA0LjQvCwg0LXRgdGC0Ywg0LvQuCDRgdC60YDQuNC/0YIg0LTQu9GPINC00LXQv9C70L7RjyDQvdCwIEdpdEh1YiBQYWdlcyDQsiBwYWNrYWdlLmpzb246XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiN2RjZmVkOTctMGI0Mi00NWZjLTlkZjAtMWQ5OGRiMjU0YmNhIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTlEzaXdhSnRSbTlqanJ0dDFEem82WSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJpbmRleC5odG1sXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0JTQsNCy0LDQudGC0LUg0L/RgNC+0LLQtdGA0LjQvCDRgdC+0LTQtdGA0LbQuNC80L7QtSDRhNCw0LnQu9CwIGluZGV4Lmh0bWw6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHBhY2thZ2UuanNvbjpcbiAgICAgMVx0e1xuICAgICAyXHQgIFwibmFtZVwiOiBcInZpdGVfcmVhY3Rfc2hhZGNuX3RzXCIsXG4gICAgIDNcdCAgXCJwcml2YXRlXCI6IHRydWUsXG4gICAgIDRcdCAgXCJ2ZXJzaW9uXCI6IFwiMC4wLjBcIixcbiAgICAgNVx0ICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgICAgNlx0ICBcInNjcmlwdHNcIjoge1xuICAgICA3XHQgICAgXCJkZXZcIjogXCJ2aXRlXCIsXG4gICAgIDhcdCAgICBcImJ1aWxkXCI6IFwidml0ZSBidWlsZFwiLFxuICAgICA5XHQgICAgXCJidWlsZDpkZXZcIjogXCJ2aXRlIGJ1aWxkIC0tbW9kZSBkZXZlbG9wbWVudFwiLFxuICAgIDEwXHQgICAgXCJsaW50XCI6IFwiZXNsaW50IC5cIixcbiAgICAxMVx0ICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiXG4gICAgMTJcdCAgfSxcbiAgICAxM1x0ICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgMTRcdCAgICBcIkBob29rZm9ybS9yZXNvbHZlcnNcIjogXCJeMy45LjBcIixcbiAgICAxNVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFjY29yZGlvblwiOiBcIl4xLjIuMFwiLFxuICAgIDE2XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYWxlcnQtZGlhbG9nXCI6IFwiXjEuMS4xXCIsXG4gICAgMTdcdCAgICBcIkByYWRpeC11aS9yZWFjdC1hc3BlY3QtcmF0aW9cIjogXCJeMS4xLjBcIixcbiAgICAxOFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWF2YXRhclwiOiBcIl4xLjEuMFwiLFxuICAgIDE5XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtY2hlY2tib3hcIjogXCJeMS4xLjFcIixcbiAgICAyMFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWNvbGxhcHNpYmxlXCI6IFwiXjEuMS4wXCIsXG4gICAgMjFcdCAgICBcIkByYWRpeC11aS9yZWFjdC1jb250ZXh0LW1lbnVcIjogXCJeMi4yLjFcIixcbiAgICAyMlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWRpYWxvZ1wiOiBcIl4xLjEuMlwiLFxuICAgIDIzXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtZHJvcGRvd24tbWVudVwiOiBcIl4yLjEuMVwiLFxuICAgIDI0XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtaG92ZXItY2FyZFwiOiBcIl4xLjEuMVwiLFxuICAgIDI1XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtbGFiZWxcIjogXCJeMi4xLjBcIixcbiAgICAyNlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LW1lbnViYXJcIjogXCJeMS4xLjFcIixcbiAgICAyN1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LW5hdmlnYXRpb24tbWVudVwiOiBcIl4xLjIuMFwiLFxuICAgIDI4XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtcG9wb3ZlclwiOiBcIl4xLjEuMVwiLFxuICAgIDI5XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtcHJvZ3Jlc3NcIjogXCJeMS4xLjBcIixcbiAgICAzMFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXJhZGlvLWdyb3VwXCI6IFwiXjEuMi4wXCIsXG4gICAgMzFcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zY3JvbGwtYXJlYVwiOiBcIl4xLjEuMFwiLFxuICAgIDMyXHQgICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2VsZWN0XCI6IFwiXjIuMS4xXCIsXG4gICAgMzNcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zZXBhcmF0b3JcIjogXCJeMS4xLjBcIixcbiAgICAzNFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNsaWRlclwiOiBcIl4xLjIuMFwiLFxuICAgIDM1XHQgICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2xvdFwiOiBcIl4xLjEuMFwiLFxuICAgIDM2XHQgICAgXCJAcmFkaXgtdWkvcmVhY3Qtc3dpdGNoXCI6IFwiXjEuMS4wXCIsXG4gICAgMzdcdCAgICBcIkByYWRpeC11aS9yZWFjdC10YWJzXCI6IFwiXjEuMS4wXCIsXG4gICAgMzhcdCAgICBcIkByYWRpeC11aS9yZWFjdC10b2FzdFwiOiBcIl4xLjIuMVwiLFxuICAgIDM5XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9nZ2xlXCI6IFwiXjEuMS4wXCIsXG4gICAgNDBcdCAgICBcIkByYWRpeC11aS9yZWFjdC10b2dnbGUtZ3JvdXBcIjogXCJeMS4xLjBcIixcbiAgICA0MVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvb2x0aXBcIjogXCJeMS4xLjRcIixcbiAgICA0Mlx0ICAgIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI6IFwiXjUuNTYuMlwiLFxuICAgIDQzXHQgICAgXCJjbGFzcy12YXJpYW5jZS1hdXRob3JpdHlcIjogXCJeMC43LjFcIixcbiAgICA0NFx0ICAgIFwiY2xzeFwiOiBcIl4yLjEuMVwiLFxuICAgIDQ1XHQgICAgXCJjbWRrXCI6IFwiXjEuMC4wXCIsXG4gICAgNDZcdCAgICBcImRhdGUtZm5zXCI6IFwiXjMuNi4wXCIsXG4gICAgNDdcdCAgICBcImVtYmxhLWNhcm91c2VsLXJlYWN0XCI6IFwiXjguMy4wXCIsXG4gICAgNDhcdCAgICBcImlucHV0LW90cFwiOiBcIl4xLjIuNFwiLFxuICAgIDQ5XHQgICAgXCJsdWNpZGUtcmVhY3RcIjogXCJeMC40NjIuMFwiLFxuICAgIDUwXHQgICAgXCJuZXh0LXRoZW1lc1wiOiBcIl4wLjMuMFwiLFxuICAgIDUxXHQgICAgXCJyZWFjdFwiOiBcIl4xOC4zLjFcIixcbiAgICA1Mlx0ICAgIFwicmVhY3QtZGF5LXBpY2tlclwiOiBcIl44LjEwLjFcIixcbiAgICA1M1x0ICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjMuMVwiLFxuICAgIDU0XHQgICAgXCJyZWFjdC1ob29rLWZvcm1cIjogXCJeNy41My4wXCIsXG4gICAgNTVcdCAgICBcInJlYWN0LXJlc2l6YWJsZS1wYW5lbHNcIjogXCJeMi4xLjNcIixcbiAgICA1Nlx0ICAgIFwicmVhY3Qtcm91dGVyLWRvbVwiOiBcIl42LjI2LjJcIixcbiAgICA1N1x0ICAgIFwicmVjaGFydHNcIjogXCJeMi4xMi43XCIsXG4gICAgNThcdCAgICBcInNvbm5lclwiOiBcIl4xLjUuMFwiLFxuICAgIDU5XHQgICAgXCJ0YWlsd2luZC1tZXJnZVwiOiBcIl4yLjUuMlwiLFxuICAgIDYwXHQgICAgXCJ0YWlsd2luZGNzcy1hbmltYXRlXCI6IFwiXjEuMC43XCIsXG4gICAgNjFcdCAgICBcInZhdWxcIjogXCJeMC45LjNcIixcbiAgICA2Mlx0ICAgIFwiem9kXCI6IFwiXjMuMjMuOFwiXG4gICAgNjNcdCAgfSxcbiAgICA2NFx0ICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgNjVcdCAgICBcIkBlc2xpbnQvanNcIjogXCJeOS45LjBcIixcbiAgICA2Nlx0ICAgIFwiQHRhaWx3aW5kY3NzL3R5cG9ncmFwaHlcIjogXCJeMC41LjE1XCIsXG4gICAgNjdcdCAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjIyLjUuNVwiLFxuICAgIDY4XHQgICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMy4zXCIsXG4gICAgNjlcdCAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMy4wXCIsXG4gICAgNzBcdCAgICBcIkB2aXRlanMvcGx1Z2luLXJlYWN0LXN3Y1wiOiBcIl4zLjUuMFwiLFxuICAgIDcxXHQgICAgXCJhdXRvcHJlZml4ZXJcIjogXCJeMTAuNC4yMFwiLFxuICAgIDcyXHQgICAgXCJlc2xpbnRcIjogXCJeOS45LjBcIixcbiAgICA3M1x0ICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rc1wiOiBcIl41LjEuMC1yYy4wXCIsXG4gICAgNzRcdCAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtcmVmcmVzaFwiOiBcIl4wLjQuOVwiLFxuICAgIDc1XHQgICAgXCJnaC1wYWdlc1wiOiBcIl42LjMuMFwiLFxuICAgIDc2XHQgICAgXCJnbG9iYWxzXCI6IFwiXjE1LjkuMFwiLFxuICAgIDc3XHQgICAgXCJwb3N0Y3NzXCI6IFwiXjguNC40N1wiLFxuICAgIDc4XHQgICAgXCJ0YWlsd2luZGNzc1wiOiBcIl4zLjQuMTFcIixcbiAgICA3OVx0ICAgIFwidHlwZXNjcmlwdFwiOiBcIl41LjUuM1wiLFxuICAgIDgwXHQgICAgXCJ0eXBlc2NyaXB0LWVzbGludFwiOiBcIl44LjAuMVwiLFxuICAgIDgxXHQgICAgXCJ2aXRlXCI6IFwiXjUuNC4xXCJcbiAgICA4Mlx0ICB9XG4gICAgODNcdH1cbiAgICA4NFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiA4NFxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxMWQyQ0NaYW9neXozTVY0OTRnZm5mSyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6MjY6MTMuMTUwWiIsInJlc3BvbnNlX3RleHQiOiLQlNCw0LLQsNC50YLQtSDQv9GA0L7QstC10YDQuNC8INGB0L7QtNC10YDQttC40LzQvtC1INGE0LDQudC70LAgaW5kZXguaHRtbDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJlZmZlZGFkNS00YzNmLTQzNWQtODMwYy0wZjIwMTI4MzBkMjAiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFCQ0xRaXV6eFlGbWFDS0gyRmtBQnJxIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcImRpc3QvaW5kZXguaHRtbFwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDQv9GA0L7QstC10YDQuNC8INGB0L7QtNC10YDQttC40LzQvtC1INGB0L7QsdGA0LDQvdC90L7Qs9C+IGluZGV4Lmh0bWwg0LIg0L/QsNC/0LrQtSBkaXN0OlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBpbmRleC5odG1sOlxuICAgICAxXHRcbiAgICAgMlx0PCFET0NUWVBFIGh0bWw+XG4gICAgIDNcdDxodG1sIGxhbmc9XCJydVwiPlxuICAgICA0XHQgIDxoZWFkPlxuICAgICA1XHQgICAgPG1ldGEgY2hhcnNldD1cIlVURi04XCIgLz5cbiAgICAgNlx0ICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXCIgLz5cbiAgICAgN1x0ICAgIDx0aXRsZT5Ob3ZhIEFJIC0gS3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPIEFJL01MPC90aXRsZT5cbiAgICAgOFx0ICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgIDlcdCAgICA8bWV0YSBuYW1lPVwiYXV0aG9yXCIgY29udGVudD1cIk5vdmEgQUlcIiAvPlxuICAgIDEwXHRcbiAgICAxMVx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PVwiTm92YSBBSSAtIEt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyBBSS9NTFwiIC8+XG4gICAgMTJcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmRlc2NyaXB0aW9uXCIgY29udGVudD1cIk5vdmEgQUkgLSDQv9GA0LXQtNC90LDRgdGC0YDQvtC10L3QvdCw0Y8ga3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPINC30LDQtNCw0YfQsCDQvtCx0YPRh9C10L3QuNGPINC4INC40L3RhNC10YDQtdC90YHQsC4g0KHQvdC40LbQtdC90LjQtSDRgNCw0YHRhdC+0LTQvtCyINC4INC/0L7QstGL0YjQtdC90LjQtSDRg9GC0LjQu9C40LfQsNGG0LjQuCDRgNC10YHRg9GA0YHQvtCyINC60LvQsNGB0YLQtdGA0LAuXCIgLz5cbiAgICAxM1x0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dHlwZVwiIGNvbnRlbnQ9XCJ3ZWJzaXRlXCIgLz5cbiAgICAxNFx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6aW1hZ2VcIiBjb250ZW50PVwiaHR0cHM6Ly9sb3ZhYmxlLmRldi9vcGVuZ3JhcGgtaW1hZ2UtcDk4cHFnLnBuZ1wiIC8+XG4gICAgMTVcdFxuICAgIDE2XHQgICAgPG1ldGEgbmFtZT1cInR3aXR0ZXI6Y2FyZFwiIGNvbnRlbnQ9XCJzdW1tYXJ5X2xhcmdlX2ltYWdlXCIgLz5cbiAgICAxN1x0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOnNpdGVcIiBjb250ZW50PVwiQGxvdmFibGVfZGV2XCIgLz5cbiAgICAxOFx0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmltYWdlXCIgY29udGVudD1cImh0dHBzOi8vbG92YWJsZS5kZXYvb3BlbmdyYXBoLWltYWdlLXA5OHBxZy5wbmdcIiAvPlxuICAgIDE5XHQgICAgXG4gICAgMjBcdCAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb21cIj5cbiAgICAyMVx0ICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbVwiIGNyb3Nzb3JpZ2luPlxuICAgIDIyXHQgICAgPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW50ZXI6d2dodEA0MDA7NTAwOzYwMDs3MDAmZGlzcGxheT1zd2FwXCIgcmVsPVwic3R5bGVzaGVldFwiPlxuICAgIDIzXHQgIDwvaGVhZD5cbiAgICAyNFx0XG4gICAgMjVcdCAgPGJvZHk+XG4gICAgMjZcdCAgICA8ZGl2IGlkPVwicm9vdFwiPjwvZGl2PlxuICAgIDI3XHQgICAgPCEtLSBJTVBPUlRBTlQ6IERPIE5PVCBSRU1PVkUgVEhJUyBTQ1JJUFQgVEFHIE9SIFRISVMgVkVSWSBDT01NRU5UISAtLT5cbiAgICAyOFx0ICAgIDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly9jZG4uZ3B0ZW5nLmNvL2dwdGVuZ2luZWVyLmpzXCIgdHlwZT1cIm1vZHVsZVwiPjwvc2NyaXB0PlxuICAgIDI5XHQgICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgc3JjPVwiL3NyYy9tYWluLnRzeFwiPjwvc2NyaXB0PlxuICAgIDMwXHQgIDwvYm9keT5cbiAgICAzMVx0PC9odG1sPlxuICAgIDMyXHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDMyXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFOUTNpd2FKdFJtOWpqcnR0MUR6bzZZIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDoyNjoxNy4xMjVaIiwicmVzcG9uc2VfdGV4dCI6ItCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDQv9GA0L7QstC10YDQuNC8INGB0L7QtNC10YDQttC40LzQvtC1INGB0L7QsdGA0LDQvdC90L7Qs9C+IGluZGV4Lmh0bWwg0LIg0L/QsNC/0LrQtSBkaXN0OlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjgzZjY2ZDE3LWM1ODktNDBhMC04ODRiLTg1OThkMzdmMTk4MSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVJMUk5zVDdTdk10UFo0VDlaNUdwRVEiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwic3JjL21haW4udHN4XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0JTQsNCy0LDQudGC0LUg0L/RgNC+0LLQtdGA0LjQvCwg0LXRgdGC0Ywg0LvQuCDQsiDQv9GA0L7QtdC60YLQtSDRhNCw0LnQuyBtYWluLnRzeDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gZGlzdC9pbmRleC5odG1sOlxuICAgICAxXHRcbiAgICAgMlx0PCFET0NUWVBFIGh0bWw+XG4gICAgIDNcdDxodG1sIGxhbmc9XCJydVwiPlxuICAgICA0XHQgIDxoZWFkPlxuICAgICA1XHQgICAgPG1ldGEgY2hhcnNldD1cIlVURi04XCIgLz5cbiAgICAgNlx0ICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXCIgLz5cbiAgICAgN1x0ICAgIDx0aXRsZT5Ob3ZhIEFJIC0gS3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPIEFJL01MPC90aXRsZT5cbiAgICAgOFx0ICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgIDlcdCAgICA8bWV0YSBuYW1lPVwiYXV0aG9yXCIgY29udGVudD1cIk5vdmEgQUlcIiAvPlxuICAgIDEwXHRcbiAgICAxMVx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PVwiTm92YSBBSSAtIEt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyBBSS9NTFwiIC8+XG4gICAgMTJcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmRlc2NyaXB0aW9uXCIgY29udGVudD1cIk5vdmEgQUkgLSDQv9GA0LXQtNC90LDRgdGC0YDQvtC10L3QvdCw0Y8ga3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPINC30LDQtNCw0YfQsCDQvtCx0YPRh9C10L3QuNGPINC4INC40L3RhNC10YDQtdC90YHQsC4g0KHQvdC40LbQtdC90LjQtSDRgNCw0YHRhdC+0LTQvtCyINC4INC/0L7QstGL0YjQtdC90LjQtSDRg9GC0LjQu9C40LfQsNGG0LjQuCDRgNC10YHRg9GA0YHQvtCyINC60LvQsNGB0YLQtdGA0LAuXCIgLz5cbiAgICAxM1x0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dHlwZVwiIGNvbnRlbnQ9XCJ3ZWJzaXRlXCIgLz5cbiAgICAxNFx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6aW1hZ2VcIiBjb250ZW50PVwiaHR0cHM6Ly9sb3ZhYmxlLmRldi9vcGVuZ3JhcGgtaW1hZ2UtcDk4cHFnLnBuZ1wiIC8+XG4gICAgMTVcdFxuICAgIDE2XHQgICAgPG1ldGEgbmFtZT1cInR3aXR0ZXI6Y2FyZFwiIGNvbnRlbnQ9XCJzdW1tYXJ5X2xhcmdlX2ltYWdlXCIgLz5cbiAgICAxN1x0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOnNpdGVcIiBjb250ZW50PVwiQGxvdmFibGVfZGV2XCIgLz5cbiAgICAxOFx0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmltYWdlXCIgY29udGVudD1cImh0dHBzOi8vbG92YWJsZS5kZXYvb3BlbmdyYXBoLWltYWdlLXA5OHBxZy5wbmdcIiAvPlxuICAgIDE5XHQgICAgXG4gICAgMjBcdCAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb21cIj5cbiAgICAyMVx0ICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbVwiIGNyb3Nzb3JpZ2luPlxuICAgIDIyXHQgICAgPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW50ZXI6d2dodEA0MDA7NTAwOzYwMDs3MDAmZGlzcGxheT1zd2FwXCIgcmVsPVwic3R5bGVzaGVldFwiPlxuICAgIDIzXHQgICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgY3Jvc3NvcmlnaW4gc3JjPVwiL3NpdGUtbm92YS9hc3NldHMvaW5kZXgtQ1hKeTg1YjcuanNcIj48L3NjcmlwdD5cbiAgICAyNFx0ICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBjcm9zc29yaWdpbiBocmVmPVwiL3NpdGUtbm92YS9hc3NldHMvaW5kZXgtQkRGVnBLRG0uY3NzXCI+XG4gICAgMjVcdCAgPC9oZWFkPlxuICAgIDI2XHRcbiAgICAyN1x0ICA8Ym9keT5cbiAgICAyOFx0ICAgIDxkaXYgaWQ9XCJyb290XCI+PC9kaXY+XG4gICAgMjlcdCAgICA8IS0tIElNUE9SVEFOVDogRE8gTk9UIFJFTU9WRSBUSElTIFNDUklQVCBUQUcgT1IgVEhJUyBWRVJZIENPTU1FTlQhIC0tPlxuICAgIDMwXHQgICAgPHNjcmlwdCBzcmM9XCJodHRwczovL2Nkbi5ncHRlbmcuY28vZ3B0ZW5naW5lZXIuanNcIiB0eXBlPVwibW9kdWxlXCI+PC9zY3JpcHQ+XG4gICAgMzFcdCAgPC9ib2R5PlxuICAgIDMyXHQ8L2h0bWw+XG4gICAgMzNcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMzNcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUJDTFFpdXp4WUZtYUNLSDJGa0FCcnEifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjI2OjIwLjg3NVoiLCJyZXNwb25zZV90ZXh0Ijoi0JTQsNCy0LDQudGC0LUg0L/RgNC+0LLQtdGA0LjQvCwg0LXRgdGC0Ywg0LvQuCDQsiDQv9GA0L7QtdC60YLQtSDRhNCw0LnQuyBtYWluLnRzeDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiI0MzgyZjg3Yy00MjM1LTQ4MzMtODdlZC0zYzkwMGU0ZmU2OGIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFIa2dFSHBLdlJBWG80dmJXZzVXVnd5IiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJwYWNrYWdlLmpzb25cIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiICBcXFwic2NyaXB0c1xcXCI6IHtcXG4gICAgXFxcImRldlxcXCI6IFxcXCJ2aXRlXFxcIixcXG4gICAgXFxcImJ1aWxkXFxcIjogXFxcInZpdGUgYnVpbGRcXFwiLFxcbiAgICBcXFwiYnVpbGQ6ZGV2XFxcIjogXFxcInZpdGUgYnVpbGQgLS1tb2RlIGRldmVsb3BtZW50XFxcIixcXG4gICAgXFxcImxpbnRcXFwiOiBcXFwiZXNsaW50IC5cXFwiLFxcbiAgICBcXFwicHJldmlld1xcXCI6IFxcXCJ2aXRlIHByZXZpZXdcXFwiXFxuICB9LFwiLCBcIm5ld19zdHJcIjogXCIgIFxcXCJzY3JpcHRzXFxcIjoge1xcbiAgICBcXFwiZGV2XFxcIjogXFxcInZpdGVcXFwiLFxcbiAgICBcXFwiYnVpbGRcXFwiOiBcXFwidml0ZSBidWlsZFxcXCIsXFxuICAgIFxcXCJidWlsZDpkZXZcXFwiOiBcXFwidml0ZSBidWlsZCAtLW1vZGUgZGV2ZWxvcG1lbnRcXFwiLFxcbiAgICBcXFwibGludFxcXCI6IFxcXCJlc2xpbnQgLlxcXCIsXFxuICAgIFxcXCJwcmV2aWV3XFxcIjogXFxcInZpdGUgcHJldmlld1xcXCIsXFxuICAgIFxcXCJwcmVkZXBsb3lcXFwiOiBcXFwibnBtIHJ1biBidWlsZFxcXCIsXFxuICAgIFxcXCJkZXBsb3lcXFwiOiBcXFwiZ2gtcGFnZXMgLWQgZGlzdFxcXCJcXG4gIH0sXCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiA2LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDEyfV19IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0J3QsCDQvtGB0L3QvtCy0LUg0YHQvtCx0YDQsNC90L3QvtC5INC40L3RhNC+0YDQvNCw0YbQuNC4INGPINCy0YvRj9Cy0LjQuyDQv9GA0L7QsdC70LXQvNGDINC4INCz0L7RgtC+0LIg0L/RgNC10LTQu9C+0LbQuNGC0Ywg0YDQtdGI0LXQvdC40LUuINCS0L7RgiDRh9GC0L4g0Y8g0L7QsdC90LDRgNGD0LbQuNC7OlxuXG4xLiDQkiDQv9GA0L7QtdC60YLQtSDQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8gVml0ZSDRgSDQvdCw0YHRgtGA0L7QudC60L7QuSBgYmFzZTogJy9zaXRlLW5vdmEvJ2Ag0LTQu9GPINC00LXQv9C70L7RjyDQvdCwIEdpdEh1YiBQYWdlcy5cbjIuINCSIHBhY2thZ2UuanNvbiDQtdGB0YLRjCDQv9Cw0LrQtdGCIGBnaC1wYWdlc2Ag0LTQu9GPINC00LXQv9C70L7Rjywg0L3QviDQvdC10YIg0YHQutGA0LjQv9GC0LAg0LTQu9GPINC10LPQviDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjy5cbjMuINCSINC40YHRhdC+0LTQvdC+0Lwg0YTQsNC50LvQtSBpbmRleC5odG1sINC10YHRgtGMINGB0YHRi9C70LrQsCDQvdCwINGB0LrRgNC40L/RgiDRgSDQsNCx0YHQvtC70Y7RgtC90YvQvCDQv9GD0YLQtdC8OiBgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgc3JjPVwiL3NyYy9tYWluLnRzeFwiPjwvc2NyaXB0PmAsINGH0YLQviDQvNC+0LbQtdGCINCy0YvQt9GL0LLQsNGC0Ywg0L/RgNC+0LHQu9C10LzRiyDQv9GA0Lgg0LTQtdC/0LvQvtC1LlxuNC4g0JIg0YHQvtCx0YDQsNC90L3QvtC8INGE0LDQudC70LUgZGlzdC9pbmRleC5odG1sINC/0YPRgtC4INC6INGA0LXRgdGD0YDRgdCw0Lwg0L3QsNGH0LjQvdCw0Y7RgtGB0Y8g0YEgYC9zaXRlLW5vdmEvYCwg0YfRgtC+INC/0YDQsNCy0LjQu9GM0L3Qviwg0L3QviDQvtGC0YHRg9GC0YHRgtCy0YPQtdGCINGB0LrRgNC40L/RgiDQtNC70Y8g0LTQtdC/0LvQvtGPLlxuXG4jIyDQn9C70LDQvSDQuNGB0L/RgNCw0LLQu9C10L3QuNGPOlxuXG4xLiDQlNC+0LHQsNCy0LjRgtGMINGB0LrRgNC40L/RgiDQtNC10L/Qu9C+0Y8g0LIgcGFja2FnZS5qc29uINC00LvRjyDQuNGB0L/QvtC70YzQt9C+0LLQsNC90LjRjyBnaC1wYWdlc1xuMi4g0J/RgNC+0LLQtdGA0LjRgtGMINC4INC40YHQv9GA0LDQstC40YLRjCDQv9GD0YLQuCDQsiBpbmRleC5odG1sXG4zLiDQlNC+0LHQsNCy0LjRgtGMINGE0LDQudC7IC5ub2pla3lsbCDQsiDQutC+0YDQtdC90Ywg0L/RgNC+0LXQutGC0LAgKNC10YHQu9C4INC10LPQviDQtdGJ0LUg0L3QtdGCKVxuNC4g0J7QsdC90L7QstC40YLRjCBSRUFETUUubWQg0YEg0LjQvdGB0YLRgNGD0LrRhtC40Y/QvNC4INC/0L4g0LTQtdC/0LvQvtGOXG5cbtCU0LDQstCw0LnRgtC1INCy0L3QtdGB0LXQvCDRjdGC0Lgg0LjQt9C80LXQvdC10L3QuNGPOlxuXG4xLiDQodC90LDRh9Cw0LvQsCDQtNC+0LHQsNCy0LjQvCDRgdC60YDQuNC/0YIg0LTQtdC/0LvQvtGPINCyIHBhY2thZ2UuanNvbjpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL21haW4udHN4OlxuICAgICAxXHRpbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCdcbiAgICAgMlx0aW1wb3J0IEFwcCBmcm9tICcuL0FwcC50c3gnXG4gICAgIDNcdGltcG9ydCAnLi9pbmRleC5jc3MnXG4gICAgIDRcdFxuICAgICA1XHRjcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSEpLnJlbmRlcig8QXBwIC8+KTtcbiAgICAgNlx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiA2XG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFSTFJOc1Q3U3ZNdFBaNFQ5WjVHcEVRIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDoyNjoyNS42MzVaIiwicmVzcG9uc2VfdGV4dCI6ItCd0LAg0L7RgdC90L7QstC1INGB0L7QsdGA0LDQvdC90L7QuSDQuNC90YTQvtGA0LzQsNGG0LjQuCDRjyDQstGL0Y/QstC40Lsg0L/RgNC+0LHQu9C10LzRgyDQuCDQs9C+0YLQvtCyINC/0YDQtdC00LvQvtC20LjRgtGMINGA0LXRiNC10L3QuNC1LiDQktC+0YIg0YfRgtC+INGPINC+0LHQvdCw0YDRg9C20LjQuzpcblxuMS4g0JIg0L/RgNC+0LXQutGC0LUg0LjRgdC/0L7Qu9GM0LfRg9C10YLRgdGPIFZpdGUg0YEg0L3QsNGB0YLRgNC+0LnQutC+0LkgYGJhc2U6ICcvc2l0ZS1ub3ZhLydgINC00LvRjyDQtNC10L/Qu9C+0Y8g0L3QsCBHaXRIdWIgUGFnZXMuXG4yLiDQkiBwYWNrYWdlLmpzb24g0LXRgdGC0Ywg0L/QsNC60LXRgiBgZ2gtcGFnZXNgINC00LvRjyDQtNC10L/Qu9C+0Y8sINC90L4g0L3QtdGCINGB0LrRgNC40L/RgtCwINC00LvRjyDQtdCz0L4g0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8uXG4zLiDQkiDQuNGB0YXQvtC00L3QvtC8INGE0LDQudC70LUgaW5kZXguaHRtbCDQtdGB0YLRjCDRgdGB0YvQu9C60LAg0L3QsCDRgdC60YDQuNC/0YIg0YEg0LDQsdGB0L7Qu9GO0YLQvdGL0Lwg0L/Rg9GC0LXQvDogYDxzY3JpcHQgdHlwZT1cIm1vZHVsZVwiIHNyYz1cIi9zcmMvbWFpbi50c3hcIj48L3NjcmlwdD5gLCDRh9GC0L4g0LzQvtC20LXRgiDQstGL0LfRi9Cy0LDRgtGMINC/0YDQvtCx0LvQtdC80Ysg0L/RgNC4INC00LXQv9C70L7QtS5cbjQuINCSINGB0L7QsdGA0LDQvdC90L7QvCDRhNCw0LnQu9C1IGRpc3QvaW5kZXguaHRtbCDQv9GD0YLQuCDQuiDRgNC10YHRg9GA0YHQsNC8INC90LDRh9C40L3QsNGO0YLRgdGPINGBIGAvc2l0ZS1ub3ZhL2AsINGH0YLQviDQv9GA0LDQstC40LvRjNC90L4sINC90L4g0L7RgtGB0YPRgtGB0YLQstGD0LXRgiDRgdC60YDQuNC/0YIg0LTQu9GPINC00LXQv9C70L7Rjy5cblxuIyMg0J/Qu9Cw0L0g0LjRgdC/0YDQsNCy0LvQtdC90LjRjzpcblxuMS4g0JTQvtCx0LDQstC40YLRjCDRgdC60YDQuNC/0YIg0LTQtdC/0LvQvtGPINCyIHBhY2thZ2UuanNvbiDQtNC70Y8g0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40Y8gZ2gtcGFnZXNcbjIuINCf0YDQvtCy0LXRgNC40YLRjCDQuCDQuNGB0L/RgNCw0LLQuNGC0Ywg0L/Rg9GC0Lgg0LIgaW5kZXguaHRtbFxuMy4g0JTQvtCx0LDQstC40YLRjCDRhNCw0LnQuyAubm9qZWt5bGwg0LIg0LrQvtGA0LXQvdGMINC/0YDQvtC10LrRgtCwICjQtdGB0LvQuCDQtdCz0L4g0LXRidC1INC90LXRgilcbjQuINCe0LHQvdC+0LLQuNGC0YwgUkVBRE1FLm1kINGBINC40L3RgdGC0YDRg9C60YbQuNGP0LzQuCDQv9C+INC00LXQv9C70L7RjlxuXG7QlNCw0LLQsNC50YLQtSDQstC90LXRgdC10Lwg0Y3RgtC4INC40LfQvNC10L3QtdC90LjRjzpcblxuMS4g0KHQvdCw0YfQsNC70LAg0LTQvtCx0LDQstC40Lwg0YHQutGA0LjQv9GCINC00LXQv9C70L7RjyDQsiBwYWNrYWdlLmpzb246XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMzg2YmNmNDAtYmU3Zi00NzNjLWE1OGMtYzNkNTQ2ZGE2YjY3IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVVRFcXUyNEtwdWlNODNSZXM1b2o3eiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiaW5kZXguaHRtbFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIgICAgPHNjcmlwdCB0eXBlPVxcXCJtb2R1bGVcXFwiIHNyYz1cXFwiL3NyYy9tYWluLnRzeFxcXCI+PC9zY3JpcHQ+XCIsIFwibmV3X3N0clwiOiBcIiAgICA8c2NyaXB0IHR5cGU9XFxcIm1vZHVsZVxcXCIgc3JjPVxcXCIuL3NyYy9tYWluLnRzeFxcXCI+PC9zY3JpcHQ+XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiAyOSwgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAyOX1dfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6IjIuINCi0LXQv9C10YDRjCDQuNGB0L/RgNCw0LLQuNC8INC/0YPRgtGMINC6INGB0LrRgNC40L/RgtGDINCyIGluZGV4Lmh0bWw6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHBhY2thZ2UuanNvbi5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgIDJcdCAgXCJuYW1lXCI6IFwidml0ZV9yZWFjdF9zaGFkY25fdHNcIixcbiAgICAgM1x0ICBcInByaXZhdGVcIjogdHJ1ZSxcbiAgICAgNFx0ICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICAgICA1XHQgIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICAgICA2XHQgIFwic2NyaXB0c1wiOiB7XG4gICAgIDdcdCAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICAgOFx0ICAgIFwiYnVpbGRcIjogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgIDlcdCAgICBcImJ1aWxkOmRldlwiOiBcInZpdGUgYnVpbGQgLS1tb2RlIGRldmVsb3BtZW50XCIsXG4gICAgMTBcdCAgICBcImxpbnRcIjogXCJlc2xpbnQgLlwiLFxuICAgIDExXHQgICAgXCJwcmV2aWV3XCI6IFwidml0ZSBwcmV2aWV3XCIsXG4gICAgMTJcdCAgICBcInByZWRlcGxveVwiOiBcIm5wbSBydW4gYnVpbGRcIixcbiAgICAxM1x0ICAgIFwiZGVwbG95XCI6IFwiZ2gtcGFnZXMgLWQgZGlzdFwiXG4gICAgMTRcdCAgfSxcbiAgICAxNVx0ICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgMTZcdCAgICBcIkBob29rZm9ybS9yZXNvbHZlcnNcIjogXCJeMy45LjBcIixcbiAgICAxN1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFjY29yZGlvblwiOiBcIl4xLjIuMFwiLFxuICAgIDE4XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYWxlcnQtZGlhbG9nXCI6IFwiXjEuMS4xXCIsXG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUhrZ0VIcEt2UkFYbzR2YldnNVdWd3kifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlfX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjI2OjM5LjAyNVoiLCJyZXNwb25zZV90ZXh0IjoiMi4g0KLQtdC/0LXRgNGMINC40YHQv9GA0LDQstC40Lwg0L/Rg9GC0Ywg0Log0YHQutGA0LjQv9GC0YMg0LIgaW5kZXguaHRtbDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJlMGQ4ZmRmOC05NzAzLTRhMDItOGM0MC1jMmFjMTIyNDA2OGYiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFFZkxwbnllRWtaQTEzSzIyY3NQTjdSIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImxzIC1sYSB8IGdyZXAgLm5vamVreWxsXCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMTB9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50IjoiMy4g0J/RgNC+0LLQtdGA0LjQvCDQvdCw0LvQuNGH0LjQtSDRhNCw0LnQu9CwIC5ub2pla3lsbCDQsiDQutC+0YDQvdC1INC/0YDQvtC10LrRgtCwINC4INGB0L7Qt9C00LDQtNC40Lwg0LXQs9C+LCDQtdGB0LvQuCDQtdCz0L4g0L3QtdGCOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBpbmRleC5odG1sLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAyNVx0ICA8Ym9keT5cbiAgICAyNlx0ICAgIDxkaXYgaWQ9XCJyb290XCI+PC9kaXY+XG4gICAgMjdcdCAgICA8IS0tIElNUE9SVEFOVDogRE8gTk9UIFJFTU9WRSBUSElTIFNDUklQVCBUQUcgT1IgVEhJUyBWRVJZIENPTU1FTlQhIC0tPlxuICAgIDI4XHQgICAgPHNjcmlwdCBzcmM9XCJodHRwczovL2Nkbi5ncHRlbmcuY28vZ3B0ZW5naW5lZXIuanNcIiB0eXBlPVwibW9kdWxlXCI+PC9zY3JpcHQ+XG4gICAgMjlcdCAgICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBzcmM9XCIuL3NyYy9tYWluLnRzeFwiPjwvc2NyaXB0PlxuICAgIDMwXHQgIDwvYm9keT5cbiAgICAzMVx0PC9odG1sPlxuICAgIDMyXHRcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVVRFcXUyNEtwdWlNODNSZXM1b2o3eiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2V9fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6MjY6NDguNDUxWiIsInJlc3BvbnNlX3RleHQiOiIzLiDQn9GA0L7QstC10YDQuNC8INC90LDQu9C40YfQuNC1INGE0LDQudC70LAgLm5vamVreWxsINCyINC60L7RgNC90LUg0L/RgNC+0LXQutGC0LAg0Lgg0YHQvtC30LTQsNC00LjQvCDQtdCz0L4sINC10YHQu9C4INC10LPQviDQvdC10YI6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZmRkY2MzMTItMjE2Yi00ZDM4LThlODYtZDBjNTFiMDE5ODQ1IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxV1NGVG1nZnE4Mm9BWWdpNDJnNGNFNyIsInRvb2xfbmFtZSI6InNhdmUtZmlsZSIsImlucHV0X2pzb24iOiJ7XCJmaWxlX3BhdGhcIjogXCIubm9qZWt5bGxcIiwgXCJmaWxlX2NvbnRlbnRcIjogXCJcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLQodC+0LfQtNCw0LTQuNC8INGE0LDQudC7IC5ub2pla3lsbCDQsiDQutC+0YDQvdC1INC/0YDQvtC10LrRgtCwOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG48cmV0dXJuLWNvZGU+XG4xXG48L3JldHVybi1jb2RlPlxuPHN0ZG91dD5cblxuPC9zdGRvdXQ+XG48c3RkZXJyPlxuXG48L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFFZkxwbnllRWtaQTEzSzIyY3NQTjdSIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjQ5LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDoyNjo1Mi42NzJaIiwicmVzcG9uc2VfdGV4dCI6ItCh0L7Qt9C00LDQtNC40Lwg0YTQsNC50LsgLm5vamVreWxsINCyINC60L7RgNC90LUg0L/RgNC+0LXQutGC0LA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNjE4MzVjODUtZTNiOC00YjlmLWEzNGUtMDViYmE1N2JkYWZkIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxSG0yaTlyb05Db1F5ZzVZbUZ1UnNRcSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwiUkVBRE1FLm1kXCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiMgXFx1MDQxYlxcdTA0M2VcXHUwNDNhXFx1MDQzMFxcdTA0M2JcXHUwNDRjXFx1MDQzZFxcdTA0MzBcXHUwNDRmIFxcdTA0NDBcXHUwNDMwXFx1MDQzN1xcdTA0NDBcXHUwNDMwXFx1MDQzMVxcdTA0M2VcXHUwNDQyXFx1MDQzYVxcdTA0MzBcXG5cXG5gYGBiYXNoXFxuIyBcXHUwNDIzXFx1MDQ0MVxcdTA0NDJcXHUwNDMwXFx1MDQzZFxcdTA0M2VcXHUwNDMyXFx1MDQzYVxcdTA0MzAgXFx1MDQzN1xcdTA0MzBcXHUwNDMyXFx1MDQzOFxcdTA0NDFcXHUwNDM4XFx1MDQzY1xcdTA0M2VcXHUwNDQxXFx1MDQ0MlxcdTA0MzVcXHUwNDM5XFxubnBtIGluc3RhbGxcXG5cXG4jIFxcdTA0MTdcXHUwNDMwXFx1MDQzZlxcdTA0NDNcXHUwNDQxXFx1MDQzYSBcXHUwNDQxXFx1MDQzNVxcdTA0NDBcXHUwNDMyXFx1MDQzNVxcdTA0NDBcXHUwNDMwIFxcdTA0NDBcXHUwNDMwXFx1MDQzN1xcdTA0NDBcXHUwNDMwXFx1MDQzMVxcdTA0M2VcXHUwNDQyXFx1MDQzYVxcdTA0MzhcXG5ucG0gcnVuIGRldlxcblxcbiMgXFx1MDQyMVxcdTA0MzFcXHUwNDNlXFx1MDQ0MFxcdTA0M2FcXHUwNDMwIFxcdTA0MzRcXHUwNDNiXFx1MDQ0ZiBcXHUwNDNmXFx1MDQ0MFxcdTA0M2VcXHUwNDM0XFx1MDQzMFxcdTA0M2FcXHUwNDQ4XFx1MDQzNVxcdTA0M2RcXHUwNDMwXFxubnBtIHJ1biBidWlsZFxcbmBgYFwiLCBcIm5ld19zdHJcIjogXCIjIFxcdTA0MWJcXHUwNDNlXFx1MDQzYVxcdTA0MzBcXHUwNDNiXFx1MDQ0Y1xcdTA0M2RcXHUwNDMwXFx1MDQ0ZiBcXHUwNDQwXFx1MDQzMFxcdTA0MzdcXHUwNDQwXFx1MDQzMFxcdTA0MzFcXHUwNDNlXFx1MDQ0MlxcdTA0M2FcXHUwNDMwXFxuXFxuYGBgYmFzaFxcbiMgXFx1MDQyM1xcdTA0NDFcXHUwNDQyXFx1MDQzMFxcdTA0M2RcXHUwNDNlXFx1MDQzMlxcdTA0M2FcXHUwNDMwIFxcdTA0MzdcXHUwNDMwXFx1MDQzMlxcdTA0MzhcXHUwNDQxXFx1MDQzOFxcdTA0M2NcXHUwNDNlXFx1MDQ0MVxcdTA0NDJcXHUwNDM1XFx1MDQzOVxcbm5wbSBpbnN0YWxsXFxuXFxuIyBcXHUwNDE3XFx1MDQzMFxcdTA0M2ZcXHUwNDQzXFx1MDQ0MVxcdTA0M2EgXFx1MDQ0MVxcdTA0MzVcXHUwNDQwXFx1MDQzMlxcdTA0MzVcXHUwNDQwXFx1MDQzMCBcXHUwNDQwXFx1MDQzMFxcdTA0MzdcXHUwNDQwXFx1MDQzMFxcdTA0MzFcXHUwNDNlXFx1MDQ0MlxcdTA0M2FcXHUwNDM4XFxubnBtIHJ1biBkZXZcXG5cXG4jIFxcdTA0MjFcXHUwNDMxXFx1MDQzZVxcdTA0NDBcXHUwNDNhXFx1MDQzMCBcXHUwNDM0XFx1MDQzYlxcdTA0NGYgXFx1MDQzZlxcdTA0NDBcXHUwNDNlXFx1MDQzNFxcdTA0MzBcXHUwNDNhXFx1MDQ0OFxcdTA0MzVcXHUwNDNkXFx1MDQzMFxcbm5wbSBydW4gYnVpbGRcXG5cXG4jIFxcdTA0MTRcXHUwNDM1XFx1MDQzZlxcdTA0M2JcXHUwNDNlXFx1MDQzOSBcXHUwNDNkXFx1MDQzMCBHaXRIdWIgUGFnZXNcXG5ucG0gcnVuIGRlcGxveVxcbmBgYFxcblxcbiMjIFxcdTA0MTRcXHUwNDM1XFx1MDQzZlxcdTA0M2JcXHUwNDNlXFx1MDQzOSBcXHUwNDNkXFx1MDQzMCBHaXRIdWIgUGFnZXNcXG5cXG5cXHUwNDFmXFx1MDQ0MFxcdTA0M2VcXHUwNDM1XFx1MDQzYVxcdTA0NDIgXFx1MDQzZFxcdTA0MzBcXHUwNDQxXFx1MDQ0MlxcdTA0NDBcXHUwNDNlXFx1MDQzNVxcdTA0M2QgXFx1MDQzNFxcdTA0M2JcXHUwNDRmIFxcdTA0MzBcXHUwNDMyXFx1MDQ0MlxcdTA0M2VcXHUwNDNjXFx1MDQzMFxcdTA0NDJcXHUwNDM4XFx1MDQ0N1xcdTA0MzVcXHUwNDQxXFx1MDQzYVxcdTA0M2VcXHUwNDMzXFx1MDQzZSBcXHUwNDM0XFx1MDQzNVxcdTA0M2ZcXHUwNDNiXFx1MDQzZVxcdTA0NGYgXFx1MDQzZFxcdTA0MzAgR2l0SHViIFBhZ2VzLiBcXHUwNDE0XFx1MDQzYlxcdTA0NGYgXFx1MDQzNFxcdTA0MzVcXHUwNDNmXFx1MDQzYlxcdTA0M2VcXHUwNDRmIFxcdTA0MzJcXHUwNDRiXFx1MDQzZlxcdTA0M2VcXHUwNDNiXFx1MDQzZFxcdTA0MzhcXHUwNDQyXFx1MDQzNTpcXG5cXG5gYGBiYXNoXFxubnBtIHJ1biBkZXBsb3lcXG5gYGBcXG5cXG5cXHUwNDJkXFx1MDQ0MlxcdTA0MzAgXFx1MDQzYVxcdTA0M2VcXHUwNDNjXFx1MDQzMFxcdTA0M2RcXHUwNDM0XFx1MDQzMCBcXHUwNDQxXFx1MDQzZVxcdTA0MzFcXHUwNDM1XFx1MDQ0MFxcdTA0MzVcXHUwNDQyIFxcdTA0M2ZcXHUwNDQwXFx1MDQzZVxcdTA0MzVcXHUwNDNhXFx1MDQ0MiBcXHUwNDM4IFxcdTA0M2VcXHUwNDNmXFx1MDQ0M1xcdTA0MzFcXHUwNDNiXFx1MDQzOFxcdTA0M2FcXHUwNDQzXFx1MDQzNVxcdTA0NDIgXFx1MDQzNVxcdTA0MzNcXHUwNDNlIFxcdTA0M2RcXHUwNDMwIFxcdTA0MzJcXHUwNDM1XFx1MDQ0MlxcdTA0M2FcXHUwNDM1IGBnaC1wYWdlc2AgXFx1MDQzMlxcdTA0MzBcXHUwNDQ4XFx1MDQzNVxcdTA0MzNcXHUwNDNlIFxcdTA0NDBcXHUwNDM1XFx1MDQzZlxcdTA0M2VcXHUwNDM3XFx1MDQzOFxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0MzhcXHUwNDRmLlwiLCBcIm9sZF9zdHJfc3RhcnRfbGluZV9udW1iZXJcIjogMTcsIFwib2xkX3N0cl9lbmRfbGluZV9udW1iZXJcIjogMjd9XX0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiI0LiDQntCx0L3QvtCy0LjQvCBSRUFETUUubWQg0YEg0LjQvdGB0YLRgNGD0LrRhtC40Y/QvNC4INC/0L4g0LTQtdC/0LvQvtGOOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBzYXZlZCBzdWNjZXNzZnVsbHkuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxV1NGVG1nZnE4Mm9BWWdpNDJnNGNFNyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo0OSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6MjY6NTYuNDA0WiIsInJlc3BvbnNlX3RleHQiOiI0LiDQntCx0L3QvtCy0LjQvCBSRUFETUUubWQg0YEg0LjQvdGB0YLRgNGD0LrRhtC40Y/QvNC4INC/0L4g0LTQtdC/0LvQvtGOOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjhhMmU3MWFhLTk4M2QtNDc5OC1hMzRkLTg2ZjNlYjllOTM1NCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTRxUkVFcGpmZng3UW9rdFdYeXNhZmQiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwibnBtIHJ1biBidWlsZFwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDMwMH0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLQotC10L/QtdGA0Ywg0LTQsNCy0LDQudGC0LUg0YHQvtCx0LXRgNC10Lwg0L/RgNC+0LXQutGCINC4INC/0YDQvtCy0LXRgNC40LwsINGH0YLQviDQstGB0LUg0YDQsNCx0L7RgtCw0LXRgjpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgUkVBRE1FLm1kLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAxM1x0LSBWaXRlXG4gICAgMTRcdC0gVGFpbHdpbmQgQ1NTXG4gICAgMTVcdC0gc2hhZGNuL3VpXG4gICAgMTZcdFxuICAgIDE3XHQjIyDQm9C+0LrQsNC70YzQvdCw0Y8g0YDQsNC30YDQsNCx0L7RgtC60LBcbiAgICAxOFx0XG4gICAgMTlcdGBgYGJhc2hcbiAgICAyMFx0IyDQo9GB0YLQsNC90L7QstC60LAg0LfQsNCy0LjRgdC40LzQvtGB0YLQtdC5XG4gICAgMjFcdG5wbSBpbnN0YWxsXG4gICAgMjJcdFxuICAgIDIzXHQjINCX0LDQv9GD0YHQuiDRgdC10YDQstC10YDQsCDRgNCw0LfRgNCw0LHQvtGC0LrQuFxuICAgIDI0XHRucG0gcnVuIGRldlxuICAgIDI1XHRcbiAgICAyNlx0IyDQodCx0L7RgNC60LAg0LTQu9GPINC/0YDQvtC00LDQutGI0LXQvdCwXG4gICAgMjdcdG5wbSBydW4gYnVpbGRcbiAgICAyOFx0XG4gICAgMjlcdCMg0JTQtdC/0LvQvtC5INC90LAgR2l0SHViIFBhZ2VzXG4gICAgMzBcdG5wbSBydW4gZGVwbG95XG4gICAgMzFcdGBgYFxuICAgIDMyXHRcbiAgICAzM1x0IyMg0JTQtdC/0LvQvtC5INC90LAgR2l0SHViIFBhZ2VzXG4gICAgMzRcdFxuICAgIDM1XHTQn9GA0L7QtdC60YIg0L3QsNGB0YLRgNC+0LXQvSDQtNC70Y8g0LDQstGC0L7QvNCw0YLQuNGH0LXRgdC60L7Qs9C+INC00LXQv9C70L7RjyDQvdCwIEdpdEh1YiBQYWdlcy4g0JTQu9GPINC00LXQv9C70L7RjyDQstGL0L/QvtC70L3QuNGC0LU6XG4gICAgMzZcdFxuICAgIDM3XHRgYGBiYXNoXG4gICAgMzhcdG5wbSBydW4gZGVwbG95XG4gICAgMzlcdGBgYFxuICAgIDQwXHRcbiAgICA0MVx00K3RgtCwINC60L7QvNCw0L3QtNCwINGB0L7QsdC10YDQtdGCINC/0YDQvtC10LrRgiDQuCDQvtC/0YPQsdC70LjQutGD0LXRgiDQtdCz0L4g0L3QsCDQstC10YLQutC1IGBnaC1wYWdlc2Ag0LLQsNGI0LXQs9C+INGA0LXQv9C+0LfQuNGC0L7RgNC40Y8uXG4gICAgNDJcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFIbTJpOXJvTkNvUXlnNVltRnVSc1FxIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjQ5LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDoyNzowNS40ODZaIiwicmVzcG9uc2VfdGV4dCI6ItCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDRgdC+0LHQtdGA0LXQvCDQv9GA0L7QtdC60YIg0Lgg0L/RgNC+0LLQtdGA0LjQvCwg0YfRgtC+INCy0YHQtSDRgNCw0LHQvtGC0LDQtdGCOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjAyNjIxZjJiLTdjMjUtNDNmNS04MzhkLWJkZTBhNTFlOGE5YiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUpLUmc0SHpSeXo3NUZhQkRBWjRtN0wiLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwibHMgLWxhIGRpc3QgfCBncmVwIC5ub2pla3lsbFwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDEwfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCi0LXQv9C10YDRjCDQv9GA0L7QstC10YDQuNC8LCDRh9GC0L4g0YTQsNC50LsgLm5vamVreWxsINCx0YvQuyDRgdC60L7Qv9C40YDQvtCy0LDQvSDQsiDQv9Cw0L/QutGDIGRpc3Q6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAwXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIFxuPiB2aXRlX3JlYWN0X3NoYWRjbl90c0AwLjAuMCBidWlsZFxuPiB2aXRlIGJ1aWxkXG5cblx1MDAxYlsxR1x1MDAxYlswS1x1MDAxYlszNm12aXRlIHY1LjQuMTAgXHUwMDFiWzMybWJ1aWxkaW5nIGZvciBwcm9kdWN0aW9uLi4uXHUwMDFiWzM2bVx1MDAxYlszOW1cblx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMSkgXHUwMDFiWzJtaW5kZXguaHRtbFx1MDAxYlsyMm1Ccm93c2Vyc2xpc3Q6IGJyb3dzZXJzIGRhdGEgKGNhbml1c2UtbGl0ZSkgaXMgNyBtb250aHMgb2xkLiBQbGVhc2UgcnVuOlxuICBucHggdXBkYXRlLWJyb3dzZXJzbGlzdC1kYkBsYXRlc3RcbiAgV2h5IHlvdSBzaG91bGQgZG8gaXQgcmVndWxhcmx5OiBodHRwczovL2dpdGh1Yi5jb20vYnJvd3NlcnNsaXN0L3VwZGF0ZS1kYiNyZWFkbWVcblx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoNSkgXHUwMDFiWzJtc3JjL2luZGV4LmNzc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDc1KSBcdTAwMWJbMm1zcmMvY29tcG9uZW50cy9Qcm9ibGVtcy50c3hcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICg5NCkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9pbmRleC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDQyNSkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9iYXR0ZXJ5LXdhcm5pbmcuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxMjEzKSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL3BhbmVsLXJpZ2h0LW9wZW4uanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxNjg4KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTc3MCkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL3JlY2hhcnRzLXNjYWxlL2VzNi9pbmRleC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDE5NDQpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sb2Rhc2gvX2ZyZWVHbG9iYWwuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzMybeKck1x1MDAxYlszOW0gMjQ4MSBtb2R1bGVzIHRyYW5zZm9ybWVkLlxuXHUwMDFiWzJLXHUwMDFiWzFHcmVuZGVyaW5nIGNodW5rcyAoMSkuLi5cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgwKS4uLlx1MDAxYlsyS1x1MDAxYlsxR2NvbXB1dGluZyBnemlwIHNpemUgKDEpLi4uXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMikuLi5cdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgzKS4uLlx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsybWRpc3QvXHUwMDFiWzIybVx1MDAxYlszMm1pbmRleC5odG1sICAgICAgICAgICAgICAgICBcdTAwMWJbMzltXHUwMDFiWzFtXHUwMDFiWzJtICAxLjcxIGtCXHUwMDFiWzIybVx1MDAxYlsxbVx1MDAxYlsyMm1cdTAwMWJbMm0g4pSCIGd6aXA6ICAgMC44MCBrQlx1MDAxYlsyMm1cblx1MDAxYlsybWRpc3QvXHUwMDFiWzIybVx1MDAxYlsybWFzc2V0cy9cdTAwMWJbMjJtXHUwMDFiWzM1bWluZGV4LUJERlZwS0RtLmNzcyAgXHUwMDFiWzM5bVx1MDAxYlsxbVx1MDAxYlsybSA3MS40MiBrQlx1MDAxYlsyMm1cdTAwMWJbMW1cdTAwMWJbMjJtXHUwMDFiWzJtIOKUgiBnemlwOiAgMTIuMzYga0JcdTAwMWJbMjJtXG5cdTAwMWJbMm1kaXN0L1x1MDAxYlsyMm1cdTAwMWJbMm1hc3NldHMvXHUwMDFiWzIybVx1MDAxYlszNm1pbmRleC1DWEp5ODViNy5qcyAgIFx1MDAxYlszOW1cdTAwMWJbMW1cdTAwMWJbMzNtNzM3LjQwIGtCXHUwMDFiWzM5bVx1MDAxYlsyMm1cdTAwMWJbMm0g4pSCIGd6aXA6IDIxNS44NyBrQlx1MDAxYlsyMm1cblx1MDAxYlszM21cbighKSBTb21lIGNodW5rcyBhcmUgbGFyZ2VyIHRoYW4gNTAwIGtCIGFmdGVyIG1pbmlmaWNhdGlvbi4gQ29uc2lkZXI6XG4tIFVzaW5nIGR5bmFtaWMgaW1wb3J0KCkgdG8gY29kZS1zcGxpdCB0aGUgYXBwbGljYXRpb25cbi0gVXNlIGJ1aWxkLnJvbGx1cE9wdGlvbnMub3V0cHV0Lm1hbnVhbENodW5rcyB0byBpbXByb3ZlIGNodW5raW5nOiBodHRwczovL3JvbGx1cGpzLm9yZy9jb25maWd1cmF0aW9uLW9wdGlvbnMvI291dHB1dC1tYW51YWxjaHVua3Ncbi0gQWRqdXN0IGNodW5rIHNpemUgbGltaXQgZm9yIHRoaXMgd2FybmluZyB2aWEgYnVpbGQuY2h1bmtTaXplV2FybmluZ0xpbWl0Llx1MDAxYlszOW1cblx1MDAxYlszMm3inJMgYnVpbHQgaW4gMS45NnNcdTAwMWJbMzltXG5cdTAwMWJbMUdcdTAwMWJbMEvioJlcdTAwMWJbMUdcdTAwMWJbMEtcbiAgICAgICAgPC9zdGRvdXQ+XG4gICAgICAgIDxzdGRlcnI+XG4gICAgICAgIFxuICAgICAgICA8L3N0ZGVycj4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE0cVJFRXBqZmZ4N1Fva3RXWHlzYWZkIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjUwLCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDoyNzoxMy45NzRaIiwicmVzcG9uc2VfdGV4dCI6ItCi0LXQv9C10YDRjCDQv9GA0L7QstC10YDQuNC8LCDRh9GC0L4g0YTQsNC50LsgLm5vamVreWxsINCx0YvQuyDRgdC60L7Qv9C40YDQvtCy0LDQvSDQsiDQv9Cw0L/QutGDIGRpc3Q6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNDJhOWI0MzYtMGEyMy00N2Q0LWI5NGMtNGJlZjcyMzcwZDMxIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUzgxS1NNQnRnUjhGM01VTHlFelNVMSIsInRvb2xfbmFtZSI6InNhdmUtZmlsZSIsImlucHV0X2pzb24iOiJ7XCJmaWxlX3BhdGhcIjogXCJkaXN0Ly5ub2pla3lsbFwiLCBcImZpbGVfY29udGVudFwiOiBcIlwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCe0YLQu9C40YfQvdC+ISDQotC10L/QtdGA0Ywg0LTQsNCy0LDQudGC0LUg0YHQvtC30LTQsNC00LjQvCDRhNCw0LnQuyAubm9qZWt5bGwg0LIg0L/QsNC/0LrQtSBkaXN0LCDQtdGB0LvQuCDQtdCz0L4g0YLQsNC8INC90LXRgjpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUgYXJlIHRoZSByZXN1bHRzIGZyb20gZXhlY3V0aW5nIHRoZSBjb21tYW5kLlxuPHJldHVybi1jb2RlPlxuMFxuPC9yZXR1cm4tY29kZT5cbjxzdGRvdXQ+XG4tcnctci0tci0tQCAgMSB2ZWtlc3Nlcm9wICBzdGFmZiAgICAgMSBNYXkgMTQgMTc6MjcgLm5vamVreWxsXG5cbjwvc3Rkb3V0PlxuPHN0ZGVycj5cblxuPC9zdGRlcnI+IiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxSktSZzRIelJ5ejc1RmFCREFaNG03TCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo1MSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6Mjc6MTkuMTg4WiIsInJlc3BvbnNlX3RleHQiOiLQntGC0LvQuNGH0L3QviEg0KLQtdC/0LXRgNGMINC00LDQstCw0LnRgtC1INGB0L7Qt9C00LDQtNC40Lwg0YTQsNC50LsgLm5vamVreWxsINCyINC/0LDQv9C60LUgZGlzdCwg0LXRgdC70Lgg0LXQs9C+INGC0LDQvCDQvdC10YI6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiY2Y3YmU2ZGYtMjY2Mi00YTcwLWE3M2QtYWE5NzNlZWFmZDRjIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUWlSRTNoWEFoVHRwVnlRQzVHcjZ6WSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJkaXN0L2luZGV4Lmh0bWxcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLQpNCw0LnQuyDRg9C20LUg0YHRg9GJ0LXRgdGC0LLRg9C10YIsINGH0YLQviDRhdC+0YDQvtGI0L4uINCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDQv9GA0L7QstC10YDQuNC8INGB0L7QtNC10YDQttC40LzQvtC1INGB0L7QsdGA0LDQvdC90L7Qs9C+IGluZGV4Lmh0bWwg0LIg0L/QsNC/0LrQtSBkaXN0OlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiRmlsZSBhbHJlYWR5IGV4aXN0czogL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YS9kaXN0Ly5ub2pla3lsbCIsImlzX2Vycm9yIjp0cnVlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUzgxS1NNQnRnUjhGM01VTHlFelNVMSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo1MSwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6Mjc6MjIuOTU3WiIsInJlc3BvbnNlX3RleHQiOiLQpNCw0LnQuyDRg9C20LUg0YHRg9GJ0LXRgdGC0LLRg9C10YIsINGH0YLQviDRhdC+0YDQvtGI0L4uINCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDQv9GA0L7QstC10YDQuNC8INGB0L7QtNC10YDQttC40LzQvtC1INGB0L7QsdGA0LDQvdC90L7Qs9C+IGluZGV4Lmh0bWwg0LIg0L/QsNC/0LrQtSBkaXN0OlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjFiZDVjMTA5LTIwOTYtNGUyOC1hODJiLTY2NTBkNjU0NWYzYyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTF5VTVqSGl0WUtoYkZMZUZTdFprZW4iLCJ0b29sX25hbWUiOiJsYXVuY2gtcHJvY2VzcyIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwibnBtIHJ1biBkZXBsb3lcIiwgXCJ3YWl0XCI6IHRydWUsIFwibWF4X3dhaXRfc2Vjb25kc1wiOiAzMDB9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0K8g0LfQsNC80LXRgtC40LssINGH0YLQviDQsiDRgdC+0LHRgNCw0L3QvdC+0Lwg0YTQsNC50LvQtSBpbmRleC5odG1sINC/0YPRgtC4INC6INGA0LXRgdGD0YDRgdCw0Lwg0L3QsNGH0LjQvdCw0Y7RgtGB0Y8g0YEgYC9zaXRlLW5vdmEvYCwg0YfRgtC+INC/0YDQsNCy0LjQu9GM0L3QviDQtNC70Y8gR2l0SHViIFBhZ2VzLCDQvdC+INC80L7QttC10YIg0LLRi9C30YvQstCw0YLRjCDQv9GA0L7QsdC70LXQvNGLINC/0YDQuCDQu9C+0LrQsNC70YzQvdC+0Lwg0L/RgNC+0YHQvNC+0YLRgNC1LiDQrdGC0L4g0L3QvtGA0LzQsNC70YzQvdC+LCDRgtCw0Log0LrQsNC6IFZpdGUg0L/RgNCw0LLQuNC70YzQvdC+INC90LDRgdGC0YDQvtC10L0g0YEgYGJhc2U6ICcvc2l0ZS1ub3ZhLydgLlxuXG7QotC10L/QtdGA0Ywg0LTQsNCy0LDQudGC0LUg0LLRi9C/0L7Qu9C90LjQvCDQtNC10L/Qu9C+0Lkg0L3QsCBHaXRIdWIgUGFnZXM6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGRpc3QvaW5kZXguaHRtbDpcbiAgICAgMVx0XG4gICAgIDJcdDwhRE9DVFlQRSBodG1sPlxuICAgICAzXHQ8aHRtbCBsYW5nPVwicnVcIj5cbiAgICAgNFx0ICA8aGVhZD5cbiAgICAgNVx0ICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiIC8+XG4gICAgIDZcdCAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFwiIC8+XG4gICAgIDdcdCAgICA8dGl0bGU+Tm92YSBBSSAtIEt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyBBSS9NTDwvdGl0bGU+XG4gICAgIDhcdCAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PVwiTm92YSBBSSAtINC/0YDQtdC00L3QsNGB0YLRgNC+0LXQvdC90LDRjyBrdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8g0LfQsNC00LDRh9CwINC+0LHRg9GH0LXQvdC40Y8g0Lgg0LjQvdGE0LXRgNC10L3RgdCwLiDQodC90LjQttC10L3QuNC1INGA0LDRgdGF0L7QtNC+0LIg0Lgg0L/QvtCy0YvRiNC10L3QuNC1INGD0YLQuNC70LjQt9Cw0YbQuNC4INGA0LXRgdGD0YDRgdC+0LIg0LrQu9Cw0YHRgtC10YDQsC5cIiAvPlxuICAgICA5XHQgICAgPG1ldGEgbmFtZT1cImF1dGhvclwiIGNvbnRlbnQ9XCJOb3ZhIEFJXCIgLz5cbiAgICAxMFx0XG4gICAgMTFcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnRpdGxlXCIgY29udGVudD1cIk5vdmEgQUkgLSBLdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8gQUkvTUxcIiAvPlxuICAgIDEyXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgMTNcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnR5cGVcIiBjb250ZW50PVwid2Vic2l0ZVwiIC8+XG4gICAgMTRcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlXCIgY29udGVudD1cImh0dHBzOi8vbG92YWJsZS5kZXYvb3BlbmdyYXBoLWltYWdlLXA5OHBxZy5wbmdcIiAvPlxuICAgIDE1XHRcbiAgICAxNlx0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmNhcmRcIiBjb250ZW50PVwic3VtbWFyeV9sYXJnZV9pbWFnZVwiIC8+XG4gICAgMTdcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjpzaXRlXCIgY29udGVudD1cIkBsb3ZhYmxlX2RldlwiIC8+XG4gICAgMThcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjppbWFnZVwiIGNvbnRlbnQ9XCJodHRwczovL2xvdmFibGUuZGV2L29wZW5ncmFwaC1pbWFnZS1wOThwcWcucG5nXCIgLz5cbiAgICAxOVx0XG4gICAgMjBcdCAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb21cIj5cbiAgICAyMVx0ICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbVwiIGNyb3Nzb3JpZ2luPlxuICAgIDIyXHQgICAgPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW50ZXI6d2dodEA0MDA7NTAwOzYwMDs3MDAmZGlzcGxheT1zd2FwXCIgcmVsPVwic3R5bGVzaGVldFwiPlxuICAgIDIzXHQgICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgY3Jvc3NvcmlnaW4gc3JjPVwiL3NpdGUtbm92YS9hc3NldHMvaW5kZXgtQ1hKeTg1YjcuanNcIj48L3NjcmlwdD5cbiAgICAyNFx0ICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBjcm9zc29yaWdpbiBocmVmPVwiL3NpdGUtbm92YS9hc3NldHMvaW5kZXgtQkRGVnBLRG0uY3NzXCI+XG4gICAgMjVcdCAgPC9oZWFkPlxuICAgIDI2XHRcbiAgICAyN1x0ICA8Ym9keT5cbiAgICAyOFx0ICAgIDxkaXYgaWQ9XCJyb290XCI+PC9kaXY+XG4gICAgMjlcdCAgICA8IS0tIElNUE9SVEFOVDogRE8gTk9UIFJFTU9WRSBUSElTIFNDUklQVCBUQUcgT1IgVEhJUyBWRVJZIENPTU1FTlQhIC0tPlxuICAgIDMwXHQgICAgPHNjcmlwdCBzcmM9XCJodHRwczovL2Nkbi5ncHRlbmcuY28vZ3B0ZW5naW5lZXIuanNcIiB0eXBlPVwibW9kdWxlXCI+PC9zY3JpcHQ+XG4gICAgMzFcdCAgPC9ib2R5PlxuICAgIDMyXHQ8L2h0bWw+XG4gICAgMzNcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMzNcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVFpUkUzaFhBaFR0cFZ5UUM1R3I2elkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NTEsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjI3OjI3LjMwN1oiLCJyZXNwb25zZV90ZXh0Ijoi0K8g0LfQsNC80LXRgtC40LssINGH0YLQviDQsiDRgdC+0LHRgNCw0L3QvdC+0Lwg0YTQsNC50LvQtSBpbmRleC5odG1sINC/0YPRgtC4INC6INGA0LXRgdGD0YDRgdCw0Lwg0L3QsNGH0LjQvdCw0Y7RgtGB0Y8g0YEgYC9zaXRlLW5vdmEvYCwg0YfRgtC+INC/0YDQsNCy0LjQu9GM0L3QviDQtNC70Y8gR2l0SHViIFBhZ2VzLCDQvdC+INC80L7QttC10YIg0LLRi9C30YvQstCw0YLRjCDQv9GA0L7QsdC70LXQvNGLINC/0YDQuCDQu9C+0LrQsNC70YzQvdC+0Lwg0L/RgNC+0YHQvNC+0YLRgNC1LiDQrdGC0L4g0L3QvtGA0LzQsNC70YzQvdC+LCDRgtCw0Log0LrQsNC6IFZpdGUg0L/RgNCw0LLQuNC70YzQvdC+INC90LDRgdGC0YDQvtC10L0g0YEgYGJhc2U6ICcvc2l0ZS1ub3ZhLydgLlxuXG7QotC10L/QtdGA0Ywg0LTQsNCy0LDQudGC0LUg0LLRi9C/0L7Qu9C90LjQvCDQtNC10L/Qu9C+0Lkg0L3QsCBHaXRIdWIgUGFnZXM6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiMzNiNmExZGYtNDlkZC00NmY4LTgxM2ItOTU0NzY5ZTViODI1IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVlRkMnl0ZUVvVkttNXBtUDJBRHkydiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwicGFja2FnZS5qc29uXCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgICBcXFwiZGVwbG95XFxcIjogXFxcImdoLXBhZ2VzIC1kIGRpc3RcXFwiXCIsIFwibmV3X3N0clwiOiBcIiAgICBcXFwiZGVwbG95XFxcIjogXFxcImdoLXBhZ2VzIC1kIGRpc3QgLS1hZGRcXFwiXCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiAxMywgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAxM31dfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCf0L7RhdC+0LbQtSwg0YfRgtC+INC/0YDQuCDQtNC10L/Qu9C+0LUg0LLQvtC30L3QuNC60LvQsCDQvtGI0LjQsdC60LAgYEVycm9yOiBzcGF3biBFMkJJR2AuINCt0YLQviDQvNC+0LbQtdGCINCx0YvRgtGMINGB0LLRj9C30LDQvdC+INGBINGC0LXQvCwg0YfRgtC+INC60L7QvNCw0L3QtNCwIGdpdCDRgdC70LjRiNC60L7QvCDQsdC+0LvRjNGI0LDRjyDQuNC3LdC30LAg0LHQvtC70YzRiNC+0LPQviDQutC+0LvQuNGH0LXRgdGC0LLQsCDRhNCw0LnQu9C+0LIuINCU0LDQstCw0LnRgtC1INC/0L7Qv9GA0L7QsdGD0LXQvCDQuNC30LzQtdC90LjRgtGMINGB0LrRgNC40L/RgiDQtNC10L/Qu9C+0Y8sINGH0YLQvtCx0Ysg0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMINC+0L/RhtC40Y4gYC0tYWRkYCwg0LrQvtGC0L7RgNCw0Y8g0LTQvtCx0LDQstC70Y/QtdGCINGE0LDQudC70YssINC90L4g0L3QtSDRg9C00LDQu9GP0LXRgiDRgdGD0YnQtdGB0YLQstGD0Y7RidC40LU6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAxXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIFxuPiB2aXRlX3JlYWN0X3NoYWRjbl90c0AwLjAuMCBwcmVkZXBsb3lcbj4gbnBtIHJ1biBidWlsZFxuXG5cdTAwMWJbMUdcdTAwMWJbMEtcbj4gdml0ZV9yZWFjdF9zaGFkY25fdHNAMC4wLjAgYnVpbGRcbj4gdml0ZSBidWlsZFxuXG5cdTAwMWJbMUdcdTAwMWJbMEtcdTAwMWJbMzZtdml0ZSB2NS40LjEwIFx1MDAxYlszMm1idWlsZGluZyBmb3IgcHJvZHVjdGlvbi4uLlx1MDAxYlszNm1cdTAwMWJbMzltXG5cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDEpIFx1MDAxYlsybWluZGV4Lmh0bWxcdTAwMWJbMjJtQnJvd3NlcnNsaXN0OiBicm93c2VycyBkYXRhIChjYW5pdXNlLWxpdGUpIGlzIDcgbW9udGhzIG9sZC4gUGxlYXNlIHJ1bjpcbiAgbnB4IHVwZGF0ZS1icm93c2Vyc2xpc3QtZGJAbGF0ZXN0XG4gIFdoeSB5b3Ugc2hvdWxkIGRvIGl0IHJlZ3VsYXJseTogaHR0cHM6Ly9naXRodWIuY29tL2Jyb3dzZXJzbGlzdC91cGRhdGUtZGIjcmVhZG1lXG5cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDcpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbW9kZXJuL3R5cGVzLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMjcpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbW9kZXJuL3VzZVN1c3BlbnNlUXVlcnkuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICg4NCkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL0ByYWRpeC11aS9yZWFjdC10b2FzdC9kaXN0L2luZGV4Lm1qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDEyMikgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9jaGFydC1iYXItYmlnLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoNzA4KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL2RhbS5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDE0MzEpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvc2xpZGVycy1ob3Jpem9udGFsLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTY5MSkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxNzcxKSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlR3QuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxOTE1KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvcmVhY3QtdHJhbnNpdGlvbi1ncm91cC9lc20vU3dpdGNoVHJhbnNpdGlvbi5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMzJt4pyTXHUwMDFiWzM5bSAyNDgxIG1vZHVsZXMgdHJhbnNmb3JtZWQuXG5cdTAwMWJbMktcdTAwMWJbMUdyZW5kZXJpbmcgY2h1bmtzICgxKS4uLlx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR2NvbXB1dGluZyBnemlwIHNpemUgKDApLi4uXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMSkuLi5cdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgyKS4uLlx1MDAxYlsyS1x1MDAxYlsxR2NvbXB1dGluZyBnemlwIHNpemUgKDMpLi4uXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJtZGlzdC9cdTAwMWJbMjJtXHUwMDFiWzMybWluZGV4Lmh0bWwgICAgICAgICAgICAgICAgIFx1MDAxYlszOW1cdTAwMWJbMW1cdTAwMWJbMm0gIDEuNzEga0JcdTAwMWJbMjJtXHUwMDFiWzFtXHUwMDFiWzIybVx1MDAxYlsybSDilIIgZ3ppcDogICAwLjgwIGtCXHUwMDFiWzIybVxuXHUwMDFiWzJtZGlzdC9cdTAwMWJbMjJtXHUwMDFiWzJtYXNzZXRzL1x1MDAxYlsyMm1cdTAwMWJbMzVtaW5kZXgtQkRGVnBLRG0uY3NzICBcdTAwMWJbMzltXHUwMDFiWzFtXHUwMDFiWzJtIDcxLjQyIGtCXHUwMDFiWzIybVx1MDAxYlsxbVx1MDAxYlsyMm1cdTAwMWJbMm0g4pSCIGd6aXA6ICAxMi4zNiBrQlx1MDAxYlsyMm1cblx1MDAxYlsybWRpc3QvXHUwMDFiWzIybVx1MDAxYlsybWFzc2V0cy9cdTAwMWJbMjJtXHUwMDFiWzM2bWluZGV4LUNYSnk4NWI3LmpzICAgXHUwMDFiWzM5bVx1MDAxYlsxbVx1MDAxYlszM203MzcuNDAga0JcdTAwMWJbMzltXHUwMDFiWzIybVx1MDAxYlsybSDilIIgZ3ppcDogMjE1Ljg3IGtCXHUwMDFiWzIybVxuXHUwMDFiWzMzbVxuKCEpIFNvbWUgY2h1bmtzIGFyZSBsYXJnZXIgdGhhbiA1MDAga0IgYWZ0ZXIgbWluaWZpY2F0aW9uLiBDb25zaWRlcjpcbi0gVXNpbmcgZHluYW1pYyBpbXBvcnQoKSB0byBjb2RlLXNwbGl0IHRoZSBhcHBsaWNhdGlvblxuLSBVc2UgYnVpbGQucm9sbHVwT3B0aW9ucy5vdXRwdXQubWFudWFsQ2h1bmtzIHRvIGltcHJvdmUgY2h1bmtpbmc6IGh0dHBzOi8vcm9sbHVwanMub3JnL2NvbmZpZ3VyYXRpb24tb3B0aW9ucy8jb3V0cHV0LW1hbnVhbGNodW5rc1xuLSBBZGp1c3QgY2h1bmsgc2l6ZSBsaW1pdCBmb3IgdGhpcyB3YXJuaW5nIHZpYSBidWlsZC5jaHVua1NpemVXYXJuaW5nTGltaXQuXHUwMDFiWzM5bVxuXHUwMDFiWzMybeKckyBidWlsdCBpbiAxLjk5c1x1MDAxYlszOW1cblx1MDAxYlsxR1x1MDAxYlswS+KgmVx1MDAxYlsxR1x1MDAxYlswS1x1MDAxYlsxR1x1MDAxYlswS+KgmVx1MDAxYlsxR1x1MDAxYlswS1xuPiB2aXRlX3JlYWN0X3NoYWRjbl90c0AwLjAuMCBkZXBsb3lcbj4gZ2gtcGFnZXMgLWQgZGlzdFxuXG5cdTAwMWJbMUdcdTAwMWJbMEvioJlcdTAwMWJbMUdcdTAwMWJbMEtFcnJvcjogc3Bhd24gRTJCSUdcbiAgICBhdCBDaGlsZFByb2Nlc3Muc3Bhd24gKG5vZGU6aW50ZXJuYWwvY2hpbGRfcHJvY2Vzczo0MjE6MTEpXG4gICAgYXQgT2JqZWN0LnNwYXduIChub2RlOmNoaWxkX3Byb2Nlc3M6NzUzOjkpXG4gICAgYXQgL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YS9ub2RlX21vZHVsZXMvZ2gtcGFnZXMvbGliL2dpdC5qczozMDoyMlxuICAgIGF0IG5ldyBQcm9taXNlICg8YW5vbnltb3VzPilcbiAgICBhdCBzcGF3biAoL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YS9ub2RlX21vZHVsZXMvZ2gtcGFnZXMvbGliL2dpdC5qczoyOToxMClcbiAgICBhdCBHaXQuZXhlYyAoL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YS9ub2RlX21vZHVsZXMvZ2gtcGFnZXMvbGliL2dpdC5qczo2OToxMClcbiAgICBhdCBHaXQucm0gKC9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEvbm9kZV9tb2R1bGVzL2doLXBhZ2VzL2xpYi9naXQuanM6MTQ2OjE1KVxuICAgIGF0IC9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEvbm9kZV9tb2R1bGVzL2doLXBhZ2VzL2xpYi9pbmRleC5qczoxODg6MjJcblx1MDAxYlsxR1x1MDAxYlswS+KgmVx1MDAxYlsxR1x1MDAxYlswS1xuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTF5VTVqSGl0WUtoYkZMZUZTdFprZW4ifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NTIsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjI4OjAxLjAwNloiLCJyZXNwb25zZV90ZXh0Ijoi0J/QvtGF0L7QttC1LCDRh9GC0L4g0L/RgNC4INC00LXQv9C70L7QtSDQstC+0LfQvdC40LrQu9CwINC+0YjQuNCx0LrQsCBgRXJyb3I6IHNwYXduIEUyQklHYC4g0K3RgtC+INC80L7QttC10YIg0LHRi9GC0Ywg0YHQstGP0LfQsNC90L4g0YEg0YLQtdC8LCDRh9GC0L4g0LrQvtC80LDQvdC00LAgZ2l0INGB0LvQuNGI0LrQvtC8INCx0L7Qu9GM0YjQsNGPINC40Lct0LfQsCDQsdC+0LvRjNGI0L7Qs9C+INC60L7Qu9C40YfQtdGB0YLQstCwINGE0LDQudC70L7Qsi4g0JTQsNCy0LDQudGC0LUg0L/QvtC/0YDQvtCx0YPQtdC8INC40LfQvNC10L3QuNGC0Ywg0YHQutGA0LjQv9GCINC00LXQv9C70L7Rjywg0YfRgtC+0LHRiyDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0L7Qv9GG0LjRjiBgLS1hZGRgLCDQutC+0YLQvtGA0LDRjyDQtNC+0LHQsNCy0LvRj9C10YIg0YTQsNC50LvRiywg0L3QviDQvdC1INGD0LTQsNC70Y/QtdGCINGB0YPRidC10YHRgtCy0YPRjtGJ0LjQtTpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhYzA5ZmU4NC1mYjJmLTQyYjctOGZmOS05MGVhOGU4MWM1MDMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFEUnA0RDU3VTM4QllWYjhQeFlLQVNqIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcIm5wbSBydW4gZGVwbG95XCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMzAwfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDQv9C+0L/RgNC+0LHRg9C10Lwg0LLRi9C/0L7Qu9C90LjRgtGMINC00LXQv9C70L7QuSDRgdC90L7QstCwOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBwYWNrYWdlLmpzb24uXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFswXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgICA5XHQgICAgXCJidWlsZDpkZXZcIjogXCJ2aXRlIGJ1aWxkIC0tbW9kZSBkZXZlbG9wbWVudFwiLFxuICAgIDEwXHQgICAgXCJsaW50XCI6IFwiZXNsaW50IC5cIixcbiAgICAxMVx0ICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiLFxuICAgIDEyXHQgICAgXCJwcmVkZXBsb3lcIjogXCJucG0gcnVuIGJ1aWxkXCIsXG4gICAgMTNcdCAgICBcImRlcGxveVwiOiBcImdoLXBhZ2VzIC1kIGRpc3QgLS1hZGRcIlxuICAgIDE0XHQgIH0sXG4gICAgMTVcdCAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIDE2XHQgICAgXCJAaG9va2Zvcm0vcmVzb2x2ZXJzXCI6IFwiXjMuOS4wXCIsXG4gICAgMTdcdCAgICBcIkByYWRpeC11aS9yZWFjdC1hY2NvcmRpb25cIjogXCJeMS4yLjBcIixcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxVlRkMnl0ZUVvVkttNXBtUDJBRHkydiJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo1MiwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6Mjg6MDkuNzI3WiIsInJlc3BvbnNlX3RleHQiOiLQotC10L/QtdGA0Ywg0LTQsNCy0LDQudGC0LUg0L/QvtC/0YDQvtCx0YPQtdC8INCy0YvQv9C+0LvQvdC40YLRjCDQtNC10L/Qu9C+0Lkg0YHQvdC+0LLQsDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJlMjVhYTZjYi03ZmZlLTQ1OTUtOGFmNy1lZWU3MmE3NDFlNDQiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFYNGRyNE45NFpoVVhpcDRTTVlOaW1nIiwidG9vbF9uYW1lIjoic2F2ZS1maWxlIiwiaW5wdXRfanNvbiI6IntcImZpbGVfcGF0aFwiOiBcImRlcGxveS5zaFwiLCBcImZpbGVfY29udGVudFwiOiBcIiMhL2Jpbi9iYXNoXFxuXFxuIyBcXHUwNDIxXFx1MDQzMVxcdTA0M2VcXHUwNDQwXFx1MDQzYVxcdTA0MzAgXFx1MDQzZlxcdTA0NDBcXHUwNDNlXFx1MDQzNVxcdTA0M2FcXHUwNDQyXFx1MDQzMFxcbm5wbSBydW4gYnVpbGRcXG5cXG4jIFxcdTA0MjFcXHUwNDNlXFx1MDQzN1xcdTA0MzRcXHUwNDMwXFx1MDQzZFxcdTA0MzhcXHUwNDM1IFxcdTA0MzJcXHUwNDQwXFx1MDQzNVxcdTA0M2NcXHUwNDM1XFx1MDQzZFxcdTA0M2RcXHUwNDNlXFx1MDQzOSBcXHUwNDM0XFx1MDQzOFxcdTA0NDBcXHUwNDM1XFx1MDQzYVxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0MzhcXHUwNDM4IFxcdTA0MzRcXHUwNDNiXFx1MDQ0ZiBcXHUwNDM0XFx1MDQzNVxcdTA0M2ZcXHUwNDNiXFx1MDQzZVxcdTA0NGZcXG5ybSAtcmYgLmRlcGxveVxcbm1rZGlyIC5kZXBsb3lcXG5cXG4jIFxcdTA0MWFcXHUwNDNlXFx1MDQzZlxcdTA0MzhcXHUwNDQwXFx1MDQzZVxcdTA0MzJcXHUwNDMwXFx1MDQzZFxcdTA0MzhcXHUwNDM1IFxcdTA0NDFcXHUwNDNlXFx1MDQzMVxcdTA0NDBcXHUwNDMwXFx1MDQzZFxcdTA0M2RcXHUwNDRiXFx1MDQ0NSBcXHUwNDQ0XFx1MDQzMFxcdTA0MzlcXHUwNDNiXFx1MDQzZVxcdTA0MzJcXG5jcCAtciBkaXN0LyogLmRlcGxveS9cXG5jcCAtciBkaXN0Ly4qIC5kZXBsb3kvIDI+L2Rldi9udWxsIHx8IDpcXG5cXG4jIFxcdTA0MWZcXHUwNDM1XFx1MDQ0MFxcdTA0MzVcXHUwNDQ1XFx1MDQzZVxcdTA0MzQgXFx1MDQzMiBcXHUwNDM0XFx1MDQzOFxcdTA0NDBcXHUwNDM1XFx1MDQzYVxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0MzhcXHUwNDRlIFxcdTA0MzRcXHUwNDM1XFx1MDQzZlxcdTA0M2JcXHUwNDNlXFx1MDQ0ZlxcbmNkIC5kZXBsb3lcXG5cXG4jIFxcdTA0MThcXHUwNDNkXFx1MDQzOFxcdTA0NDZcXHUwNDM4XFx1MDQzMFxcdTA0M2JcXHUwNDM4XFx1MDQzN1xcdTA0MzBcXHUwNDQ2XFx1MDQzOFxcdTA0NGYgZ2l0XFxuZ2l0IGluaXRcXG5naXQgYWRkIC5cXG5naXQgY29tbWl0IC1tIFxcXCJEZXBsb3kgdG8gR2l0SHViIFBhZ2VzXFxcIlxcblxcbiMgXFx1MDQxZlxcdTA0NDNcXHUwNDQ4IFxcdTA0M2RcXHUwNDMwIFxcdTA0MzJcXHUwNDM1XFx1MDQ0MlxcdTA0M2FcXHUwNDQzIGdoLXBhZ2VzXFxuIyBcXHUwNDE3XFx1MDQzMFxcdTA0M2NcXHUwNDM1XFx1MDQzZFxcdTA0MzhcXHUwNDQyXFx1MDQzNSBVUkwgXFx1MDQzZFxcdTA0MzAgXFx1MDQzMlxcdTA0MzBcXHUwNDQ4IFxcdTA0NDBcXHUwNDM1XFx1MDQzZlxcdTA0M2VcXHUwNDM3XFx1MDQzOFxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0MzhcXHUwNDM5XFxuZ2l0IHB1c2ggLWYgZ2l0QGdpdGh1Yi5jb206dmVrZXNzZXJvcC9zaXRlLW5vdmEuZ2l0IG1haW46Z2gtcGFnZXNcXG5cXG4jIFxcdTA0MTJcXHUwNDNlXFx1MDQzN1xcdTA0MzJcXHUwNDQwXFx1MDQzMFxcdTA0NDIgXFx1MDQzMiBcXHUwNDNhXFx1MDQzZVxcdTA0NDBcXHUwNDNkXFx1MDQzNVxcdTA0MzJcXHUwNDQzXFx1MDQ0ZSBcXHUwNDM0XFx1MDQzOFxcdTA0NDBcXHUwNDM1XFx1MDQzYVxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0MzhcXHUwNDRlXFxuY2QgLi5cXG5cXG4jIFxcdTA0MjNcXHUwNDM0XFx1MDQzMFxcdTA0M2JcXHUwNDM1XFx1MDQzZFxcdTA0MzhcXHUwNDM1IFxcdTA0MzJcXHUwNDQwXFx1MDQzNVxcdTA0M2NcXHUwNDM1XFx1MDQzZFxcdTA0M2RcXHUwNDNlXFx1MDQzOSBcXHUwNDM0XFx1MDQzOFxcdTA0NDBcXHUwNDM1XFx1MDQzYVxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0MzhcXHUwNDM4XFxucm0gLXJmIC5kZXBsb3lcXG5cXG5lY2hvIFxcXCJcXHUwNDE0XFx1MDQzNVxcdTA0M2ZcXHUwNDNiXFx1MDQzZVxcdTA0MzkgXFx1MDQzN1xcdTA0MzBcXHUwNDMyXFx1MDQzNVxcdTA0NDBcXHUwNDQ4XFx1MDQzNVxcdTA0M2QhXFxcIlwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCf0L7RhdC+0LbQtSwg0YfRgtC+INCy0L7Qt9C90LjQutC70LAg0L/RgNC+0LHQu9C10LzQsCDRgSDQsNGD0YLQtdC90YLQuNGE0LjQutCw0YbQuNC10LkgR2l0SHViLiBHaXRIdWIg0LHQvtC70YzRiNC1INC90LUg0L/QvtC00LTQtdGA0LbQuNCy0LDQtdGCINCw0YPRgtC10L3RgtC40YTQuNC60LDRhtC40Y4g0L/QviDQv9Cw0YDQvtC70Y4uINCS0LzQtdGB0YLQviDRjdGC0L7Qs9C+INC90YPQttC90L4g0LjRgdC/0L7Qu9GM0LfQvtCy0LDRgtGMINGC0L7QutC10L0g0LTQvtGB0YLRg9C/0LAg0LjQu9C4IFNTSC3QutC70Y7Rh9C4LlxuXG7QlNCw0LLQsNC50YLQtSDRgdC+0LfQtNCw0LTQuNC8INGB0LrRgNC40L/Rgiwg0LrQvtGC0L7RgNGL0Lkg0L/QvtC80L7QttC10YIg0LLQsNC8INCy0YvQv9C+0LvQvdC40YLRjCDQtNC10L/Qu9C+0Lkg0LLRgNGD0YfQvdGD0Y46XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAxXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIFxuPiB2aXRlX3JlYWN0X3NoYWRjbl90c0AwLjAuMCBwcmVkZXBsb3lcbj4gbnBtIHJ1biBidWlsZFxuXG5cdTAwMWJbMUdcdTAwMWJbMEtcbj4gdml0ZV9yZWFjdF9zaGFkY25fdHNAMC4wLjAgYnVpbGRcbj4gdml0ZSBidWlsZFxuXG5cdTAwMWJbMUdcdTAwMWJbMEtcdTAwMWJbMzZtdml0ZSB2NS40LjEwIFx1MDAxYlszMm1idWlsZGluZyBmb3IgcHJvZHVjdGlvbi4uLlx1MDAxYlszNm1cdTAwMWJbMzltXG5cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDEpIFx1MDAxYlsybWluZGV4Lmh0bWxcdTAwMWJbMjJtQnJvd3NlcnNsaXN0OiBicm93c2VycyBkYXRhIChjYW5pdXNlLWxpdGUpIGlzIDcgbW9udGhzIG9sZC4gUGxlYXNlIHJ1bjpcbiAgbnB4IHVwZGF0ZS1icm93c2Vyc2xpc3QtZGJAbGF0ZXN0XG4gIFdoeSB5b3Ugc2hvdWxkIGRvIGl0IHJlZ3VsYXJseTogaHR0cHM6Ly9naXRodWIuY29tL2Jyb3dzZXJzbGlzdC91cGRhdGUtZGIjcmVhZG1lXG5cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDUpIFx1MDAxYlsybXNyYy9pbmRleC5jc3NcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICg4MCkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9sdWNpZGUtcmVhY3QuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxMDkpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYmV0d2Vlbi1ob3Jpem9udGFsLXN0YXJ0LmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoNzI1KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL2Rpc2MtYWxidW0uanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxNTI0KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL3RodW1icy11cC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDE3MTApIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9yZWNoYXJ0cy9lczYvY2FydGVzaWFuL0Vycm9yQmFyLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTc3MykgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2xvZGFzaC9oZWFkLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTk2MykgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZVRyaW0uanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzMybeKck1x1MDAxYlszOW0gMjQ4MSBtb2R1bGVzIHRyYW5zZm9ybWVkLlxuXHUwMDFiWzJLXHUwMDFiWzFHcmVuZGVyaW5nIGNodW5rcyAoMSkuLi5cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgwKS4uLlx1MDAxYlsyS1x1MDAxYlsxR2NvbXB1dGluZyBnemlwIHNpemUgKDEpLi4uXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMikuLi5cdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgzKS4uLlx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsybWRpc3QvXHUwMDFiWzIybVx1MDAxYlszMm1pbmRleC5odG1sICAgICAgICAgICAgICAgICBcdTAwMWJbMzltXHUwMDFiWzFtXHUwMDFiWzJtICAxLjcxIGtCXHUwMDFiWzIybVx1MDAxYlsxbVx1MDAxYlsyMm1cdTAwMWJbMm0g4pSCIGd6aXA6ICAgMC44MCBrQlx1MDAxYlsyMm1cblx1MDAxYlsybWRpc3QvXHUwMDFiWzIybVx1MDAxYlsybWFzc2V0cy9cdTAwMWJbMjJtXHUwMDFiWzM1bWluZGV4LUJERlZwS0RtLmNzcyAgXHUwMDFiWzM5bVx1MDAxYlsxbVx1MDAxYlsybSA3MS40MiBrQlx1MDAxYlsyMm1cdTAwMWJbMW1cdTAwMWJbMjJtXHUwMDFiWzJtIOKUgiBnemlwOiAgMTIuMzYga0JcdTAwMWJbMjJtXG5cdTAwMWJbMm1kaXN0L1x1MDAxYlsyMm1cdTAwMWJbMm1hc3NldHMvXHUwMDFiWzIybVx1MDAxYlszNm1pbmRleC1DWEp5ODViNy5qcyAgIFx1MDAxYlszOW1cdTAwMWJbMW1cdTAwMWJbMzNtNzM3LjQwIGtCXHUwMDFiWzM5bVx1MDAxYlsyMm1cdTAwMWJbMm0g4pSCIGd6aXA6IDIxNS44NyBrQlx1MDAxYlsyMm1cblx1MDAxYlszM21cbighKSBTb21lIGNodW5rcyBhcmUgbGFyZ2VyIHRoYW4gNTAwIGtCIGFmdGVyIG1pbmlmaWNhdGlvbi4gQ29uc2lkZXI6XG4tIFVzaW5nIGR5bmFtaWMgaW1wb3J0KCkgdG8gY29kZS1zcGxpdCB0aGUgYXBwbGljYXRpb25cbi0gVXNlIGJ1aWxkLnJvbGx1cE9wdGlvbnMub3V0cHV0Lm1hbnVhbENodW5rcyB0byBpbXByb3ZlIGNodW5raW5nOiBodHRwczovL3JvbGx1cGpzLm9yZy9jb25maWd1cmF0aW9uLW9wdGlvbnMvI291dHB1dC1tYW51YWxjaHVua3Ncbi0gQWRqdXN0IGNodW5rIHNpemUgbGltaXQgZm9yIHRoaXMgd2FybmluZyB2aWEgYnVpbGQuY2h1bmtTaXplV2FybmluZ0xpbWl0Llx1MDAxYlszOW1cblx1MDAxYlszMm3inJMgYnVpbHQgaW4gMS45MnNcdTAwMWJbMzltXG5cdTAwMWJbMUdcdTAwMWJbMEvioJlcdTAwMWJbMUdcdTAwMWJbMEtcdTAwMWJbMUdcdTAwMWJbMEvioJlcdTAwMWJbMUdcdTAwMWJbMEtcbj4gdml0ZV9yZWFjdF9zaGFkY25fdHNAMC4wLjAgZGVwbG95XG4+IGdoLXBhZ2VzIC1kIGRpc3QgLS1hZGRcblxuXHUwMDFiWzFHXHUwMDFiWzBL4qCZXHUwMDFiWzFHXHUwMDFiWzBLVXNlcm5hbWUgZm9yICdodHRwczovL2dpdGh1Yi5jb20nOiDQvNGD0LvRg1xiIFxiXGIgXGJcYiBcYlxiIFxidmVrZXNzZXJvcFxuUGFzc3dvcmQgZm9yICdodHRwczovL9C80YN2ZWtlc3Nlcm9wQGdpdGh1Yi5jb20nOiBcblByb2Nlc3NFcnJvcjogcmVtb3RlOiBTdXBwb3J0IGZvciBwYXNzd29yZCBhdXRoZW50aWNhdGlvbiB3YXMgcmVtb3ZlZCBvbiBBdWd1c3QgMTMsIDIwMjEuXG5yZW1vdGU6IFBsZWFzZSBzZWUgaHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZ2V0LXN0YXJ0ZWQvZ2V0dGluZy1zdGFydGVkLXdpdGgtZ2l0L2Fib3V0LXJlbW90ZS1yZXBvc2l0b3JpZXMjY2xvbmluZy13aXRoLWh0dHBzLXVybHMgZm9yIGluZm9ybWF0aW9uIG9uIGN1cnJlbnRseSByZWNvbW1lbmRlZCBtb2RlcyBvZiBhdXRoZW50aWNhdGlvbi5cbmZhdGFsOiBBdXRoZW50aWNhdGlvbiBmYWlsZWQgZm9yICdodHRwczovL2dpdGh1Yi5jb20vdmVrZXNzZXJvcC9zaXRlLW5vdmEuZ2l0LydcblxuICAgIGF0IENoaWxkUHJvY2Vzcy48YW5vbnltb3VzPiAoL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YS9ub2RlX21vZHVsZXMvZ2gtcGFnZXMvbGliL2dpdC5qczo0MjoxNilcbiAgICBhdCBDaGlsZFByb2Nlc3MuZW1pdCAobm9kZTpldmVudHM6NTA3OjI4KVxuICAgIGF0IG1heWJlQ2xvc2UgKG5vZGU6aW50ZXJuYWwvY2hpbGRfcHJvY2VzczoxMTAxOjE2KVxuICAgIGF0IFNvY2tldC48YW5vbnltb3VzPiAobm9kZTppbnRlcm5hbC9jaGlsZF9wcm9jZXNzOjQ1NzoxMSlcbiAgICBhdCBTb2NrZXQuZW1pdCAobm9kZTpldmVudHM6NTA3OjI4KVxuICAgIGF0IFBpcGUuPGFub255bW91cz4gKG5vZGU6bmV0OjM1MToxMilcblx1MDAxYlsxR1x1MDAxYlswS+KgmVx1MDAxYlsxR1x1MDAxYlswS1xuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMURScDRENTdVMzhCWVZiOFB4WUtBU2oifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NTMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjI4OjQyLjcwNloiLCJyZXNwb25zZV90ZXh0Ijoi0J/QvtGF0L7QttC1LCDRh9GC0L4g0LLQvtC30L3QuNC60LvQsCDQv9GA0L7QsdC70LXQvNCwINGBINCw0YPRgtC10L3RgtC40YTQuNC60LDRhtC40LXQuSBHaXRIdWIuIEdpdEh1YiDQsdC+0LvRjNGI0LUg0L3QtSDQv9C+0LTQtNC10YDQttC40LLQsNC10YIg0LDRg9GC0LXQvdGC0LjRhNC40LrQsNGG0LjRjiDQv9C+INC/0LDRgNC+0LvRji4g0JLQvNC10YHRgtC+INGN0YLQvtCz0L4g0L3Rg9C20L3QviDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0YLQvtC60LXQvSDQtNC+0YHRgtGD0L/QsCDQuNC70LggU1NILdC60LvRjtGH0LguXG5cbtCU0LDQstCw0LnRgtC1INGB0L7Qt9C00LDQtNC40Lwg0YHQutGA0LjQv9GCLCDQutC+0YLQvtGA0YvQuSDQv9C+0LzQvtC20LXRgiDQstCw0Lwg0LLRi9C/0L7Qu9C90LjRgtGMINC00LXQv9C70L7QuSDQstGA0YPRh9C90YPRjjpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJiM2Y4NjdjZi0yZWM4LTQyMWYtOTkyZi0wODUyNjA5N2MxMmEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFFYlF6S2ZCdktLSlhvQTY3dDNRTGtQIiwidG9vbF9uYW1lIjoibGF1bmNoLXByb2Nlc3MiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcImNobW9kICt4IGRlcGxveS5zaFwiLCBcIndhaXRcIjogdHJ1ZSwgXCJtYXhfd2FpdF9zZWNvbmRzXCI6IDEwfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCi0LXQv9C10YDRjCDRgdC00LXQu9Cw0LXQvCDRgdC60YDQuNC/0YIg0LjRgdC/0L7Qu9C90Y/QtdC80YvQvDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkZpbGUgc2F2ZWQgc3VjY2Vzc2Z1bGx5LiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMVg0ZHI0Tjk0WmhVWGlwNFNNWU5pbWcifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NTMsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjI4OjUxLjY5OFoiLCJyZXNwb25zZV90ZXh0Ijoi0KLQtdC/0LXRgNGMINGB0LTQtdC70LDQtdC8INGB0LrRgNC40L/RgiDQuNGB0L/QvtC70L3Rj9C10LzRi9C8OlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjUzYTEyYzVlLWU3ZjUtNDA0Yy1hNzI1LTJlOTJlZGU0NDE0MCIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUJINUVHSFdBQUNCWGFOV0NuS0NuNWsiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInN0cl9yZXBsYWNlXCIsIFwicGF0aFwiOiBcIlJFQURNRS5tZFwiLCBcInN0cl9yZXBsYWNlX2VudHJpZXNcIjogW3tcIm9sZF9zdHJcIjogXCIjIyBcXHUwNDE0XFx1MDQzNVxcdTA0M2ZcXHUwNDNiXFx1MDQzZVxcdTA0MzkgXFx1MDQzZFxcdTA0MzAgR2l0SHViIFBhZ2VzXFxuXFxuXFx1MDQxZlxcdTA0NDBcXHUwNDNlXFx1MDQzNVxcdTA0M2FcXHUwNDQyIFxcdTA0M2RcXHUwNDMwXFx1MDQ0MVxcdTA0NDJcXHUwNDQwXFx1MDQzZVxcdTA0MzVcXHUwNDNkIFxcdTA0MzRcXHUwNDNiXFx1MDQ0ZiBcXHUwNDMwXFx1MDQzMlxcdTA0NDJcXHUwNDNlXFx1MDQzY1xcdTA0MzBcXHUwNDQyXFx1MDQzOFxcdTA0NDdcXHUwNDM1XFx1MDQ0MVxcdTA0M2FcXHUwNDNlXFx1MDQzM1xcdTA0M2UgXFx1MDQzNFxcdTA0MzVcXHUwNDNmXFx1MDQzYlxcdTA0M2VcXHUwNDRmIFxcdTA0M2RcXHUwNDMwIEdpdEh1YiBQYWdlcy4gXFx1MDQxNFxcdTA0M2JcXHUwNDRmIFxcdTA0MzRcXHUwNDM1XFx1MDQzZlxcdTA0M2JcXHUwNDNlXFx1MDQ0ZiBcXHUwNDMyXFx1MDQ0YlxcdTA0M2ZcXHUwNDNlXFx1MDQzYlxcdTA0M2RcXHUwNDM4XFx1MDQ0MlxcdTA0MzU6XFxuXFxuYGBgYmFzaFxcbm5wbSBydW4gZGVwbG95XFxuYGBgXFxuXFxuXFx1MDQyZFxcdTA0NDJcXHUwNDMwIFxcdTA0M2FcXHUwNDNlXFx1MDQzY1xcdTA0MzBcXHUwNDNkXFx1MDQzNFxcdTA0MzAgXFx1MDQ0MVxcdTA0M2VcXHUwNDMxXFx1MDQzNVxcdTA0NDBcXHUwNDM1XFx1MDQ0MiBcXHUwNDNmXFx1MDQ0MFxcdTA0M2VcXHUwNDM1XFx1MDQzYVxcdTA0NDIgXFx1MDQzOCBcXHUwNDNlXFx1MDQzZlxcdTA0NDNcXHUwNDMxXFx1MDQzYlxcdTA0MzhcXHUwNDNhXFx1MDQ0M1xcdTA0MzVcXHUwNDQyIFxcdTA0MzVcXHUwNDMzXFx1MDQzZSBcXHUwNDNkXFx1MDQzMCBcXHUwNDMyXFx1MDQzNVxcdTA0NDJcXHUwNDNhXFx1MDQzNSBgZ2gtcGFnZXNgIFxcdTA0MzJcXHUwNDMwXFx1MDQ0OFxcdTA0MzVcXHUwNDMzXFx1MDQzZSBcXHUwNDQwXFx1MDQzNVxcdTA0M2ZcXHUwNDNlXFx1MDQzN1xcdTA0MzhcXHUwNDQyXFx1MDQzZVxcdTA0NDBcXHUwNDM4XFx1MDQ0Zi5cIiwgXCJuZXdfc3RyXCI6IFwiIyMgXFx1MDQxNFxcdTA0MzVcXHUwNDNmXFx1MDQzYlxcdTA0M2VcXHUwNDM5IFxcdTA0M2RcXHUwNDMwIEdpdEh1YiBQYWdlc1xcblxcblxcdTA0MWZcXHUwNDQwXFx1MDQzZVxcdTA0MzVcXHUwNDNhXFx1MDQ0MiBcXHUwNDNkXFx1MDQzMFxcdTA0NDFcXHUwNDQyXFx1MDQ0MFxcdTA0M2VcXHUwNDM1XFx1MDQzZCBcXHUwNDM0XFx1MDQzYlxcdTA0NGYgXFx1MDQzNFxcdTA0MzVcXHUwNDNmXFx1MDQzYlxcdTA0M2VcXHUwNDRmIFxcdTA0M2RcXHUwNDMwIEdpdEh1YiBQYWdlcy4gXFx1MDQxNFxcdTA0M2JcXHUwNDRmIFxcdTA0MzRcXHUwNDM1XFx1MDQzZlxcdTA0M2JcXHUwNDNlXFx1MDQ0ZiBcXHUwNDM1XFx1MDQ0MVxcdTA0NDJcXHUwNDRjIFxcdTA0MzRcXHUwNDMyXFx1MDQzMCBcXHUwNDQxXFx1MDQzZlxcdTA0M2VcXHUwNDQxXFx1MDQzZVxcdTA0MzFcXHUwNDMwOlxcblxcbiMjIyBcXHUwNDIxXFx1MDQzZlxcdTA0M2VcXHUwNDQxXFx1MDQzZVxcdTA0MzEgMTogXFx1MDQxOFxcdTA0NDFcXHUwNDNmXFx1MDQzZVxcdTA0M2JcXHUwNDRjXFx1MDQzN1xcdTA0M2VcXHUwNDMyXFx1MDQzMFxcdTA0M2RcXHUwNDM4XFx1MDQzNSBucG0gXFx1MDQ0MVxcdTA0M2FcXHUwNDQwXFx1MDQzOFxcdTA0M2ZcXHUwNDQyXFx1MDQzMFxcblxcbmBgYGJhc2hcXG5ucG0gcnVuIGRlcGxveVxcbmBgYFxcblxcblxcdTA0MmRcXHUwNDQyXFx1MDQzMCBcXHUwNDNhXFx1MDQzZVxcdTA0M2NcXHUwNDMwXFx1MDQzZFxcdTA0MzRcXHUwNDMwIFxcdTA0NDFcXHUwNDNlXFx1MDQzMVxcdTA0MzVcXHUwNDQwXFx1MDQzNVxcdTA0NDIgXFx1MDQzZlxcdTA0NDBcXHUwNDNlXFx1MDQzNVxcdTA0M2FcXHUwNDQyIFxcdTA0MzggXFx1MDQzZVxcdTA0M2ZcXHUwNDQzXFx1MDQzMVxcdTA0M2JcXHUwNDM4XFx1MDQzYVxcdTA0NDNcXHUwNDM1XFx1MDQ0MiBcXHUwNDM1XFx1MDQzM1xcdTA0M2UgXFx1MDQzZFxcdTA0MzAgXFx1MDQzMlxcdTA0MzVcXHUwNDQyXFx1MDQzYVxcdTA0MzUgYGdoLXBhZ2VzYCBcXHUwNDMyXFx1MDQzMFxcdTA0NDhcXHUwNDM1XFx1MDQzM1xcdTA0M2UgXFx1MDQ0MFxcdTA0MzVcXHUwNDNmXFx1MDQzZVxcdTA0MzdcXHUwNDM4XFx1MDQ0MlxcdTA0M2VcXHUwNDQwXFx1MDQzOFxcdTA0NGYuIFxcdTA0MWRcXHUwNDM1XFx1MDQzZVxcdTA0MzFcXHUwNDQ1XFx1MDQzZVxcdTA0MzRcXHUwNDM4XFx1MDQzY1xcdTA0M2UgXFx1MDQzZFxcdTA0MzBcXHUwNDQxXFx1MDQ0MlxcdTA0NDBcXHUwNDNlXFx1MDQzOFxcdTA0NDJcXHUwNDRjIFxcdTA0MzBcXHUwNDQzXFx1MDQ0MlxcdTA0MzVcXHUwNDNkXFx1MDQ0MlxcdTA0MzhcXHUwNDQ0XFx1MDQzOFxcdTA0M2FcXHUwNDMwXFx1MDQ0NlxcdTA0MzhcXHUwNDRlIEdpdEh1YiBcXHUwNDQxIFxcdTA0M2ZcXHUwNDNlXFx1MDQzY1xcdTA0M2VcXHUwNDQ5XFx1MDQ0Y1xcdTA0NGUgU1NIIFxcdTA0MzhcXHUwNDNiXFx1MDQzOCBcXHUwNDQyXFx1MDQzZVxcdTA0M2FcXHUwNDM1XFx1MDQzZFxcdTA0MzAgXFx1MDQzNFxcdTA0M2VcXHUwNDQxXFx1MDQ0MlxcdTA0NDNcXHUwNDNmXFx1MDQzMC5cXG5cXG4jIyMgXFx1MDQyMVxcdTA0M2ZcXHUwNDNlXFx1MDQ0MVxcdTA0M2VcXHUwNDMxIDI6IFxcdTA0MThcXHUwNDQxXFx1MDQzZlxcdTA0M2VcXHUwNDNiXFx1MDQ0Y1xcdTA0MzdcXHUwNDNlXFx1MDQzMlxcdTA0MzBcXHUwNDNkXFx1MDQzOFxcdTA0MzUgXFx1MDQ0MVxcdTA0M2FcXHUwNDQwXFx1MDQzOFxcdTA0M2ZcXHUwNDQyXFx1MDQzMCBkZXBsb3kuc2hcXG5cXG5gYGBiYXNoXFxuLi9kZXBsb3kuc2hcXG5gYGBcXG5cXG5cXHUwNDJkXFx1MDQ0MlxcdTA0M2VcXHUwNDQyIFxcdTA0NDFcXHUwNDNhXFx1MDQ0MFxcdTA0MzhcXHUwNDNmXFx1MDQ0MiBcXHUwNDQxXFx1MDQzZVxcdTA0MzFcXHUwNDM1XFx1MDQ0MFxcdTA0MzVcXHUwNDQyIFxcdTA0M2ZcXHUwNDQwXFx1MDQzZVxcdTA0MzVcXHUwNDNhXFx1MDQ0MiBcXHUwNDM4IFxcdTA0M2VcXHUwNDNmXFx1MDQ0M1xcdTA0MzFcXHUwNDNiXFx1MDQzOFxcdTA0M2FcXHUwNDQzXFx1MDQzNVxcdTA0NDIgXFx1MDQzNVxcdTA0MzNcXHUwNDNlIFxcdTA0M2RcXHUwNDMwIFxcdTA0MzJcXHUwNDM1XFx1MDQ0MlxcdTA0M2FcXHUwNDM1IGBnaC1wYWdlc2AgXFx1MDQzMlxcdTA0MzBcXHUwNDQ4XFx1MDQzNVxcdTA0MzNcXHUwNDNlIFxcdTA0NDBcXHUwNDM1XFx1MDQzZlxcdTA0M2VcXHUwNDM3XFx1MDQzOFxcdTA0NDJcXHUwNDNlXFx1MDQ0MFxcdTA0MzhcXHUwNDRmLiBcXHUwNDIyXFx1MDQ0MFxcdTA0MzVcXHUwNDMxXFx1MDQ0M1xcdTA0MzVcXHUwNDQyXFx1MDQ0MVxcdTA0NGYgXFx1MDQzZFxcdTA0MzBcXHUwNDQxXFx1MDQ0MlxcdTA0NDBcXHUwNDNlXFx1MDQzNVxcdTA0M2RcXHUwNDNkXFx1MDQ0YlxcdTA0MzkgU1NILVxcdTA0M2FcXHUwNDNiXFx1MDQ0ZVxcdTA0NDcgXFx1MDQzNFxcdTA0M2JcXHUwNDRmIEdpdEh1Yi5cIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDMzLCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDQxfV19IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0KLQtdC/0LXRgNGMINC00LDQstCw0LnRgtC1INC+0LHQvdC+0LLQuNC8IFJFQURNRS5tZCDRgSDQuNC90YHRgtGA0YPQutGG0LjRj9C80Lgg0L/QviDQtNC10L/Qu9C+0Y46XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUViUXpLZkJ2S0tKWG9BNjd0M1FMa1AifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NTQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjI4OjU4LjMzMFoiLCJyZXNwb25zZV90ZXh0Ijoi0KLQtdC/0LXRgNGMINC00LDQstCw0LnRgtC1INC+0LHQvdC+0LLQuNC8IFJFQURNRS5tZCDRgSDQuNC90YHRgtGA0YPQutGG0LjRj9C80Lgg0L/QviDQtNC10L/Qu9C+0Y46XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZjZmNzQzNzktY2NmMy00MGFmLThjM2EtODAwMzc2NmJlODcxIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxNTVYQkJMbmg4SkVzekE2enRqdXNiNiIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJ2aXRlLmNvbmZpZy50c1wifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDQv9GA0L7QstC10YDQuNC8LCDRh9GC0L4g0LLRgdC1INGE0LDQudC70Ysg0L/RgNCw0LLQuNC70YzQvdC+INC90LDRgdGC0YDQvtC10L3RizpcblxuMS4g0J/RgNC+0LLQtdGA0LjQvCB2aXRlLmNvbmZpZy50czpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgUkVBRE1FLm1kLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAyOVx0IyDQlNC10L/Qu9C+0Lkg0L3QsCBHaXRIdWIgUGFnZXNcbiAgICAzMFx0bnBtIHJ1biBkZXBsb3lcbiAgICAzMVx0YGBgXG4gICAgMzJcdFxuICAgIDMzXHQjIyDQlNC10L/Qu9C+0Lkg0L3QsCBHaXRIdWIgUGFnZXNcbiAgICAzNFx0XG4gICAgMzVcdNCf0YDQvtC10LrRgiDQvdCw0YHRgtGA0L7QtdC9INC00LvRjyDQtNC10L/Qu9C+0Y8g0L3QsCBHaXRIdWIgUGFnZXMuINCU0LvRjyDQtNC10L/Qu9C+0Y8g0LXRgdGC0Ywg0LTQstCwINGB0L/QvtGB0L7QsdCwOlxuICAgIDM2XHRcbiAgICAzN1x0IyMjINCh0L/QvtGB0L7QsSAxOiDQmNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtSBucG0g0YHQutGA0LjQv9GC0LBcbiAgICAzOFx0XG4gICAgMzlcdGBgYGJhc2hcbiAgICA0MFx0bnBtIHJ1biBkZXBsb3lcbiAgICA0MVx0YGBgXG4gICAgNDJcdFxuICAgIDQzXHTQrdGC0LAg0LrQvtC80LDQvdC00LAg0YHQvtCx0LXRgNC10YIg0L/RgNC+0LXQutGCINC4INC+0L/Rg9Cx0LvQuNC60YPQtdGCINC10LPQviDQvdCwINCy0LXRgtC60LUgYGdoLXBhZ2VzYCDQstCw0YjQtdCz0L4g0YDQtdC/0L7Qt9C40YLQvtGA0LjRjy4g0J3QtdC+0LHRhdC+0LTQuNC80L4g0L3QsNGB0YLRgNC+0LjRgtGMINCw0YPRgtC10L3RgtC40YTQuNC60LDRhtC40Y4gR2l0SHViINGBINC/0L7QvNC+0YnRjNGOIFNTSCDQuNC70Lgg0YLQvtC60LXQvdCwINC00L7RgdGC0YPQv9CwLlxuICAgIDQ0XHRcbiAgICA0NVx0IyMjINCh0L/QvtGB0L7QsSAyOiDQmNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtSDRgdC60YDQuNC/0YLQsCBkZXBsb3kuc2hcbiAgICA0Nlx0XG4gICAgNDdcdGBgYGJhc2hcbiAgICA0OFx0Li9kZXBsb3kuc2hcbiAgICA0OVx0YGBgXG4gICAgNTBcdFxuICAgIDUxXHTQrdGC0L7RgiDRgdC60YDQuNC/0YIg0YHQvtCx0LXRgNC10YIg0L/RgNC+0LXQutGCINC4INC+0L/Rg9Cx0LvQuNC60YPQtdGCINC10LPQviDQvdCwINCy0LXRgtC60LUgYGdoLXBhZ2VzYCDQstCw0YjQtdCz0L4g0YDQtdC/0L7Qt9C40YLQvtGA0LjRjy4g0KLRgNC10LHRg9C10YLRgdGPINC90LDRgdGC0YDQvtC10L3QvdGL0LkgU1NILdC60LvRjtGHINC00LvRjyBHaXRIdWIuXG4gICAgNTJcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFCSDVFR0hXQUFDQlhhTldDbktDbjVrIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjU0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDoyOToyNS40MjhaIiwicmVzcG9uc2VfdGV4dCI6ItCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDQv9GA0L7QstC10YDQuNC8LCDRh9GC0L4g0LLRgdC1INGE0LDQudC70Ysg0L/RgNCw0LLQuNC70YzQvdC+INC90LDRgdGC0YDQvtC10L3RizpcblxuMS4g0J/RgNC+0LLQtdGA0LjQvCB2aXRlLmNvbmZpZy50czpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIwNzIyZWZlMC0yZjc0LTQyZjEtYmZhYy1lNzVlMWZlOTA3ZjciLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFSYlo3Y1E5QWl4eWdFRnhlVDYxbjhhIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcImluZGV4Lmh0bWxcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIyLiDQn9GA0L7QstC10YDQuNC8IGluZGV4Lmh0bWw6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHZpdGUuY29uZmlnLnRzOlxuICAgICAxXHRpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xuICAgICAyXHRpbXBvcnQgcmVhY3QgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXJlYWN0LXN3Y1wiO1xuICAgICAzXHRpbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuICAgICA0XHRcbiAgICAgNVx0Ly8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbiAgICAgNlx0ZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKCh7IG1vZGUgfSkgPT4gKHtcbiAgICAgN1x0ICBiYXNlOiAnL3NpdGUtbm92YS8nLFxuICAgICA4XHQgIHNlcnZlcjoge1xuICAgICA5XHQgICAgaG9zdDogXCI6OlwiLFxuICAgIDEwXHQgICAgcG9ydDogODA4MCxcbiAgICAxMVx0ICB9LFxuICAgIDEyXHQgIHBsdWdpbnM6IFtcbiAgICAxM1x0ICAgIHJlYWN0KCksXG4gICAgMTRcdCAgXSxcbiAgICAxNVx0ICByZXNvbHZlOiB7XG4gICAgMTZcdCAgICBhbGlhczoge1xuICAgIDE3XHQgICAgICBcIkBcIjogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCIuL3NyY1wiKSxcbiAgICAxOFx0ICAgIH0sXG4gICAgMTlcdCAgfSxcbiAgICAyMFx0fSkpO1xuICAgIDIxXHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDIxXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDE1NVhCQkxuaDhKRXN6QTZ6dGp1c2I2In19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjU0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDoyOToyOS41NDNaIiwicmVzcG9uc2VfdGV4dCI6IjIuINCf0YDQvtCy0LXRgNC40LwgaW5kZXguaHRtbDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIwYjVhNjIyMC03MzEwLTQ1Y2YtOTU4MS1kNDRhNGUzY2ZiOGMiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDEzRjc2Z1Z5OWRqUVh5MXN4c0RqMktFIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcInBhY2thZ2UuanNvblwiLCBcInZpZXdfcmFuZ2VcIjogWzEsIDIwXX0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIzLiDQn9GA0L7QstC10YDQuNC8IHBhY2thZ2UuanNvbjpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gaW5kZXguaHRtbDpcbiAgICAgMVx0XG4gICAgIDJcdDwhRE9DVFlQRSBodG1sPlxuICAgICAzXHQ8aHRtbCBsYW5nPVwicnVcIj5cbiAgICAgNFx0ICA8aGVhZD5cbiAgICAgNVx0ICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiIC8+XG4gICAgIDZcdCAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFwiIC8+XG4gICAgIDdcdCAgICA8dGl0bGU+Tm92YSBBSSAtIEt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyBBSS9NTDwvdGl0bGU+XG4gICAgIDhcdCAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PVwiTm92YSBBSSAtINC/0YDQtdC00L3QsNGB0YLRgNC+0LXQvdC90LDRjyBrdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8g0LfQsNC00LDRh9CwINC+0LHRg9GH0LXQvdC40Y8g0Lgg0LjQvdGE0LXRgNC10L3RgdCwLiDQodC90LjQttC10L3QuNC1INGA0LDRgdGF0L7QtNC+0LIg0Lgg0L/QvtCy0YvRiNC10L3QuNC1INGD0YLQuNC70LjQt9Cw0YbQuNC4INGA0LXRgdGD0YDRgdC+0LIg0LrQu9Cw0YHRgtC10YDQsC5cIiAvPlxuICAgICA5XHQgICAgPG1ldGEgbmFtZT1cImF1dGhvclwiIGNvbnRlbnQ9XCJOb3ZhIEFJXCIgLz5cbiAgICAxMFx0XG4gICAgMTFcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnRpdGxlXCIgY29udGVudD1cIk5vdmEgQUkgLSBLdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8gQUkvTUxcIiAvPlxuICAgIDEyXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgMTNcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnR5cGVcIiBjb250ZW50PVwid2Vic2l0ZVwiIC8+XG4gICAgMTRcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlXCIgY29udGVudD1cImh0dHBzOi8vbG92YWJsZS5kZXYvb3BlbmdyYXBoLWltYWdlLXA5OHBxZy5wbmdcIiAvPlxuICAgIDE1XHRcbiAgICAxNlx0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmNhcmRcIiBjb250ZW50PVwic3VtbWFyeV9sYXJnZV9pbWFnZVwiIC8+XG4gICAgMTdcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjpzaXRlXCIgY29udGVudD1cIkBsb3ZhYmxlX2RldlwiIC8+XG4gICAgMThcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjppbWFnZVwiIGNvbnRlbnQ9XCJodHRwczovL2xvdmFibGUuZGV2L29wZW5ncmFwaC1pbWFnZS1wOThwcWcucG5nXCIgLz5cbiAgICAxOVx0XG4gICAgMjBcdCAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb21cIj5cbiAgICAyMVx0ICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbVwiIGNyb3Nzb3JpZ2luPlxuICAgIDIyXHQgICAgPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW50ZXI6d2dodEA0MDA7NTAwOzYwMDs3MDAmZGlzcGxheT1zd2FwXCIgcmVsPVwic3R5bGVzaGVldFwiPlxuICAgIDIzXHQgIDwvaGVhZD5cbiAgICAyNFx0XG4gICAgMjVcdCAgPGJvZHk+XG4gICAgMjZcdCAgICA8ZGl2IGlkPVwicm9vdFwiPjwvZGl2PlxuICAgIDI3XHQgICAgPCEtLSBJTVBPUlRBTlQ6IERPIE5PVCBSRU1PVkUgVEhJUyBTQ1JJUFQgVEFHIE9SIFRISVMgVkVSWSBDT01NRU5UISAtLT5cbiAgICAyOFx0ICAgIDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly9jZG4uZ3B0ZW5nLmNvL2dwdGVuZ2luZWVyLmpzXCIgdHlwZT1cIm1vZHVsZVwiPjwvc2NyaXB0PlxuICAgIDI5XHQgICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgc3JjPVwiLi9zcmMvbWFpbi50c3hcIj48L3NjcmlwdD5cbiAgICAzMFx0ICA8L2JvZHk+XG4gICAgMzFcdDwvaHRtbD5cbiAgICAzMlx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAzMlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxUmJaN2NROUFpeHlnRUZ4ZVQ2MW44YSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo1NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6Mjk6MzMuODQ3WiIsInJlc3BvbnNlX3RleHQiOiIzLiDQn9GA0L7QstC10YDQuNC8IHBhY2thZ2UuanNvbjpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiIyMzAyMjg2Ni02OTFjLTQ0ZDAtYjNiYy0wZTU4M2JhNDU2NTIiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiIjIyDQmNGC0L7Qs9C4INC4INGA0LXQutC+0LzQtdC90LTQsNGG0LjQuFxuXG7QndCwINC+0YHQvdC+0LLQtSDQv9GA0L7QstC10LTQtdC90L3QvtCz0L4g0LDQvdCw0LvQuNC30LAg0Lgg0LLQvdC10YHQtdC90L3Ri9GFINC40LfQvNC10L3QtdC90LjQuSwg0Y8g0LLRi9GP0LLQuNC7INC4INC40YHQv9GA0LDQstC40Lsg0YHQu9C10LTRg9GO0YnQuNC1INC/0YDQvtCx0LvQtdC80YssINC60L7RgtC+0YDRi9C1INC80L7Qs9C70Lgg0LLRi9C30YvQstCw0YLRjCDQsdC10LvRg9GOINGB0YLRgNCw0L3QuNGG0YMg0L/RgNC4INC00LXQv9C70L7QtSDQvdCwIEdpdEh1YiBQYWdlczpcblxuMS4gKirQntGC0YHRg9GC0YHRgtCy0LjQtSDRgdC60YDQuNC/0YLQsCDQtNC10L/Qu9C+0Y8qKjog0JTQvtCx0LDQstC40Lsg0YHQutGA0LjQv9GC0YsgYHByZWRlcGxveWAg0LggYGRlcGxveWAg0LIgcGFja2FnZS5qc29uINC00LvRjyDQsNCy0YLQvtC80LDRgtC40YfQtdGB0LrQvtCz0L4g0LTQtdC/0LvQvtGPINC90LAgR2l0SHViIFBhZ2VzLlxuXG4yLiAqKtCd0LXQv9GA0LDQstC40LvRjNC90YvQtSDQv9GD0YLQuCDQsiBpbmRleC5odG1sKio6INCY0LfQvNC10L3QuNC7INC/0YPRgtGMINC6INGB0LrRgNC40L/RgtGDINGBINCw0LHRgdC+0LvRjtGC0L3QvtCz0L4gKGAvc3JjL21haW4udHN4YCkg0L3QsCDQvtGC0L3QvtGB0LjRgtC10LvRjNC90YvQuSAoYC4vc3JjL21haW4udHN4YCksINGH0YLQviDQstCw0LbQvdC+INC00LvRjyDQutC+0YDRgNC10LrRgtC90L7QuSDRgNCw0LHQvtGC0Ysg0L3QsCBHaXRIdWIgUGFnZXMuXG5cbjMuICoq0J7RgtGB0YPRgtGB0YLQstC40LUg0YTQsNC50LvQsCAubm9qZWt5bGwqKjog0JTQvtCx0LDQstC40Lsg0YTQsNC50LsgLm5vamVreWxsINCyINC60L7RgNC10L3RjCDQv9GA0L7QtdC60YLQsCwg0YfRgtC+0LHRiyBHaXRIdWIgUGFnZXMg0L3QtSDQvtCx0YDQsNCx0LDRgtGL0LLQsNC7INGB0LDQudGCINGH0LXRgNC10LcgSmVreWxsLCDRh9GC0L4g0LzQvtC20LXRgiDQstGL0LfRi9Cy0LDRgtGMINC/0YDQvtCx0LvQtdC80Ysg0YEg0L/Rg9GC0Y/QvNC4LlxuXG40LiAqKtCf0YDQvtCx0LvQtdC80Ysg0YEg0LDRg9GC0LXQvdGC0LjRhNC40LrQsNGG0LjQtdC5IEdpdEh1YioqOiDQodC+0LfQtNCw0Lsg0LDQu9GM0YLQtdGA0L3QsNGC0LjQstC90YvQuSDRgdC60YDQuNC/0YIg0LTQtdC/0LvQvtGPIGBkZXBsb3kuc2hgLCDQutC+0YLQvtGA0YvQuSDQvNC+0LbQvdC+INC40YHQv9C+0LvRjNC30L7QstCw0YLRjCDRgSBTU0gt0LrQu9GO0YfQsNC80LguXG5cbjUuICoq0J7QsdC90L7QstC70LXQvdC90LDRjyDQtNC+0LrRg9C80LXQvdGC0LDRhtC40Y8qKjog0J7QsdC90L7QstC40LsgUkVBRE1FLm1kINGBINC/0L7QtNGA0L7QsdC90YvQvNC4INC40L3RgdGC0YDRg9C60YbQuNGP0LzQuCDQv9C+INC00LXQv9C70L7Rji5cblxuIyMjINCg0LXQutC+0LzQtdC90LTQsNGG0LjQuCDQtNC70Y8g0YPRgdC/0LXRiNC90L7Qs9C+INC00LXQv9C70L7RjzpcblxuMS4g0JjRgdC/0L7Qu9GM0LfRg9C50YLQtSDRgdC60YDQuNC/0YIgYC4vZGVwbG95LnNoYCDQtNC70Y8g0LTQtdC/0LvQvtGPLCDQtdGB0LvQuCDRgyDQstCw0YEg0L3QsNGB0YLRgNC+0LXQvdGLIFNTSC3QutC70Y7Rh9C4INC00LvRjyBHaXRIdWIuXG4yLiDQldGB0LvQuCDQstGLINC/0YDQtdC00L/QvtGH0LjRgtCw0LXRgtC1INC40YHQv9C+0LvRjNC30L7QstCw0YLRjCBgbnBtIHJ1biBkZXBsb3lgLCDRg9Cx0LXQtNC40YLQtdGB0YwsINGH0YLQviDRgyDQstCw0YEg0L3QsNGB0YLRgNC+0LXQvdCwINCw0YPRgtC10L3RgtC40YTQuNC60LDRhtC40Y8gR2l0SHViINGBINC/0L7QvNC+0YnRjNGOINGC0L7QutC10L3QsCDQtNC+0YHRgtGD0L/QsCDQuNC70LggU1NILlxuMy4g0J/QvtGB0LvQtSDQtNC10L/Qu9C+0Y8g0LzQvtC20LXRgiDQv9C+0YLRgNC10LHQvtCy0LDRgtGM0YHRjyDQvdC10LrQvtGC0L7RgNC+0LUg0LLRgNC10LzRjyAo0L7QsdGL0YfQvdC+INC90LXRgdC60L7Qu9GM0LrQviDQvNC40L3Rg9GCKSwg0L/RgNC10LbQtNC1INGH0LXQvCDQuNC30LzQtdC90LXQvdC40Y8g0YHRgtCw0L3Rg9GCINCy0LjQtNC90Ysg0L3QsCBHaXRIdWIgUGFnZXMuXG40LiDQldGB0LvQuCDQv9GA0L7QsdC70LXQvNCwINGBINCx0LXQu9C+0Lkg0YHRgtGA0LDQvdC40YbQtdC5INGB0L7RhdGA0LDQvdGP0LXRgtGB0Y8sINC/0YDQvtCy0LXRgNGM0YLQtSDQutC+0L3RgdC+0LvRjCDQsdGA0LDRg9C30LXRgNCwINC90LAg0L3QsNC70LjRh9C40LUg0L7RiNC40LHQvtC6INC4INGD0LHQtdC00LjRgtC10YHRjCwg0YfRgtC+INCy0YHQtSDQv9GD0YLQuCDQuiDRgNC10YHRg9GA0YHQsNC8INC/0YDQsNCy0LjQu9GM0L3Ri9C1LlxuXG7QotC10L/QtdGA0Ywg0LLQsNGIINC/0YDQvtC10LrRgiDQtNC+0LvQttC10L0g0LrQvtGA0YDQtdC60YLQvdC+INC+0YLQvtCx0YDQsNC20LDRgtGM0YHRjyDQvdCwIEdpdEh1YiBQYWdlcy4g0JXRgdC70Lgg0YMg0LLQsNGBINCy0L7Qt9C90LjQutC90YPRgiDQtNC+0L/QvtC70L3QuNGC0LXQu9GM0L3Ri9C1INCy0L7Qv9GA0L7RgdGLINC40LvQuCDQv9GA0L7QsdC70LXQvNGLLCDQvdC1INGB0YLQtdGB0L3Rj9C50YLQtdGB0Ywg0L7QsdGA0LDRidCw0YLRjNGB0Y8g0LfQsCDQv9C+0LzQvtGJ0YzRji5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gcGFja2FnZS5qc29uOlxuICAgICAxXHR7XG4gICAgIDJcdCAgXCJuYW1lXCI6IFwidml0ZV9yZWFjdF9zaGFkY25fdHNcIixcbiAgICAgM1x0ICBcInByaXZhdGVcIjogdHJ1ZSxcbiAgICAgNFx0ICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICAgICA1XHQgIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICAgICA2XHQgIFwic2NyaXB0c1wiOiB7XG4gICAgIDdcdCAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICAgOFx0ICAgIFwiYnVpbGRcIjogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgIDlcdCAgICBcImJ1aWxkOmRldlwiOiBcInZpdGUgYnVpbGQgLS1tb2RlIGRldmVsb3BtZW50XCIsXG4gICAgMTBcdCAgICBcImxpbnRcIjogXCJlc2xpbnQgLlwiLFxuICAgIDExXHQgICAgXCJwcmV2aWV3XCI6IFwidml0ZSBwcmV2aWV3XCIsXG4gICAgMTJcdCAgICBcInByZWRlcGxveVwiOiBcIm5wbSBydW4gYnVpbGRcIixcbiAgICAxM1x0ICAgIFwiZGVwbG95XCI6IFwiZ2gtcGFnZXMgLWQgZGlzdCAtLWFkZFwiXG4gICAgMTRcdCAgfSxcbiAgICAxNVx0ICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgMTZcdCAgICBcIkBob29rZm9ybS9yZXNvbHZlcnNcIjogXCJeMy45LjBcIixcbiAgICAxN1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFjY29yZGlvblwiOiBcIl4xLjIuMFwiLFxuICAgIDE4XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYWxlcnQtZGlhbG9nXCI6IFwiXjEuMS4xXCIsXG4gICAgMTlcdCAgICBcIkByYWRpeC11aS9yZWFjdC1hc3BlY3QtcmF0aW9cIjogXCJeMS4xLjBcIixcbiAgICAyMFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWF2YXRhclwiOiBcIl4xLjEuMFwiLFxuVG90YWwgbGluZXMgaW4gZmlsZTogODZcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTNGNzZnVnk5ZGpRWHkxc3hzRGoyS0UifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NTQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjI5OjM4LjA4MloiLCJyZXNwb25zZV90ZXh0IjoiIyMg0JjRgtC+0LPQuCDQuCDRgNC10LrQvtC80LXQvdC00LDRhtC40Lhcblxu0J3QsCDQvtGB0L3QvtCy0LUg0L/RgNC+0LLQtdC00LXQvdC90L7Qs9C+INCw0L3QsNC70LjQt9CwINC4INCy0L3QtdGB0LXQvdC90YvRhSDQuNC30LzQtdC90LXQvdC40LksINGPINCy0YvRj9Cy0LjQuyDQuCDQuNGB0L/RgNCw0LLQuNC7INGB0LvQtdC00YPRjtGJ0LjQtSDQv9GA0L7QsdC70LXQvNGLLCDQutC+0YLQvtGA0YvQtSDQvNC+0LPQu9C4INCy0YvQt9GL0LLQsNGC0Ywg0LHQtdC70YPRjiDRgdGC0YDQsNC90LjRhtGDINC/0YDQuCDQtNC10L/Qu9C+0LUg0L3QsCBHaXRIdWIgUGFnZXM6XG5cbjEuICoq0J7RgtGB0YPRgtGB0YLQstC40LUg0YHQutGA0LjQv9GC0LAg0LTQtdC/0LvQvtGPKio6INCU0L7QsdCw0LLQuNC7INGB0LrRgNC40L/RgtGLIGBwcmVkZXBsb3lgINC4IGBkZXBsb3lgINCyIHBhY2thZ2UuanNvbiDQtNC70Y8g0LDQstGC0L7QvNCw0YLQuNGH0LXRgdC60L7Qs9C+INC00LXQv9C70L7RjyDQvdCwIEdpdEh1YiBQYWdlcy5cblxuMi4gKirQndC10L/RgNCw0LLQuNC70YzQvdGL0LUg0L/Rg9GC0Lgg0LIgaW5kZXguaHRtbCoqOiDQmNC30LzQtdC90LjQuyDQv9GD0YLRjCDQuiDRgdC60YDQuNC/0YLRgyDRgSDQsNCx0YHQvtC70Y7RgtC90L7Qs9C+IChgL3NyYy9tYWluLnRzeGApINC90LAg0L7RgtC90L7RgdC40YLQtdC70YzQvdGL0LkgKGAuL3NyYy9tYWluLnRzeGApLCDRh9GC0L4g0LLQsNC20L3QviDQtNC70Y8g0LrQvtGA0YDQtdC60YLQvdC+0Lkg0YDQsNCx0L7RgtGLINC90LAgR2l0SHViIFBhZ2VzLlxuXG4zLiAqKtCe0YLRgdGD0YLRgdGC0LLQuNC1INGE0LDQudC70LAgLm5vamVreWxsKio6INCU0L7QsdCw0LLQuNC7INGE0LDQudC7IC5ub2pla3lsbCDQsiDQutC+0YDQtdC90Ywg0L/RgNC+0LXQutGC0LAsINGH0YLQvtCx0YsgR2l0SHViIFBhZ2VzINC90LUg0L7QsdGA0LDQsdCw0YLRi9Cy0LDQuyDRgdCw0LnRgiDRh9C10YDQtdC3IEpla3lsbCwg0YfRgtC+INC80L7QttC10YIg0LLRi9C30YvQstCw0YLRjCDQv9GA0L7QsdC70LXQvNGLINGBINC/0YPRgtGP0LzQuC5cblxuNC4gKirQn9GA0L7QsdC70LXQvNGLINGBINCw0YPRgtC10L3RgtC40YTQuNC60LDRhtC40LXQuSBHaXRIdWIqKjog0KHQvtC30LTQsNC7INCw0LvRjNGC0LXRgNC90LDRgtC40LLQvdGL0Lkg0YHQutGA0LjQv9GCINC00LXQv9C70L7RjyBgZGVwbG95LnNoYCwg0LrQvtGC0L7RgNGL0Lkg0LzQvtC20L3QviDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0Ywg0YEgU1NILdC60LvRjtGH0LDQvNC4LlxuXG41LiAqKtCe0LHQvdC+0LLQu9C10L3QvdCw0Y8g0LTQvtC60YPQvNC10L3RgtCw0YbQuNGPKio6INCe0LHQvdC+0LLQuNC7IFJFQURNRS5tZCDRgSDQv9C+0LTRgNC+0LHQvdGL0LzQuCDQuNC90YHRgtGA0YPQutGG0LjRj9C80Lgg0L/QviDQtNC10L/Qu9C+0Y4uXG5cbiMjIyDQoNC10LrQvtC80LXQvdC00LDRhtC40Lgg0LTQu9GPINGD0YHQv9C10YjQvdC+0LPQviDQtNC10L/Qu9C+0Y86XG5cbjEuINCY0YHQv9C+0LvRjNC30YPQudGC0LUg0YHQutGA0LjQv9GCIGAuL2RlcGxveS5zaGAg0LTQu9GPINC00LXQv9C70L7Rjywg0LXRgdC70Lgg0YMg0LLQsNGBINC90LDRgdGC0YDQvtC10L3RiyBTU0gt0LrQu9GO0YfQuCDQtNC70Y8gR2l0SHViLlxuMi4g0JXRgdC70Lgg0LLRiyDQv9GA0LXQtNC/0L7Rh9C40YLQsNC10YLQtSDQuNGB0L/QvtC70YzQt9C+0LLQsNGC0YwgYG5wbSBydW4gZGVwbG95YCwg0YPQsdC10LTQuNGC0LXRgdGMLCDRh9GC0L4g0YMg0LLQsNGBINC90LDRgdGC0YDQvtC10L3QsCDQsNGD0YLQtdC90YLQuNGE0LjQutCw0YbQuNGPIEdpdEh1YiDRgSDQv9C+0LzQvtGJ0YzRjiDRgtC+0LrQtdC90LAg0LTQvtGB0YLRg9C/0LAg0LjQu9C4IFNTSC5cbjMuINCf0L7RgdC70LUg0LTQtdC/0LvQvtGPINC80L7QttC10YIg0L/QvtGC0YDQtdCx0L7QstCw0YLRjNGB0Y8g0L3QtdC60L7RgtC+0YDQvtC1INCy0YDQtdC80Y8gKNC+0LHRi9GH0L3QviDQvdC10YHQutC+0LvRjNC60L4g0LzQuNC90YPRgiksINC/0YDQtdC20LTQtSDRh9C10Lwg0LjQt9C80LXQvdC10L3QuNGPINGB0YLQsNC90YPRgiDQstC40LTQvdGLINC90LAgR2l0SHViIFBhZ2VzLlxuNC4g0JXRgdC70Lgg0L/RgNC+0LHQu9C10LzQsCDRgSDQsdC10LvQvtC5INGB0YLRgNCw0L3QuNGG0LXQuSDRgdC+0YXRgNCw0L3Rj9C10YLRgdGPLCDQv9GA0L7QstC10YDRjNGC0LUg0LrQvtC90YHQvtC70Ywg0LHRgNCw0YPQt9C10YDQsCDQvdCwINC90LDQu9C40YfQuNC1INC+0YjQuNCx0L7QuiDQuCDRg9Cx0LXQtNC40YLQtdGB0YwsINGH0YLQviDQstGB0LUg0L/Rg9GC0Lgg0Log0YDQtdGB0YPRgNGB0LDQvCDQv9GA0LDQstC40LvRjNC90YvQtS5cblxu0KLQtdC/0LXRgNGMINCy0LDRiCDQv9GA0L7QtdC60YIg0LTQvtC70LbQtdC9INC60L7RgNGA0LXQutGC0L3QviDQvtGC0L7QsdGA0LDQttCw0YLRjNGB0Y8g0L3QsCBHaXRIdWIgUGFnZXMuINCV0YHQu9C4INGDINCy0LDRgSDQstC+0LfQvdC40LrQvdGD0YIg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvQtSDQstC+0L/RgNC+0YHRiyDQuNC70Lgg0L/RgNC+0LHQu9C10LzRiywg0L3QtSDRgdGC0LXRgdC90Y/QudGC0LXRgdGMINC+0LHRgNCw0YnQsNGC0YzRgdGPINC30LAg0L/QvtC80L7RidGM0Y4uXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiIyNDkzNmU4MC03YTkzLTQ0YTctYmI3Yi1hNWNmZjViNGJlYmEiLCJ1dWlkIjoiMWI4MjU3ZjctODgzMC00OWZhLTk1ZmQtOWM2NzJjNzI0NDJjIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ3MjMyNzE4OTM4LCJ0b1RpbWVzdGFtcCI6MTc0NzIzMjk5MjA3MCwic2Vlbl9zdGF0ZSI6InNlZW4ifSx7InJlcXVlc3RfaWQiOiI3ODFiZTEwNy03M2NhLTRiYmYtYjdkMS1iOGM1MjA4MTA5MDQiLCJzdGF0dXMiOiJjYW5jZWxsZWQiLCJjaGF0SXRlbVR5cGUiOiJhZ2VudGljLXR1cm4tZGVsaW1pdGVyIn0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjEyOGY2ZmJiLTc1ZDUtNDcxOC05NWI3LTAzZmJkY2JkODE5YSIsInJlcXVlc3RfbWVzc2FnZSI6ItC/0YDQvtCx0LvQtdC80LAg0L7RgdGC0LDQu9Cw0YHRjCDRgtCwINC20LUg0YHQsNC80LDRjy4g0LTQtdC/0LvQvtC5INC/0YDQvtC40YHRhdC+0LTQuNGCINGD0YHQv9C10YjQvdC+INC90L4g0L/QviDQv9GA0LXQttC90LXQvNGDINGPINCy0LjQttGDINGC0L7Qu9GM0LrQviDQsdC10LvRi9C5INGB0LDQudGCINCx0LXQtyDQstGB0LXQs9C+LiDRgtGLINC90LUg0LTQvtC70LbQtdC9INCw0LLRgtC+0LzQsNGC0LjRh9C10YHQutC4INC60L7QvNC40YLQuNGC0Ywg0LjQt9C80LXQvdC10L3QuNGPLiDRjdGC0L4g0LHRg9C00YMg0LTQtdC70LDRgtGMLiDQv9GA0L7RgdGC0L4g0L3QsNC50LTQuCDQvtGI0LjQsdC60YMg0LggINC40YHQv9GA0LDQstGMINC10LUgIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCIsImNvbnRlbnQiOlt7InR5cGUiOiJ0ZXh0IiwidGV4dCI6ItC/0YDQvtCx0LvQtdC80LAg0L7RgdGC0LDQu9Cw0YHRjCDRgtCwINC20LUg0YHQsNC80LDRjy4g0LTQtdC/0LvQvtC5INC/0YDQvtC40YHRhdC+0LTQuNGCINGD0YHQv9C10YjQvdC+INC90L4g0L/QviDQv9GA0LXQttC90LXQvNGDINGPINCy0LjQttGDINGC0L7Qu9GM0LrQviDQsdC10LvRi9C5INGB0LDQudGCINCx0LXQtyDQstGB0LXQs9C+LiDRgtGLINC90LUg0LTQvtC70LbQtdC9INCw0LLRgtC+0LzQsNGC0LjRh9C10YHQutC4INC60L7QvNC40YLQuNGC0Ywg0LjQt9C80LXQvdC10L3QuNGPLiDRjdGC0L4g0LHRg9C00YMg0LTQtdC70LDRgtGMLiDQv9GA0L7RgdGC0L4g0L3QsNC50LTQuCDQvtGI0LjQsdC60YMg0LggINC40YHQv9GA0LDQstGMINC10LUgIn1dfV19LCJtZW50aW9uZWRfaXRlbXMiOltdLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFGNk1tZ3VvTXNwNGNBc1B2NVpIOEpDIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJ2aWV3XCIsIFwicGF0aFwiOiBcImRpc3QvaW5kZXguaHRtbFwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCf0L7QvdGP0LssINC00LDQstCw0LnRgtC1INCx0L7Qu9C10LUg0LPQu9GD0LHQvtC60L4g0L/RgNC+0LDQvdCw0LvQuNC30LjRgNGD0LXQvCDQv9GA0L7QsdC70LXQvNGDINGBINCx0LXQu9C+0Lkg0YHRgtGA0LDQvdC40YbQtdC5LiDQryDQvdC1INCx0YPQtNGDINCw0LLRgtC+0LzQsNGC0LjRh9C10YHQutC4INC60L7QvNC80LjRgtC40YLRjCDQuNC30LzQtdC90LXQvdC40Y8sINCwINC/0YDQvtGB0YLQviDQvdCw0LnQtNGDINC4INC40YHQv9GA0LDQstC70Y4g0L7RiNC40LHQutGDLlxuXG7QlNCw0LLQsNC50YLQtSDQv9GA0L7QstC10YDQuNC8LCDRh9GC0L4g0L/RgNC+0LjRgdGF0L7QtNC40YIg0L/RgNC4INC30LDQs9GA0YPQt9C60LUg0YHRgtGA0LDQvdC40YbRiyDQvdCwIEdpdEh1YiBQYWdlcy4g0JTQu9GPINGN0YLQvtCz0L4g0L3QsNC8INC90YPQttC90L4g0L/QvtGB0LzQvtGC0YDQtdGC0Ywg0L3QsCDQvtGI0LjQsdC60Lgg0LIg0LrQvtC90YHQvtC70Lgg0LHRgNCw0YPQt9C10YDQsC5cblxu0J/QvtGB0LrQvtC70YzQutGDINGPINC90LUg0LzQvtCz0YMg0L3QsNC/0YDRj9C80YPRjiDQv9GA0L7QstC10YDQuNGC0Ywg0LrQvtC90YHQvtC70Ywg0LHRgNCw0YPQt9C10YDQsCwg0LTQsNCy0LDQudGC0LUg0L/RgNC+0LDQvdCw0LvQuNC30LjRgNGD0LXQvCDRgdC+0LHRgNCw0L3QvdGL0LUg0YTQsNC50LvRiyDQuCDQv9GD0YLQuCDQuiDRgNC10YHRg9GA0YHQsNC8OlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MCwidGV4dF9ub2RlIjp7ImNvbnRlbnQiOiLQv9GA0L7QsdC70LXQvNCwINC+0YHRgtCw0LvQsNGB0Ywg0YLQsCDQttC1INGB0LDQvNCw0Y8uINC00LXQv9C70L7QuSDQv9GA0L7QuNGB0YXQvtC00LjRgiDRg9GB0L/QtdGI0L3QviDQvdC+INC/0L4g0L/RgNC10LbQvdC10LzRgyDRjyDQstC40LbRgyDRgtC+0LvRjNC60L4g0LHQtdC70YvQuSDRgdCw0LnRgiDQsdC10Lcg0LLRgdC10LPQvi4g0YLRiyDQvdC1INC00L7Qu9C20LXQvSDQsNCy0YLQvtC80LDRgtC40YfQtdGB0LrQuCDQutC+0LzQuNGC0LjRgtGMINC40LfQvNC10L3QtdC90LjRjy4g0Y3RgtC+INCx0YPQtNGDINC00LXQu9Cw0YLRjC4g0L/RgNC+0YHRgtC+INC90LDQudC00Lgg0L7RiNC40LHQutGDINC4ICDQuNGB0L/RgNCw0LLRjCDQtdC1ICJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo1NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6MzM6MzUuMjcxWiIsInJlc3BvbnNlX3RleHQiOiLQn9C+0L3Rj9C7LCDQtNCw0LLQsNC50YLQtSDQsdC+0LvQtdC1INCz0LvRg9Cx0L7QutC+INC/0YDQvtCw0L3QsNC70LjQt9C40YDRg9C10Lwg0L/RgNC+0LHQu9C10LzRgyDRgSDQsdC10LvQvtC5INGB0YLRgNCw0L3QuNGG0LXQuS4g0K8g0L3QtSDQsdGD0LTRgyDQsNCy0YLQvtC80LDRgtC40YfQtdGB0LrQuCDQutC+0LzQvNC40YLQuNGC0Ywg0LjQt9C80LXQvdC10L3QuNGPLCDQsCDQv9GA0L7RgdGC0L4g0L3QsNC50LTRgyDQuCDQuNGB0L/RgNCw0LLQu9GOINC+0YjQuNCx0LrRgy5cblxu0JTQsNCy0LDQudGC0LUg0L/RgNC+0LLQtdGA0LjQvCwg0YfRgtC+INC/0YDQvtC40YHRhdC+0LTQuNGCINC/0YDQuCDQt9Cw0LPRgNGD0LfQutC1INGB0YLRgNCw0L3QuNGG0Ysg0L3QsCBHaXRIdWIgUGFnZXMuINCU0LvRjyDRjdGC0L7Qs9C+INC90LDQvCDQvdGD0LbQvdC+INC/0L7RgdC80L7RgtGA0LXRgtGMINC90LAg0L7RiNC40LHQutC4INCyINC60L7QvdGB0L7Qu9C4INCx0YDQsNGD0LfQtdGA0LAuXG5cbtCf0L7RgdC60L7Qu9GM0LrRgyDRjyDQvdC1INC80L7Qs9GDINC90LDQv9GA0Y/QvNGD0Y4g0L/RgNC+0LLQtdGA0LjRgtGMINC60L7QvdGB0L7Qu9GMINCx0YDQsNGD0LfQtdGA0LAsINC00LDQstCw0LnRgtC1INC/0YDQvtCw0L3QsNC70LjQt9C40YDRg9C10Lwg0YHQvtCx0YDQsNC90L3Ri9C1INGE0LDQudC70Ysg0Lgg0L/Rg9GC0Lgg0Log0YDQtdGB0YPRgNGB0LDQvDpcbiIsIndvcmtzcGFjZV9maWxlX2NodW5rcyI6W119LHsic3RhdHVzIjoic3VjY2VzcyIsInJlcXVlc3RfaWQiOiJhNWYwMDBmZi1jMzhlLTQ4ZDgtOTQwZS1kN2U3ZjJmYTBiMzEiLCJyZXF1ZXN0X21lc3NhZ2UiOiIiLCJzdHJ1Y3R1cmVkX291dHB1dF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjUsImNvbnRlbnQiOiIiLCJ0b29sX3VzZSI6eyJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFNZTU3dHhXTDZ2YUt0RnlmSmNGNHVNIiwidG9vbF9uYW1lIjoic3RyLXJlcGxhY2UtZWRpdG9yIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJzdHJfcmVwbGFjZVwiLCBcInBhdGhcIjogXCJpbmRleC5odG1sXCIsIFwic3RyX3JlcGxhY2VfZW50cmllc1wiOiBbe1wib2xkX3N0clwiOiBcIiAgICA8IS0tIElNUE9SVEFOVDogRE8gTk9UIFJFTU9WRSBUSElTIFNDUklQVCBUQUcgT1IgVEhJUyBWRVJZIENPTU1FTlQhIC0tPlxcbiAgICA8c2NyaXB0IHNyYz1cXFwiaHR0cHM6Ly9jZG4uZ3B0ZW5nLmNvL2dwdGVuZ2luZWVyLmpzXFxcIiB0eXBlPVxcXCJtb2R1bGVcXFwiPjwvc2NyaXB0PlwiLCBcIm5ld19zdHJcIjogXCIgICAgPCEtLSBHUFQgRW5naW5lZXIgc2NyaXB0IHJlbW92ZWQgLS0+XCIsIFwib2xkX3N0cl9zdGFydF9saW5lX251bWJlclwiOiAyNywgXCJvbGRfc3RyX2VuZF9saW5lX251bWJlclwiOiAyOH1dfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCvINC30LDQvNC10YLQuNC7INC/0L7RgtC10L3RhtC40LDQu9GM0L3Rg9GOINC/0YDQvtCx0LvQtdC80YMuINCSINGB0L7QsdGA0LDQvdC90L7QvCDRhNCw0LnQu9C1IGBkaXN0L2luZGV4Lmh0bWxgINC10YHRgtGMINGB0LrRgNC40L/RgiDQvtGCIEdQVCBFbmdpbmVlcjpcblxuYGBgaHRtbFxuPHNjcmlwdCBzcmM9XCJodHRwczovL2Nkbi5ncHRlbmcuY28vZ3B0ZW5naW5lZXIuanNcIiB0eXBlPVwibW9kdWxlXCI+PC9zY3JpcHQ+XG5gYGBcblxu0K3RgtC+0YIg0YHQutGA0LjQv9GCINC80L7QttC10YIg0LrQvtC90YTQu9C40LrRgtC+0LLQsNGC0Ywg0YEg0LLQsNGI0LjQvCDQv9GA0LjQu9C+0LbQtdC90LjQtdC8INC40LvQuCDQsdC70L7QutC40YDQvtCy0LDRgtGM0YHRjyDQv9C+INC60LDQutC40Lwt0YLQviDQv9GA0LjRh9C40L3QsNC8LiDQlNCw0LLQsNC50YLQtSDRg9C00LDQu9C40Lwg0LXQs9C+INC40Lcg0LjRgdGF0L7QtNC90L7Qs9C+INGE0LDQudC70LAgYGluZGV4Lmh0bWxgINC4INC/0LXRgNC10YHQvtCx0LXRgNC10Lwg0L/RgNC+0LXQutGCOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBkaXN0L2luZGV4Lmh0bWw6XG4gICAgIDFcdFxuICAgICAyXHQ8IURPQ1RZUEUgaHRtbD5cbiAgICAgM1x0PGh0bWwgbGFuZz1cInJ1XCI+XG4gICAgIDRcdCAgPGhlYWQ+XG4gICAgIDVcdCAgICA8bWV0YSBjaGFyc2V0PVwiVVRGLThcIiAvPlxuICAgICA2XHQgICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcIiAvPlxuICAgICA3XHQgICAgPHRpdGxlPk5vdmEgQUkgLSBLdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8gQUkvTUw8L3RpdGxlPlxuICAgICA4XHQgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD1cIk5vdmEgQUkgLSDQv9GA0LXQtNC90LDRgdGC0YDQvtC10L3QvdCw0Y8ga3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPINC30LDQtNCw0YfQsCDQvtCx0YPRh9C10L3QuNGPINC4INC40L3RhNC10YDQtdC90YHQsC4g0KHQvdC40LbQtdC90LjQtSDRgNCw0YHRhdC+0LTQvtCyINC4INC/0L7QstGL0YjQtdC90LjQtSDRg9GC0LjQu9C40LfQsNGG0LjQuCDRgNC10YHRg9GA0YHQvtCyINC60LvQsNGB0YLQtdGA0LAuXCIgLz5cbiAgICAgOVx0ICAgIDxtZXRhIG5hbWU9XCJhdXRob3JcIiBjb250ZW50PVwiTm92YSBBSVwiIC8+XG4gICAgMTBcdFxuICAgIDExXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0aXRsZVwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0gS3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPIEFJL01MXCIgLz5cbiAgICAxMlx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6ZGVzY3JpcHRpb25cIiBjb250ZW50PVwiTm92YSBBSSAtINC/0YDQtdC00L3QsNGB0YLRgNC+0LXQvdC90LDRjyBrdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8g0LfQsNC00LDRh9CwINC+0LHRg9GH0LXQvdC40Y8g0Lgg0LjQvdGE0LXRgNC10L3RgdCwLiDQodC90LjQttC10L3QuNC1INGA0LDRgdGF0L7QtNC+0LIg0Lgg0L/QvtCy0YvRiNC10L3QuNC1INGD0YLQuNC70LjQt9Cw0YbQuNC4INGA0LXRgdGD0YDRgdC+0LIg0LrQu9Cw0YHRgtC10YDQsC5cIiAvPlxuICAgIDEzXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0eXBlXCIgY29udGVudD1cIndlYnNpdGVcIiAvPlxuICAgIDE0XHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzppbWFnZVwiIGNvbnRlbnQ9XCJodHRwczovL2xvdmFibGUuZGV2L29wZW5ncmFwaC1pbWFnZS1wOThwcWcucG5nXCIgLz5cbiAgICAxNVx0XG4gICAgMTZcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjpjYXJkXCIgY29udGVudD1cInN1bW1hcnlfbGFyZ2VfaW1hZ2VcIiAvPlxuICAgIDE3XHQgICAgPG1ldGEgbmFtZT1cInR3aXR0ZXI6c2l0ZVwiIGNvbnRlbnQ9XCJAbG92YWJsZV9kZXZcIiAvPlxuICAgIDE4XHQgICAgPG1ldGEgbmFtZT1cInR3aXR0ZXI6aW1hZ2VcIiBjb250ZW50PVwiaHR0cHM6Ly9sb3ZhYmxlLmRldi9vcGVuZ3JhcGgtaW1hZ2UtcDk4cHFnLnBuZ1wiIC8+XG4gICAgMTlcdFxuICAgIDIwXHQgICAgPGxpbmsgcmVsPVwicHJlY29ubmVjdFwiIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tXCI+XG4gICAgMjFcdCAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb21cIiBjcm9zc29yaWdpbj5cbiAgICAyMlx0ICAgIDxsaW5rIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUludGVyOndnaHRANDAwOzUwMDs2MDA7NzAwJmRpc3BsYXk9c3dhcFwiIHJlbD1cInN0eWxlc2hlZXRcIj5cbiAgICAyM1x0ICAgIDxzY3JpcHQgdHlwZT1cIm1vZHVsZVwiIGNyb3Nzb3JpZ2luIHNyYz1cIi9zaXRlLW5vdmEvYXNzZXRzL2luZGV4LUNYSnk4NWI3LmpzXCI+PC9zY3JpcHQ+XG4gICAgMjRcdCAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgY3Jvc3NvcmlnaW4gaHJlZj1cIi9zaXRlLW5vdmEvYXNzZXRzL2luZGV4LUJERlZwS0RtLmNzc1wiPlxuICAgIDI1XHQgIDwvaGVhZD5cbiAgICAyNlx0XG4gICAgMjdcdCAgPGJvZHk+XG4gICAgMjhcdCAgICA8ZGl2IGlkPVwicm9vdFwiPjwvZGl2PlxuICAgIDI5XHQgICAgPCEtLSBJTVBPUlRBTlQ6IERPIE5PVCBSRU1PVkUgVEhJUyBTQ1JJUFQgVEFHIE9SIFRISVMgVkVSWSBDT01NRU5UISAtLT5cbiAgICAzMFx0ICAgIDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly9jZG4uZ3B0ZW5nLmNvL2dwdGVuZ2luZWVyLmpzXCIgdHlwZT1cIm1vZHVsZVwiPjwvc2NyaXB0PlxuICAgIDMxXHQgIDwvYm9keT5cbiAgICAzMlx0PC9odG1sPlxuICAgIDMzXHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDMzXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFGNk1tZ3VvTXNwNGNBc1B2NVpIOEpDIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjU0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDozMzo0Mi4yMjFaIiwicmVzcG9uc2VfdGV4dCI6ItCvINC30LDQvNC10YLQuNC7INC/0L7RgtC10L3RhtC40LDQu9GM0L3Rg9GOINC/0YDQvtCx0LvQtdC80YMuINCSINGB0L7QsdGA0LDQvdC90L7QvCDRhNCw0LnQu9C1IGBkaXN0L2luZGV4Lmh0bWxgINC10YHRgtGMINGB0LrRgNC40L/RgiDQvtGCIEdQVCBFbmdpbmVlcjpcblxuYGBgaHRtbFxuPHNjcmlwdCBzcmM9XCJodHRwczovL2Nkbi5ncHRlbmcuY28vZ3B0ZW5naW5lZXIuanNcIiB0eXBlPVwibW9kdWxlXCI+PC9zY3JpcHQ+XG5gYGBcblxu0K3RgtC+0YIg0YHQutGA0LjQv9GCINC80L7QttC10YIg0LrQvtC90YTQu9C40LrRgtC+0LLQsNGC0Ywg0YEg0LLQsNGI0LjQvCDQv9GA0LjQu9C+0LbQtdC90LjQtdC8INC40LvQuCDQsdC70L7QutC40YDQvtCy0LDRgtGM0YHRjyDQv9C+INC60LDQutC40Lwt0YLQviDQv9GA0LjRh9C40L3QsNC8LiDQlNCw0LLQsNC50YLQtSDRg9C00LDQu9C40Lwg0LXQs9C+INC40Lcg0LjRgdGF0L7QtNC90L7Qs9C+INGE0LDQudC70LAgYGluZGV4Lmh0bWxgINC4INC/0LXRgNC10YHQvtCx0LXRgNC10Lwg0L/RgNC+0LXQutGCOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjNjNzQ3ODE1LTdiMjktNGY0Ny05YWYxLTFlMDEyZDVhNjk4NiIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUU2VlRMTVRrRzluWFVpOWY4SjNoNHMiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwidml0ZS5jb25maWcudHNcIn0iLCJtY3Bfc2VydmVyX25hbWUiOiIiLCJtY3BfdG9vbF9uYW1lIjoiIn19LHsiaWQiOjAsInR5cGUiOjAsImNvbnRlbnQiOiLQotC10L/QtdGA0Ywg0LTQsNCy0LDQudGC0LUg0L/RgNC+0LLQtdGA0LjQvCwg0LXRgdGC0Ywg0LvQuCDQtNGA0YPQs9C40LUg0L/RgNC+0LHQu9C10LzRiyDQsiDQutC+0L3RhNC40LPRg9GA0LDRhtC40LguINCf0YDQvtCy0LXRgNC40Lwg0YTQsNC50LsgYHZpdGUuY29uZmlnLnRzYDpcbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgaW5kZXguaHRtbC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgMjNcdCAgPC9oZWFkPlxuICAgIDI0XHRcbiAgICAyNVx0ICA8Ym9keT5cbiAgICAyNlx0ICAgIDxkaXYgaWQ9XCJyb290XCI+PC9kaXY+XG4gICAgMjdcdCAgICA8IS0tIEdQVCBFbmdpbmVlciBzY3JpcHQgcmVtb3ZlZCAtLT5cbiAgICAyOFx0ICAgIDxzY3JpcHQgdHlwZT1cIm1vZHVsZVwiIHNyYz1cIi4vc3JjL21haW4udHN4XCI+PC9zY3JpcHQ+XG4gICAgMjlcdCAgPC9ib2R5PlxuICAgIDMwXHQ8L2h0bWw+XG4gICAgMzFcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDFNZTU3dHhXTDZ2YUt0RnlmSmNGNHVNIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjU0LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDozMzo1NS4xNzZaIiwicmVzcG9uc2VfdGV4dCI6ItCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDQv9GA0L7QstC10YDQuNC8LCDQtdGB0YLRjCDQu9C4INC00YDRg9Cz0LjQtSDQv9GA0L7QsdC70LXQvNGLINCyINC60L7QvdGE0LjQs9GD0YDQsNGG0LjQuC4g0J/RgNC+0LLQtdGA0LjQvCDRhNCw0LnQuyBgdml0ZS5jb25maWcudHNgOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjY3YjRiMzQxLWNkMDEtNGVjNC1iNjBmLWExOWI1ZDE5MzYxNSIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTJSaFo4eWJVb1V6Smo3ejlMOUptQmoiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwic3JjL21haW4udHN4XCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0JrQvtC90YTQuNCz0YPRgNCw0YbQuNGPIFZpdGUg0LLRi9Cz0LvRj9C00LjRgiDQv9GA0LDQstC40LvRjNC90L7QuSDRgSBgYmFzZTogJy9zaXRlLW5vdmEvJ2AuINCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDQv9GA0L7QstC10YDQuNC8INGE0LDQudC7IGBzcmMvbWFpbi50c3hgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiB2aXRlLmNvbmZpZy50czpcbiAgICAgMVx0aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbiAgICAgMlx0aW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjtcbiAgICAgM1x0aW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbiAgICAgNFx0XG4gICAgIDVcdC8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG4gICAgIDZcdGV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoeyBtb2RlIH0pID0+ICh7XG4gICAgIDdcdCAgYmFzZTogJy9zaXRlLW5vdmEvJyxcbiAgICAgOFx0ICBzZXJ2ZXI6IHtcbiAgICAgOVx0ICAgIGhvc3Q6IFwiOjpcIixcbiAgICAxMFx0ICAgIHBvcnQ6IDgwODAsXG4gICAgMTFcdCAgfSxcbiAgICAxMlx0ICBwbHVnaW5zOiBbXG4gICAgMTNcdCAgICByZWFjdCgpLFxuICAgIDE0XHQgIF0sXG4gICAgMTVcdCAgcmVzb2x2ZToge1xuICAgIDE2XHQgICAgYWxpYXM6IHtcbiAgICAxN1x0ICAgICAgXCJAXCI6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi9zcmNcIiksXG4gICAgMThcdCAgICB9LFxuICAgIDE5XHQgIH0sXG4gICAgMjBcdH0pKTtcbiAgICAyMVx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyMVxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxRTZWVExNVGtHOW5YVWk5ZjhKM2g0cyJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo1NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6MzQ6MDAuMDcwWiIsInJlc3BvbnNlX3RleHQiOiLQmtC+0L3RhNC40LPRg9GA0LDRhtC40Y8gVml0ZSDQstGL0LPQu9GP0LTQuNGCINC/0YDQsNCy0LjQu9GM0L3QvtC5INGBIGBiYXNlOiAnL3NpdGUtbm92YS8nYC4g0KLQtdC/0LXRgNGMINC00LDQstCw0LnRgtC1INC/0YDQvtCy0LXRgNC40Lwg0YTQsNC50LsgYHNyYy9tYWluLnRzeGA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiOTRjOGJkYmQtMDI3Zi00NmMxLTkwOGMtMmE2MjQ3NjM0NGU0IiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTkFSZ3pQcWNGenlac1YzSmQxUTZEWCIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwidmlld1wiLCBcInBhdGhcIjogXCJzcmMvQXBwLnRzeFwifSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCk0LDQudC7IGBtYWluLnRzeGAg0LLRi9Cz0LvRj9C00LjRgiDQvdC+0YDQvNCw0LvRjNC90L4uINCU0LDQstCw0LnRgtC1INC/0YDQvtCy0LXRgNC40LwgYEFwcC50c3hgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvbWFpbi50c3g6XG4gICAgIDFcdGltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50J1xuICAgICAyXHRpbXBvcnQgQXBwIGZyb20gJy4vQXBwLnRzeCdcbiAgICAgM1x0aW1wb3J0ICcuL2luZGV4LmNzcydcbiAgICAgNFx0XG4gICAgIDVcdGNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpISkucmVuZGVyKDxBcHAgLz4pO1xuICAgICA2XHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDZcbiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTJSaFo4eWJVb1V6Smo3ejlMOUptQmoifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NTQsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjM0OjA1Ljg0MloiLCJyZXNwb25zZV90ZXh0Ijoi0KTQsNC50LsgYG1haW4udHN4YCDQstGL0LPQu9GP0LTQuNGCINC90L7RgNC80LDQu9GM0L3Qvi4g0JTQsNCy0LDQudGC0LUg0L/RgNC+0LLQtdGA0LjQvCBgQXBwLnRzeGA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiZDA5ZTc2YmMtNTY2ZS00NjNiLWE4ZjEtYzVkZWZiMzIxYTFjIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxMTl0WndIQU01ZTZndzVtZkFxaGh3aSIsInRvb2xfbmFtZSI6InN0ci1yZXBsYWNlLWVkaXRvciIsImlucHV0X2pzb24iOiJ7XCJjb21tYW5kXCI6IFwic3RyX3JlcGxhY2VcIiwgXCJwYXRoXCI6IFwic3JjL0FwcC50c3hcIiwgXCJzdHJfcmVwbGFjZV9lbnRyaWVzXCI6IFt7XCJvbGRfc3RyXCI6IFwiICAgICAgPEJyb3dzZXJSb3V0ZXI+XCIsIFwibmV3X3N0clwiOiBcIiAgICAgIDxCcm93c2VyUm91dGVyIGJhc2VuYW1lPVxcXCIvc2l0ZS1ub3ZhXFxcIj5cIiwgXCJvbGRfc3RyX3N0YXJ0X2xpbmVfbnVtYmVyXCI6IDE2LCBcIm9sZF9zdHJfZW5kX2xpbmVfbnVtYmVyXCI6IDE2fV19IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0JLQvtGCINC/0YDQvtCx0LvQtdC80LAhINCSIGBBcHAudHN4YCDQuNGB0L/QvtC70YzQt9GD0LXRgtGB0Y8gYEJyb3dzZXJSb3V0ZXJgINCx0LXQtyDRg9GH0LXRgtCwINCx0LDQt9C+0LLQvtCz0L4g0L/Rg9GC0LguINCa0L7Qs9C00LAg0LLRiyDQtNC10L/Qu9C+0LjRgtC1INC90LAgR2l0SHViIFBhZ2VzINGBINCx0LDQt9C+0LLRi9C8INC/0YPRgtC10LwgYC9zaXRlLW5vdmEvYCwg0YDQvtGD0YLQtdGAINC90LUg0LfQvdCw0LXRgiDQvtCxINGN0YLQvtC8INCx0LDQt9C+0LLQvtC8INC/0YPRgtC4LCDRh9GC0L4g0L/RgNC40LLQvtC00LjRgiDQuiDQv9GA0L7QsdC70LXQvNCw0Lwg0YEg0LzQsNGA0YjRgNGD0YLQuNC30LDRhtC40LXQuS5cblxu0JTQsNCy0LDQudGC0LUg0LjRgdC/0YDQsNCy0LjQvCDRjdGC0L4sINC00L7QsdCw0LLQuNCyIGBiYXNlbmFtZWAg0LIgYEJyb3dzZXJSb3V0ZXJgOlxuIn0seyJpZCI6MiwidHlwZSI6MiwiY29udGVudCI6IiJ9LHsiaWQiOjMsInR5cGUiOjMsImNvbnRlbnQiOiIifV0sInNlZW5fc3RhdGUiOiJzZWVuIiwic3RydWN0dXJlZF9yZXF1ZXN0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6MSwidG9vbF9yZXN1bHRfbm9kZSI6eyJjb250ZW50IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvQXBwLnRzeDpcbiAgICAgMVx0aW1wb3J0IHsgVG9hc3RlciB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvdG9hc3RlclwiO1xuICAgICAyXHRpbXBvcnQgeyBUb2FzdGVyIGFzIFNvbm5lciB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvc29ubmVyXCI7XG4gICAgIDNcdGltcG9ydCB7IFRvb2x0aXBQcm92aWRlciB9IGZyb20gXCJAL2NvbXBvbmVudHMvdWkvdG9vbHRpcFwiO1xuICAgICA0XHRpbXBvcnQgeyBRdWVyeUNsaWVudCwgUXVlcnlDbGllbnRQcm92aWRlciB9IGZyb20gXCJAdGFuc3RhY2svcmVhY3QtcXVlcnlcIjtcbiAgICAgNVx0aW1wb3J0IHsgQnJvd3NlclJvdXRlciwgUm91dGVzLCBSb3V0ZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG4gICAgIDZcdGltcG9ydCBJbmRleCBmcm9tIFwiLi9wYWdlcy9JbmRleFwiO1xuICAgICA3XHRpbXBvcnQgTm90Rm91bmQgZnJvbSBcIi4vcGFnZXMvTm90Rm91bmRcIjtcbiAgICAgOFx0XG4gICAgIDlcdGNvbnN0IHF1ZXJ5Q2xpZW50ID0gbmV3IFF1ZXJ5Q2xpZW50KCk7XG4gICAgMTBcdFxuICAgIDExXHRjb25zdCBBcHAgPSAoKSA9PiAoXG4gICAgMTJcdCAgPFF1ZXJ5Q2xpZW50UHJvdmlkZXIgY2xpZW50PXtxdWVyeUNsaWVudH0+XG4gICAgMTNcdCAgICA8VG9vbHRpcFByb3ZpZGVyPlxuICAgIDE0XHQgICAgICA8VG9hc3RlciAvPlxuICAgIDE1XHQgICAgICA8U29ubmVyIC8+XG4gICAgMTZcdCAgICAgIDxCcm93c2VyUm91dGVyPlxuICAgIDE3XHQgICAgICAgIDxSb3V0ZXM+XG4gICAgMThcdCAgICAgICAgICA8Um91dGUgcGF0aD1cIi9cIiBlbGVtZW50PXs8SW5kZXggLz59IC8+XG4gICAgMTlcdCAgICAgICAgICB7LyogQUREIEFMTCBDVVNUT00gUk9VVEVTIEFCT1ZFIFRIRSBDQVRDSC1BTEwgXCIqXCIgUk9VVEUgKi99XG4gICAgMjBcdCAgICAgICAgICA8Um91dGUgcGF0aD1cIipcIiBlbGVtZW50PXs8Tm90Rm91bmQgLz59IC8+XG4gICAgMjFcdCAgICAgICAgPC9Sb3V0ZXM+XG4gICAgMjJcdCAgICAgIDwvQnJvd3NlclJvdXRlcj5cbiAgICAyM1x0ICAgIDwvVG9vbHRpcFByb3ZpZGVyPlxuICAgIDI0XHQgIDwvUXVlcnlDbGllbnRQcm92aWRlcj5cbiAgICAyNVx0KTtcbiAgICAyNlx0XG4gICAgMjdcdGV4cG9ydCBkZWZhdWx0IEFwcDtcbiAgICAyOFx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyOFxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxTkFSZ3pQcWNGenlac1YzSmQxUTZEWCJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo1NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6MzQ6MTAuMzkwWiIsInJlc3BvbnNlX3RleHQiOiLQktC+0YIg0L/RgNC+0LHQu9C10LzQsCEg0JIgYEFwcC50c3hgINC40YHQv9C+0LvRjNC30YPQtdGC0YHRjyBgQnJvd3NlclJvdXRlcmAg0LHQtdC3INGD0YfQtdGC0LAg0LHQsNC30L7QstC+0LPQviDQv9GD0YLQuC4g0JrQvtCz0LTQsCDQstGLINC00LXQv9C70L7QuNGC0LUg0L3QsCBHaXRIdWIgUGFnZXMg0YEg0LHQsNC30L7QstGL0Lwg0L/Rg9GC0LXQvCBgL3NpdGUtbm92YS9gLCDRgNC+0YPRgtC10YAg0L3QtSDQt9C90LDQtdGCINC+0LEg0Y3RgtC+0Lwg0LHQsNC30L7QstC+0Lwg0L/Rg9GC0LgsINGH0YLQviDQv9GA0LjQstC+0LTQuNGCINC6INC/0YDQvtCx0LvQtdC80LDQvCDRgSDQvNCw0YDRiNGA0YPRgtC40LfQsNGG0LjQtdC5LlxuXG7QlNCw0LLQsNC50YLQtSDQuNGB0L/RgNCw0LLQuNC8INGN0YLQviwg0LTQvtCx0LDQstC40LIgYGJhc2VuYW1lYCDQsiBgQnJvd3NlclJvdXRlcmA6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiN2U0Yjg3ZGEtYzEyMy00ZjI2LTg1ZWYtYTRmNTMzY2ViNzFlIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjo1LCJjb250ZW50IjoiIiwidG9vbF91c2UiOnsidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxQnJ1bzlHMkFFUFZ5S0pVREp4ODJ0aSIsInRvb2xfbmFtZSI6ImxhdW5jaC1wcm9jZXNzIiwiaW5wdXRfanNvbiI6IntcImNvbW1hbmRcIjogXCJucG0gcnVuIGJ1aWxkXCIsIFwid2FpdFwiOiB0cnVlLCBcIm1heF93YWl0X3NlY29uZHNcIjogMzAwfSIsIm1jcF9zZXJ2ZXJfbmFtZSI6IiIsIm1jcF90b29sX25hbWUiOiIifX0seyJpZCI6MCwidHlwZSI6MCwiY29udGVudCI6ItCi0LXQv9C10YDRjCDQtNCw0LLQsNC50YLQtSDRgdC+0LHQtdGA0LXQvCDQv9GA0L7QtdC60YIsINGH0YLQvtCx0Ysg0L/RgNC+0LLQtdGA0LjRgtGMLCDRh9GC0L4g0LjQt9C80LXQvdC10L3QuNGPINC/0YDQuNC80LXQvdC40LvQuNGB0Yw6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9BcHAudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAxMlx0ICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e3F1ZXJ5Q2xpZW50fT5cbiAgICAxM1x0ICAgIDxUb29sdGlwUHJvdmlkZXI+XG4gICAgMTRcdCAgICAgIDxUb2FzdGVyIC8+XG4gICAgMTVcdCAgICAgIDxTb25uZXIgLz5cbiAgICAxNlx0ICAgICAgPEJyb3dzZXJSb3V0ZXIgYmFzZW5hbWU9XCIvc2l0ZS1ub3ZhXCI+XG4gICAgMTdcdCAgICAgICAgPFJvdXRlcz5cbiAgICAxOFx0ICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxJbmRleCAvPn0gLz5cbiAgICAxOVx0ICAgICAgICAgIHsvKiBBREQgQUxMIENVU1RPTSBST1VURVMgQUJPVkUgVEhFIENBVENILUFMTCBcIipcIiBST1VURSAqL31cbiAgICAyMFx0ICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiKlwiIGVsZW1lbnQ9ezxOb3RGb3VuZCAvPn0gLz5cblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNfZXJyb3IiOmZhbHNlLCJyZXF1ZXN0X2lkIjoiIiwidG9vbF91c2VfaWQiOiJ0b29sdV92cnR4XzAxMTl0WndIQU01ZTZndzVtZkFxaGh3aSJ9fSx7ImlkIjoyLCJ0eXBlIjo0LCJpZGVfc3RhdGVfbm9kZSI6eyJ3b3Jrc3BhY2VGb2xkZXJzIjpbeyJyZXBvc2l0b3J5Um9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEiLCJmb2xkZXJSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9XSwid29ya3NwYWNlRm9sZGVyc1VuY2hhbmdlZCI6ZmFsc2UsImN1cnJlbnRUZXJtaW5hbCI6eyJ0ZXJtaW5hbElkIjo1NCwiY3VycmVudFdvcmtpbmdEaXJlY3RvcnkiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn19fV0sInRpbWVzdGFtcCI6IjIwMjUtMDUtMTRUMTQ6MzQ6MTcuNTcwWiIsInJlc3BvbnNlX3RleHQiOiLQotC10L/QtdGA0Ywg0LTQsNCy0LDQudGC0LUg0YHQvtCx0LXRgNC10Lwg0L/RgNC+0LXQutGCLCDRh9GC0L7QsdGLINC/0YDQvtCy0LXRgNC40YLRjCwg0YfRgtC+INC40LfQvNC10L3QtdC90LjRjyDQv9GA0LjQvNC10L3QuNC70LjRgdGMOlxuIiwid29ya3NwYWNlX2ZpbGVfY2h1bmtzIjpbXX0seyJzdGF0dXMiOiJzdWNjZXNzIiwicmVxdWVzdF9pZCI6IjI1MjRlMDI0LTQ0NjgtNDQ1My05ZjY0LWIxNjNhZDBlNTA4YyIsInJlcXVlc3RfbWVzc2FnZSI6IiIsInN0cnVjdHVyZWRfb3V0cHV0X25vZGVzIjpbeyJpZCI6MSwidHlwZSI6NSwiY29udGVudCI6IiIsInRvb2xfdXNlIjp7InRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMTF2NjVKdjVtTDlEekJQZUQ5VGJ6WlYiLCJ0b29sX25hbWUiOiJzdHItcmVwbGFjZS1lZGl0b3IiLCJpbnB1dF9qc29uIjoie1wiY29tbWFuZFwiOiBcInZpZXdcIiwgXCJwYXRoXCI6IFwiZGlzdC9pbmRleC5odG1sXCJ9IiwibWNwX3NlcnZlcl9uYW1lIjoiIiwibWNwX3Rvb2xfbmFtZSI6IiJ9fSx7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0KLQtdC/0LXRgNGMINC00LDQstCw0LnRgtC1INC/0YDQvtCy0LXRgNC40Lwg0YHQvtCx0YDQsNC90L3Ri9C5INGE0LDQudC7IGluZGV4Lmh0bWw6XG4ifSx7ImlkIjoyLCJ0eXBlIjoyLCJjb250ZW50IjoiIn0seyJpZCI6MywidHlwZSI6MywiY29udGVudCI6IiJ9XSwic2Vlbl9zdGF0ZSI6InNlZW4iLCJzdHJ1Y3R1cmVkX3JlcXVlc3Rfbm9kZXMiOlt7ImlkIjoxLCJ0eXBlIjoxLCJ0b29sX3Jlc3VsdF9ub2RlIjp7ImNvbnRlbnQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbiAgICAgICAgPHJldHVybi1jb2RlPlxuICAgICAgICAwXG4gICAgICAgIDwvcmV0dXJuLWNvZGU+XG4gICAgICAgIDxzdGRvdXQ+XG4gICAgICAgIFxuPiB2aXRlX3JlYWN0X3NoYWRjbl90c0AwLjAuMCBidWlsZFxuPiB2aXRlIGJ1aWxkXG5cblx1MDAxYlsxR1x1MDAxYlswS1x1MDAxYlszNm12aXRlIHY1LjQuMTAgXHUwMDFiWzMybWJ1aWxkaW5nIGZvciBwcm9kdWN0aW9uLi4uXHUwMDFiWzM2bVx1MDAxYlszOW1cblx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMSkgXHUwMDFiWzJtaW5kZXguaHRtbFx1MDAxYlsyMm1Ccm93c2Vyc2xpc3Q6IGJyb3dzZXJzIGRhdGEgKGNhbml1c2UtbGl0ZSkgaXMgNyBtb250aHMgb2xkLiBQbGVhc2UgcnVuOlxuICBucHggdXBkYXRlLWJyb3dzZXJzbGlzdC1kYkBsYXRlc3RcbiAgV2h5IHlvdSBzaG91bGQgZG8gaXQgcmVndWxhcmx5OiBodHRwczovL2dpdGh1Yi5jb20vYnJvd3NlcnNsaXN0L3VwZGF0ZS1kYiNyZWFkbWVcblx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoOCkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9tb2Rlcm4vdHlwZXMuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgyOCkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9tb2Rlcm4vdXNlU3VzcGVuc2VJbmZpbml0ZVF1ZXJ5LmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoNzcpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9AcmFkaXgtdWkvcmVhY3QtcG9ydGFsL2Rpc3QvaW5kZXgubWpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMjQxKSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL3NxdWFyZS1jaGFydC1nYW50dC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDEwMjApIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvbGV0dGVyLXRleHQuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxNjc1KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvcmVjaGFydHMvZXM2L3BvbGFyL1BvbGFyR3JpZC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDE3MzQpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9yZWNoYXJ0cy9lczYvdXRpbC9Qb2xhclV0aWxzLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTg5NikgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgyMjMwKSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbG9kYXNoL19pc01hc2tlZC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMzJt4pyTXHUwMDFiWzM5bSAyNDgxIG1vZHVsZXMgdHJhbnNmb3JtZWQuXG5cdTAwMWJbMktcdTAwMWJbMUdyZW5kZXJpbmcgY2h1bmtzICgxKS4uLlx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR2NvbXB1dGluZyBnemlwIHNpemUgKDApLi4uXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMSkuLi5cdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgyKS4uLlx1MDAxYlsyS1x1MDAxYlsxR2NvbXB1dGluZyBnemlwIHNpemUgKDMpLi4uXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJtZGlzdC9cdTAwMWJbMjJtXHUwMDFiWzMybWluZGV4Lmh0bWwgICAgICAgICAgICAgICAgIFx1MDAxYlszOW1cdTAwMWJbMW1cdTAwMWJbMm0gIDEuNTkga0JcdTAwMWJbMjJtXHUwMDFiWzFtXHUwMDFiWzIybVx1MDAxYlsybSDilIIgZ3ppcDogICAwLjczIGtCXHUwMDFiWzIybVxuXHUwMDFiWzJtZGlzdC9cdTAwMWJbMjJtXHUwMDFiWzJtYXNzZXRzL1x1MDAxYlsyMm1cdTAwMWJbMzVtaW5kZXgtQkRGVnBLRG0uY3NzICBcdTAwMWJbMzltXHUwMDFiWzFtXHUwMDFiWzJtIDcxLjQyIGtCXHUwMDFiWzIybVx1MDAxYlsxbVx1MDAxYlsyMm1cdTAwMWJbMm0g4pSCIGd6aXA6ICAxMi4zNiBrQlx1MDAxYlsyMm1cblx1MDAxYlsybWRpc3QvXHUwMDFiWzIybVx1MDAxYlsybWFzc2V0cy9cdTAwMWJbMjJtXHUwMDFiWzM2bWluZGV4LURyVjlNbmpZLmpzICAgXHUwMDFiWzM5bVx1MDAxYlsxbVx1MDAxYlszM203MzcuNDIga0JcdTAwMWJbMzltXHUwMDFiWzIybVx1MDAxYlsybSDilIIgZ3ppcDogMjE1Ljg4IGtCXHUwMDFiWzIybVxuXHUwMDFiWzMzbVxuKCEpIFNvbWUgY2h1bmtzIGFyZSBsYXJnZXIgdGhhbiA1MDAga0IgYWZ0ZXIgbWluaWZpY2F0aW9uLiBDb25zaWRlcjpcbi0gVXNpbmcgZHluYW1pYyBpbXBvcnQoKSB0byBjb2RlLXNwbGl0IHRoZSBhcHBsaWNhdGlvblxuLSBVc2UgYnVpbGQucm9sbHVwT3B0aW9ucy5vdXRwdXQubWFudWFsQ2h1bmtzIHRvIGltcHJvdmUgY2h1bmtpbmc6IGh0dHBzOi8vcm9sbHVwanMub3JnL2NvbmZpZ3VyYXRpb24tb3B0aW9ucy8jb3V0cHV0LW1hbnVhbGNodW5rc1xuLSBBZGp1c3QgY2h1bmsgc2l6ZSBsaW1pdCBmb3IgdGhpcyB3YXJuaW5nIHZpYSBidWlsZC5jaHVua1NpemVXYXJuaW5nTGltaXQuXHUwMDFiWzM5bVxuXHUwMDFiWzMybeKckyBidWlsdCBpbiAxLjg4c1x1MDAxYlszOW1cblx1MDAxYlsxR1x1MDAxYlswS+KgmVx1MDAxYlsxR1x1MDAxYlswS1xuICAgICAgICA8L3N0ZG91dD5cbiAgICAgICAgPHN0ZGVycj5cbiAgICAgICAgXG4gICAgICAgIDwvc3RkZXJyPiIsImlzX2Vycm9yIjpmYWxzZSwicmVxdWVzdF9pZCI6IiIsInRvb2xfdXNlX2lkIjoidG9vbHVfdnJ0eF8wMUJydW85RzJBRVBWeUtKVURKeDgydGkifX0seyJpZCI6MiwidHlwZSI6NCwiaWRlX3N0YXRlX25vZGUiOnsid29ya3NwYWNlRm9sZGVycyI6W3sicmVwb3NpdG9yeVJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIiwiZm9sZGVyUm9vdCI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifV0sIndvcmtzcGFjZUZvbGRlcnNVbmNoYW5nZWQiOmZhbHNlLCJjdXJyZW50VGVybWluYWwiOnsidGVybWluYWxJZCI6NTUsImN1cnJlbnRXb3JraW5nRGlyZWN0b3J5IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSJ9fX1dLCJ0aW1lc3RhbXAiOiIyMDI1LTA1LTE0VDE0OjM0OjI0LjQ4OFoiLCJyZXNwb25zZV90ZXh0Ijoi0KLQtdC/0LXRgNGMINC00LDQstCw0LnRgtC1INC/0YDQvtCy0LXRgNC40Lwg0YHQvtCx0YDQsNC90L3Ri9C5INGE0LDQudC7IGluZGV4Lmh0bWw6XG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InN0YXR1cyI6InN1Y2Nlc3MiLCJyZXF1ZXN0X2lkIjoiNTQ5ZTU2NTktZTczNy00OGZmLWFhYzgtNDU1NDUwYjYwMTIyIiwicmVxdWVzdF9tZXNzYWdlIjoiIiwic3RydWN0dXJlZF9vdXRwdXRfbm9kZXMiOlt7ImlkIjowLCJ0eXBlIjowLCJjb250ZW50Ijoi0J7RgtC70LjRh9C90L4hINCvINC90LDRiNC10Lsg0Lgg0LjRgdC/0YDQsNCy0LjQuyDQtNCy0LUg0L7RgdC90L7QstC90YvQtSDQv9GA0L7QsdC70LXQvNGLLCDQutC+0YLQvtGA0YvQtSDQvNC+0LPQu9C4INCy0YvQt9GL0LLQsNGC0Ywg0LHQtdC70YPRjiDRgdGC0YDQsNC90LjRhtGDINC/0YDQuCDQtNC10L/Qu9C+0LUg0L3QsCBHaXRIdWIgUGFnZXM6XG5cbjEuICoq0KPQtNCw0LvQtdC9INGB0LrRgNC40L/RgiBHUFQgRW5naW5lZXIqKjog0KHQutGA0LjQv9GCIGBodHRwczovL2Nkbi5ncHRlbmcuY28vZ3B0ZW5naW5lZXIuanNgINCx0YvQuyDRg9C00LDQu9C10L0g0LjQtyBIVE1MLCDRgtCw0Log0LrQsNC6INC+0L0g0LzQvtCzINC60L7QvdGE0LvQuNC60YLQvtCy0LDRgtGMINGBINCy0LDRiNC40Lwg0L/RgNC40LvQvtC20LXQvdC40LXQvCDQuNC70Lgg0LHQu9C+0LrQuNGA0L7QstCw0YLRjNGB0Y8uXG5cbjIuICoq0JTQvtCx0LDQstC70LXQvSBiYXNlbmFtZSDQsiBCcm93c2VyUm91dGVyKio6INCSINC60L7QvNC/0L7QvdC10L3RgtC1IGBBcHAudHN4YCDQsdGL0Lsg0LTQvtCx0LDQstC70LXQvSBgYmFzZW5hbWU9XCIvc2l0ZS1ub3ZhXCJgINCyIGBCcm93c2VyUm91dGVyYCwg0YfRgtC+0LHRiyBSZWFjdCBSb3V0ZXIg0LfQvdCw0Lsg0L4g0LHQsNC30L7QstC+0Lwg0L/Rg9GC0Lgg0LLQsNGI0LXQs9C+INC/0YDQuNC70L7QttC10L3QuNGPINC90LAgR2l0SHViIFBhZ2VzLlxuXG7QrdGC0Lgg0LjQt9C80LXQvdC10L3QuNGPINC00L7Qu9C20L3RiyDRgNC10YjQuNGC0Ywg0L/RgNC+0LHQu9C10LzRgyDRgSDQsdC10LvQvtC5INGB0YLRgNCw0L3QuNGG0LXQuSDQv9GA0Lgg0LTQtdC/0LvQvtC1INC90LAgR2l0SHViIFBhZ2VzLiDQn9C+0YHQu9C1INCy0L3QtdGB0LXQvdC40Y8g0Y3RgtC40YUg0LjQt9C80LXQvdC10L3QuNC5INCy0LDQvCDQvdGD0LbQvdC+OlxuXG4xLiDQl9Cw0LrQvtC80LzQuNGC0LjRgtGMINC40LfQvNC10L3QtdC90LjRj1xuMi4g0JfQsNC/0YPRgdGC0LjRgtGMINGB0LHQvtGA0LrRgyDQv9GA0L7QtdC60YLQsDogYG5wbSBydW4gYnVpbGRgXG4zLiDQl9Cw0LTQtdC/0LvQvtC40YLRjCDQvdCwIEdpdEh1YiBQYWdlcyDRgSDQv9C+0LzQvtGJ0YzRjiDQstGL0LHRgNCw0L3QvdC+0LPQviDQstCw0LzQuCDQvNC10YLQvtC00LBcblxu0JXRgdC70Lgg0L/QvtGB0LvQtSDRjdGC0LjRhSDQuNC30LzQtdC90LXQvdC40Lkg0L/RgNC+0LHQu9C10LzQsCDQstGB0LUg0LXRidC1INGB0L7RhdGA0LDQvdGP0LXRgtGB0Y8sINGA0LXQutC+0LzQtdC90LTRg9GOINC/0YDQvtCy0LXRgNC40YLRjCDQutC+0L3RgdC+0LvRjCDQsdGA0LDRg9C30LXRgNCwINC90LAg0L3QsNC70LjRh9C40LUg0L7RiNC40LHQvtC6INC/0YDQuCDQt9Cw0LPRgNGD0LfQutC1INGB0YLRgNCw0L3QuNGG0Ysg0L3QsCBHaXRIdWIgUGFnZXMg0Lgg0YHQvtC+0LHRidC40YLRjCDQvNC90LUg0L7QsSDRjdGC0LjRhSDQvtGI0LjQsdC60LDRhSDQtNC70Y8g0LTQsNC70YzQvdC10LnRiNC10LPQviDQsNC90LDQu9C40LfQsC5cbiJ9LHsiaWQiOjIsInR5cGUiOjIsImNvbnRlbnQiOiIifSx7ImlkIjozLCJ0eXBlIjozLCJjb250ZW50IjoiIn1dLCJzZWVuX3N0YXRlIjoic2VlbiIsInN0cnVjdHVyZWRfcmVxdWVzdF9ub2RlcyI6W3siaWQiOjEsInR5cGUiOjEsInRvb2xfcmVzdWx0X25vZGUiOnsiY29udGVudCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gZGlzdC9pbmRleC5odG1sOlxuICAgICAxXHRcbiAgICAgMlx0PCFET0NUWVBFIGh0bWw+XG4gICAgIDNcdDxodG1sIGxhbmc9XCJydVwiPlxuICAgICA0XHQgIDxoZWFkPlxuICAgICA1XHQgICAgPG1ldGEgY2hhcnNldD1cIlVURi04XCIgLz5cbiAgICAgNlx0ICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXCIgLz5cbiAgICAgN1x0ICAgIDx0aXRsZT5Ob3ZhIEFJIC0gS3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPIEFJL01MPC90aXRsZT5cbiAgICAgOFx0ICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgIDlcdCAgICA8bWV0YSBuYW1lPVwiYXV0aG9yXCIgY29udGVudD1cIk5vdmEgQUlcIiAvPlxuICAgIDEwXHRcbiAgICAxMVx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PVwiTm92YSBBSSAtIEt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyBBSS9NTFwiIC8+XG4gICAgMTJcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmRlc2NyaXB0aW9uXCIgY29udGVudD1cIk5vdmEgQUkgLSDQv9GA0LXQtNC90LDRgdGC0YDQvtC10L3QvdCw0Y8ga3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPINC30LDQtNCw0YfQsCDQvtCx0YPRh9C10L3QuNGPINC4INC40L3RhNC10YDQtdC90YHQsC4g0KHQvdC40LbQtdC90LjQtSDRgNCw0YHRhdC+0LTQvtCyINC4INC/0L7QstGL0YjQtdC90LjQtSDRg9GC0LjQu9C40LfQsNGG0LjQuCDRgNC10YHRg9GA0YHQvtCyINC60LvQsNGB0YLQtdGA0LAuXCIgLz5cbiAgICAxM1x0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dHlwZVwiIGNvbnRlbnQ9XCJ3ZWJzaXRlXCIgLz5cbiAgICAxNFx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6aW1hZ2VcIiBjb250ZW50PVwiaHR0cHM6Ly9sb3ZhYmxlLmRldi9vcGVuZ3JhcGgtaW1hZ2UtcDk4cHFnLnBuZ1wiIC8+XG4gICAgMTVcdFxuICAgIDE2XHQgICAgPG1ldGEgbmFtZT1cInR3aXR0ZXI6Y2FyZFwiIGNvbnRlbnQ9XCJzdW1tYXJ5X2xhcmdlX2ltYWdlXCIgLz5cbiAgICAxN1x0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOnNpdGVcIiBjb250ZW50PVwiQGxvdmFibGVfZGV2XCIgLz5cbiAgICAxOFx0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmltYWdlXCIgY29udGVudD1cImh0dHBzOi8vbG92YWJsZS5kZXYvb3BlbmdyYXBoLWltYWdlLXA5OHBxZy5wbmdcIiAvPlxuICAgIDE5XHRcbiAgICAyMFx0ICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbVwiPlxuICAgIDIxXHQgICAgPGxpbmsgcmVsPVwicHJlY29ubmVjdFwiIGhyZWY9XCJodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tXCIgY3Jvc3NvcmlnaW4+XG4gICAgMjJcdCAgICA8bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1JbnRlcjp3Z2h0QDQwMDs1MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCI+XG4gICAgMjNcdCAgICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBjcm9zc29yaWdpbiBzcmM9XCIvc2l0ZS1ub3ZhL2Fzc2V0cy9pbmRleC1EclY5TW5qWS5qc1wiPjwvc2NyaXB0PlxuICAgIDI0XHQgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGNyb3Nzb3JpZ2luIGhyZWY9XCIvc2l0ZS1ub3ZhL2Fzc2V0cy9pbmRleC1CREZWcEtEbS5jc3NcIj5cbiAgICAyNVx0ICA8L2hlYWQ+XG4gICAgMjZcdFxuICAgIDI3XHQgIDxib2R5PlxuICAgIDI4XHQgICAgPGRpdiBpZD1cInJvb3RcIj48L2Rpdj5cbiAgICAyOVx0ICAgIDwhLS0gR1BUIEVuZ2luZWVyIHNjcmlwdCByZW1vdmVkIC0tPlxuICAgIDMwXHQgIDwvYm9keT5cbiAgICAzMVx0PC9odG1sPlxuICAgIDMyXHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDMyXG4iLCJpc19lcnJvciI6ZmFsc2UsInJlcXVlc3RfaWQiOiIiLCJ0b29sX3VzZV9pZCI6InRvb2x1X3ZydHhfMDExdjY1SnY1bUw5RHpCUGVEOVRielpWIn19LHsiaWQiOjIsInR5cGUiOjQsImlkZV9zdGF0ZV9ub2RlIjp7IndvcmtzcGFjZUZvbGRlcnMiOlt7InJlcG9zaXRvcnlSb290IjoiL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YSIsImZvbGRlclJvb3QiOiIvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhIn1dLCJ3b3Jrc3BhY2VGb2xkZXJzVW5jaGFuZ2VkIjpmYWxzZSwiY3VycmVudFRlcm1pbmFsIjp7InRlcm1pbmFsSWQiOjU1LCJjdXJyZW50V29ya2luZ0RpcmVjdG9yeSI6Ii9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEifX19XSwidGltZXN0YW1wIjoiMjAyNS0wNS0xNFQxNDozNDoyOS4wNzFaIiwicmVzcG9uc2VfdGV4dCI6ItCe0YLQu9C40YfQvdC+ISDQryDQvdCw0YjQtdC7INC4INC40YHQv9GA0LDQstC40Lsg0LTQstC1INC+0YHQvdC+0LLQvdGL0LUg0L/RgNC+0LHQu9C10LzRiywg0LrQvtGC0L7RgNGL0LUg0LzQvtCz0LvQuCDQstGL0LfRi9Cy0LDRgtGMINCx0LXQu9GD0Y4g0YHRgtGA0LDQvdC40YbRgyDQv9GA0Lgg0LTQtdC/0LvQvtC1INC90LAgR2l0SHViIFBhZ2VzOlxuXG4xLiAqKtCj0LTQsNC70LXQvSDRgdC60YDQuNC/0YIgR1BUIEVuZ2luZWVyKio6INCh0LrRgNC40L/RgiBgaHR0cHM6Ly9jZG4uZ3B0ZW5nLmNvL2dwdGVuZ2luZWVyLmpzYCDQsdGL0Lsg0YPQtNCw0LvQtdC9INC40LcgSFRNTCwg0YLQsNC6INC60LDQuiDQvtC9INC80L7QsyDQutC+0L3RhNC70LjQutGC0L7QstCw0YLRjCDRgSDQstCw0YjQuNC8INC/0YDQuNC70L7QttC10L3QuNC10Lwg0LjQu9C4INCx0LvQvtC60LjRgNC+0LLQsNGC0YzRgdGPLlxuXG4yLiAqKtCU0L7QsdCw0LLQu9C10L0gYmFzZW5hbWUg0LIgQnJvd3NlclJvdXRlcioqOiDQkiDQutC+0LzQv9C+0L3QtdC90YLQtSBgQXBwLnRzeGAg0LHRi9C7INC00L7QsdCw0LLQu9C10L0gYGJhc2VuYW1lPVwiL3NpdGUtbm92YVwiYCDQsiBgQnJvd3NlclJvdXRlcmAsINGH0YLQvtCx0YsgUmVhY3QgUm91dGVyINC30L3QsNC7INC+INCx0LDQt9C+0LLQvtC8INC/0YPRgtC4INCy0LDRiNC10LPQviDQv9GA0LjQu9C+0LbQtdC90LjRjyDQvdCwIEdpdEh1YiBQYWdlcy5cblxu0K3RgtC4INC40LfQvNC10L3QtdC90LjRjyDQtNC+0LvQttC90Ysg0YDQtdGI0LjRgtGMINC/0YDQvtCx0LvQtdC80YMg0YEg0LHQtdC70L7QuSDRgdGC0YDQsNC90LjRhtC10Lkg0L/RgNC4INC00LXQv9C70L7QtSDQvdCwIEdpdEh1YiBQYWdlcy4g0J/QvtGB0LvQtSDQstC90LXRgdC10L3QuNGPINGN0YLQuNGFINC40LfQvNC10L3QtdC90LjQuSDQstCw0Lwg0L3Rg9C20L3QvjpcblxuMS4g0JfQsNC60L7QvNC80LjRgtC40YLRjCDQuNC30LzQtdC90LXQvdC40Y9cbjIuINCX0LDQv9GD0YHRgtC40YLRjCDRgdCx0L7RgNC60YMg0L/RgNC+0LXQutGC0LA6IGBucG0gcnVuIGJ1aWxkYFxuMy4g0JfQsNC00LXQv9C70L7QuNGC0Ywg0L3QsCBHaXRIdWIgUGFnZXMg0YEg0L/QvtC80L7RidGM0Y4g0LLRi9Cx0YDQsNC90L3QvtCz0L4g0LLQsNC80Lgg0LzQtdGC0L7QtNCwXG5cbtCV0YHQu9C4INC/0L7RgdC70LUg0Y3RgtC40YUg0LjQt9C80LXQvdC10L3QuNC5INC/0YDQvtCx0LvQtdC80LAg0LLRgdC1INC10YnQtSDRgdC+0YXRgNCw0L3Rj9C10YLRgdGPLCDRgNC10LrQvtC80LXQvdC00YPRjiDQv9GA0L7QstC10YDQuNGC0Ywg0LrQvtC90YHQvtC70Ywg0LHRgNCw0YPQt9C10YDQsCDQvdCwINC90LDQu9C40YfQuNC1INC+0YjQuNCx0L7QuiDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtSDRgdGC0YDQsNC90LjRhtGLINC90LAgR2l0SHViIFBhZ2VzINC4INGB0L7QvtCx0YnQuNGC0Ywg0LzQvdC1INC+0LEg0Y3RgtC40YUg0L7RiNC40LHQutCw0YUg0LTQu9GPINC00LDQu9GM0L3QtdC50YjQtdCz0L4g0LDQvdCw0LvQuNC30LAuXG4iLCJ3b3Jrc3BhY2VfZmlsZV9jaHVua3MiOltdfSx7InJlcXVlc3RfaWQiOiIwYTgyMDczZi1kODdkLTQzNTItYTE2ZC0zMTk3YWQ3OTFjNzkiLCJ1dWlkIjoiOTU3YzY3N2QtMzUxNC00ZmUwLThmZmYtMmNkNWZhYWVjNWIwIiwiY2hhdEl0ZW1UeXBlIjoiYWdlbnRpYy1jaGVja3BvaW50LWRlbGltaXRlciIsInN0YXR1cyI6InN1Y2Nlc3MiLCJmcm9tVGltZXN0YW1wIjoxNzQ3MjMyOTkyMDcwLCJ0b1RpbWVzdGFtcCI6MTc0NzIzMzI3ODQ3Niwic2Vlbl9zdGF0ZSI6InNlZW4ifV0sImZlZWRiYWNrU3RhdGVzIjp7InRlbXAtZmUtZGE0NzA4NDktODljNS00ODYyLTlhY2YtZWQ4NDExNDA1YWMzIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS01ZGZkYzgzYS1kNzdlLTQ4ZGMtODU2ZC01OGY2NWEzNDZiZTQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWJkN2I4Y2NhLTAzNmEtNDRlYi05ODFlLWMyODQ0YzA2NzE4MSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtMGY5MWYwZWYtZWFlYS00ZGM5LWI4ZjQtNWRjNzVlYzRiMjEyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0xYmQxYmY3OS1kZDU5LTRiYWEtOGNiMy1mNzRhMDk0NmNmNzgiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTNiMDkzYzgzLWY1NDctNDJkZS05OTY3LWIyODE5NDMyYmJhNSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNmZjODFlODAtNGI5NS00MTk1LTlhM2MtNDkxZWJjZDhkMjZhIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS04ZGIxNDljNS1hZjdkLTRiODctOWRiOS05MWNlODlmYTBkMjkiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLThmMWIzYzFmLWY0MDUtNDg0MC04NTVkLTliMTFkNjQzNDUzMCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtY2U2YTliMzAtYjEyZi00MzQ4LWJkMWItYmI0NTQxMGRhNzUxIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wNjBmZmIzNi1jNDgyLTRlMjgtODY4OC1iZWY4M2MxYTk3ZWYiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTgyNDdiMjcxLTljNjItNDQ4Zi05YmJhLWQ1NzlhM2Q3MmFiNSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNTgzZTgwYjMtMTZjYS00MzBmLTg4NTAtMTM5M2EzYzYyYWQ3Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0zMDA1NjQ3YS1kNTJmLTQ0ODUtYmIyNy05MTQ2MzBmOTM2YWQiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWQyOGY2NTljLTMyMzUtNGEzNS1iNDJiLTYwNjBiMDc4YWU0OCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtODNhY2E4NGEtMTViMC00N2Q4LWIyNDItZTc1ODU0N2Y4OGY5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS03NjNhOTYzOC1lYWMwLTRjNzgtYTM4Zi1jZjlkZTRkMjhmOGIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWQzMjljYjQ3LTQxMWUtNGMwMy1iYzg3LWRiZGQ1NDQ5ZGM1MCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtOGU5MGIxNzItMzZlZi00MjkxLTkwYzUtMWVmN2IyN2ExNjU3Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS1hNGMwMmNjNC04ZWYxLTRkMjgtYTRjMC01YzNiMDhiMTNhODYiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWQxZjQ3NGJmLTY2MzktNDYzNC1iM2Y4LTQ4MWY0ZjZkZDYwMCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNjI2ZDY2Y2ItZjZiZi00NzRiLWFmZjgtODlhYWY4YjNmNGE5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS02MGE4ZWI0OS0xOTFjLTQyZjYtOGNkNy1kYTY5YWUwN2UzZGYiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLWNmMjI3YjUwLTYyYTgtNGJiYi05NGJkLWVlMjk4YmY0NDE3OCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNTIzOTEyNWMtZDQ3NC00MzkyLTlhMTEtY2U2MWU2YTk2ZDMyIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wNWFlNGJhZS03ZDFkLTRjYWMtYjViZC02OGRiN2Y1NDJjZjkiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTJmZDYwMDE4LWFlOWItNGVhZC05M2MxLWIyNGYyODM2NGZiMSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZDA0YTMwZTctYjk5MC00YWJjLWFmZTgtMGZiM2Y5YjU0Yzk5Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS0wNDE5YjlhYS03NTc3LTRlZDktYWRlMS02MWE0NWQ2ZGVmNGIiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTI1N2VhOGQyLWE1MjEtNDBlMC1iOTQxLTJhZjM2ZWJkZjJkNCI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtZTRiYjgyYjgtMjNkOS00NjI1LTkzYzUtOGFjN2VjMGUzN2I2Ijp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS05MGIyZTAzNS1lOWM4LTQ0YjgtOTk3Yy04NjBkNTFkODlkYTEiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9LCJ0ZW1wLWZlLTdkNjI3ZWJmLTEzMGEtNDA2ZC05ZWRlLWU4NWU0OTQ1YTdkZSI6eyJzZWxlY3RlZFJhdGluZyI6MCwiZmVlZGJhY2tOb3RlIjoiIn0sInRlbXAtZmUtNjAyYjllN2YtOTM4Zi00YTgwLWE1NDQtNzhiNDFiN2FlODcwIjp7InNlbGVjdGVkUmF0aW5nIjowLCJmZWVkYmFja05vdGUiOiIifSwidGVtcC1mZS02NGZhNWYzMS05MTlmLTQwNmUtYTMxNS02NWIyNjYyYjc3NTUiOnsic2VsZWN0ZWRSYXRpbmciOjAsImZlZWRiYWNrTm90ZSI6IiJ9fSwidG9vbFVzZVN0YXRlcyI6eyI1Y2M3MTY2OC1mODhlLTRhYTEtYjc4Ny1jNDQ5YjZlYWM5Mjc7dG9vbHVfdnJ0eF8wMUtkMnpGWGRLUXd6S2F4cnE0TVZ3UlMiOnsicmVxdWVzdElkIjoiNWNjNzE2NjgtZjg4ZS00YWExLWI3ODctYzQ0OWI2ZWFjOTI3IiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMUtkMnpGWGRLUXd6S2F4cnE0TVZ3UlMiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJUaGUgZm9sbG93aW5nIGNvZGUgc2VjdGlvbnMgd2VyZSByZXRyaWV2ZWQ6XG5QYXRoOiBpbmRleC5odG1sXG5cbjwhRE9DVFlQRSBodG1sPlxuPGh0bWwgbGFuZz1cInJ1XCI+XG4gIDxoZWFkPlxuICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiIC8+XG4gICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcIiAvPlxuICAgIDx0aXRsZT5Ob3ZhIEFJIC0gS3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPIEFJL01MPC90aXRsZT5cbiAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PVwiTm92YSBBSSAtINC/0YDQtdC00L3QsNGB0YLRgNC+0LXQvdC90LDRjyBrdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8g0LfQsNC00LDRh9CwINC+0LHRg9GH0LXQvdC40Y8g0Lgg0LjQvdGE0LXRgNC10L3RgdCwLiDQodC90LjQttC10L3QuNC1INGA0LDRgdGF0L7QtNC+0LIg0Lgg0L/QvtCy0YvRiNC10L3QuNC1INGD0YLQuNC70LjQt9Cw0YbQuNC4INGA0LXRgdGD0YDRgdC+0LIg0LrQu9Cw0YHRgtC10YDQsC5cIiAvPlxuICAgIDxtZXRhIG5hbWU9XCJhdXRob3JcIiBjb250ZW50PVwiTm92YSBBSVwiIC8+XG4uLi5cbiAgICBcbiAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb21cIj5cbiAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb21cIiBjcm9zc29yaWdpbj5cbiAgICA8bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1JbnRlcjp3Z2h0QDQwMDs1MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCI+XG4gIDwvaGVhZD5cblxuICA8Ym9keT5cbiAgICA8ZGl2IGlkPVwicm9vdFwiPjwvZGl2PlxuICAgIDwhLS0gSU1QT1JUQU5UOiBETyBOT1QgUkVNT1ZFIFRISVMgU0NSSVBUIFRBRyBPUiBUSElTIFZFUlkgQ09NTUVOVCEgLS0+XG4gICAgPHNjcmlwdCBzcmM9XCJodHRwczovL2Nkbi5ncHRlbmcuY28vZ3B0ZW5naW5lZXIuanNcIiB0eXBlPVwibW9kdWxlXCI+PC9zY3JpcHQ+XG4gICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgc3JjPVwiL3NyYy9tYWluLnRzeFwiPjwvc2NyaXB0PlxuICA8L2JvZHk+XG48L2h0bWw+XG4uLi5cblBhdGg6IHZpdGUuY29uZmlnLnRzXG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjtcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG5cbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKHsgbW9kZSB9KSA9PiAoe1xuICBiYXNlOiAnL3NpdGUtbm92YS8nLFxuICBzZXJ2ZXI6IHtcbiAgICBob3N0OiBcIjo6XCIsXG4gICAgcG9ydDogODA4MCxcbiAgfSxcbiAgcGx1Z2luczogW1xuICAgIHJlYWN0KCksXG4gIF0sXG4gIHJlc29sdmU6IHtcbiAgICBhbGlhczoge1xuICAgICAgXCJAXCI6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi9zcmNcIiksXG4gICAgfSxcbiAgfSxcbn0pKTtcbi4uLlxuUGF0aDogZGlzdC9pbmRleC5odG1sXG5cbjwhRE9DVFlQRSBodG1sPlxuPGh0bWwgbGFuZz1cInJ1XCI+XG4gIDxoZWFkPlxuICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiIC8+XG4gICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcIiAvPlxuICAgIDx0aXRsZT5Ob3ZhIEFJIC0gS3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPIEFJL01MPC90aXRsZT5cbiAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PVwiTm92YSBBSSAtINC/0YDQtdC00L3QsNGB0YLRgNC+0LXQvdC90LDRjyBrdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8g0LfQsNC00LDRh9CwINC+0LHRg9GH0LXQvdC40Y8g0Lgg0LjQvdGE0LXRgNC10L3RgdCwLiDQodC90LjQttC10L3QuNC1INGA0LDRgdGF0L7QtNC+0LIg0Lgg0L/QvtCy0YvRiNC10L3QuNC1INGD0YLQuNC70LjQt9Cw0YbQuNC4INGA0LXRgdGD0YDRgdC+0LIg0LrQu9Cw0YHRgtC10YDQsC5cIiAvPlxuICAgIDxtZXRhIG5hbWU9XCJhdXRob3JcIiBjb250ZW50PVwiTm92YSBBSVwiIC8+XG4uLi5cbiAgICBcbiAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb21cIj5cbiAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb21cIiBjcm9zc29yaWdpbj5cbiAgICA8bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1JbnRlcjp3Z2h0QDQwMDs1MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCI+XG4gICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgY3Jvc3NvcmlnaW4gc3JjPVwiL3NpdGUtbm92YS9hc3NldHMvaW5kZXgtQ1hKeTg1YjcuanNcIj48L3NjcmlwdD5cbiAgICA8bGluayByZWw9XCJzdHlsZXNoZWV0XCIgY3Jvc3NvcmlnaW4gaHJlZj1cIi9zaXRlLW5vdmEvYXNzZXRzL2luZGV4LUJERlZwS0RtLmNzc1wiPlxuICA8L2hlYWQ+XG5cbiAgPGJvZHk+XG4gICAgPGRpdiBpZD1cInJvb3RcIj48L2Rpdj5cbiAgICA8IS0tIElNUE9SVEFOVDogRE8gTk9UIFJFTU9WRSBUSElTIFNDUklQVCBUQUcgT1IgVEhJUyBWRVJZIENPTU1FTlQhIC0tPlxuICAgIDxzY3JpcHQgc3JjPVwiaHR0cHM6Ly9jZG4uZ3B0ZW5nLmNvL2dwdGVuZ2luZWVyLmpzXCIgdHlwZT1cIm1vZHVsZVwiPjwvc2NyaXB0PlxuICA8L2JvZHk+XG48L2h0bWw+XG4uLi5cblBhdGg6IFJFQURNRS5tZFxuIyBOb3ZhIEFJIEFjY2VsZXJhdGVcblxu0JvQtdC90LTQuNC90LMg0LTQu9GPINC/0YDQvtC00YPQutGC0LAgTm92YSBBSSAtINGB0L/QtdGG0LjQsNC70LjQt9C40YDQvtCy0LDQvdC90L7QuSDQv9C70LDRgtGE0L7RgNC80Ysg0LTQu9GPIE1ML0FJINC30LDQtNCw0Ycg0L3QsCDQsdCw0LfQtSBLdWJlcm5ldGVzLlxuXG4qKtCU0LXQvNC+Kio6IGh0dHBzOi8vdmVrZXNzZXJvcC5naXRodWIuaW8vc2l0ZS1ub3ZhL1xuXG4jIyDQotC10YXQvdC+0LvQvtCz0LjQuFxuXG7Qn9GA0L7QtdC60YIg0YDQsNC30YDQsNCx0L7RgtCw0L0g0YEg0LjRgdC/0L7Qu9GM0LfQvtCy0LDQvdC40LXQvDpcblxuLSBSZWFjdFxuLSBUeXBlU2NyaXB0XG4tIFZpdGVcbi0gVGFpbHdpbmQgQ1NTXG4tIHNoYWRjbi91aVxuXG4jIyDQm9C+0LrQsNC70YzQvdCw0Y8g0YDQsNC30YDQsNCx0L7RgtC60LBcblxuYGBgYmFzaFxuIyDQo9GB0YLQsNC90L7QstC60LAg0LfQsNCy0LjRgdC40LzQvtGB0YLQtdC5XG5ucG0gaW5zdGFsbFxuXG4jINCX0LDQv9GD0YHQuiDRgdC10YDQstC10YDQsCDRgNCw0LfRgNCw0LHQvtGC0LrQuFxubnBtIHJ1biBkZXZcblxuIyDQodCx0L7RgNC60LAg0LTQu9GPINC/0YDQvtC00LDQutGI0LXQvdCwXG5ucG0gcnVuIGJ1aWxkXG5gYGBcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzLy5iaW4vZ2gtcGFnZXNcbiMhL3Vzci9iaW4vZW52IG5vZGVcblxuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IHtDb21tYW5kfSA9IHJlcXVpcmUoJ2NvbW1hbmRlcicpO1xuY29uc3QgYWRkciA9IHJlcXVpcmUoJ2VtYWlsLWFkZHJlc3NlcycpO1xuY29uc3QgZ2hwYWdlcyA9IHJlcXVpcmUoJy4uL2xpYi9pbmRleC5qcycpO1xuY29uc3QgcGtnID0gcmVxdWlyZSgnLi4vcGFja2FnZS5qc29uJyk7XG5cbmZ1bmN0aW9uIHB1Ymxpc2goZGlzdCwgY29uZmlnKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgYmFzZVBhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgZGlzdCk7XG4gICAgZ2hwYWdlcy5wdWJsaXNoKGJhc2VQYXRoLCBjb25maWcsIChlcnIpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgfVxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFpbihhcmdzKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICBjb25zdCBwcm9ncmFtID0gbmV3IENvbW1hbmQoKVxuICAgICAgLnZlcnNpb24ocGtnLnZlcnNpb24pXG4gICAgICAucmVxdWlyZWRPcHRpb24oXG4gICAgICAgICctZCwgLS1kaXN0IDxkaXN0PicsXG4gICAgICAgICdCYXNlIGRpcmVjdG9yeSBmb3IgYWxsIHNvdXJjZSBmaWxlcycsXG4gICAgICApXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLXMsIC0tc3JjIDxzcmM+JyxcbiAgICAgICAgJ1BhdHRlcm4gdXNlZCB0byBzZWxlY3Qgd2hpY2ggZmlsZXMgdG8gcHVibGlzaCcsXG4gICAgICAgIGdocGFnZXMuZGVmYXVsdHMuc3JjLFxuICAgICAgKVxuICAgICAgLm9wdGlvbihcbiAgICAgICAgJy1iLCAtLWJyYW5jaCA8YnJhbmNoPicsXG4gICAgICAgICdOYW1lIG9mIHRoZSBicmFuY2ggeW91IGFyZSBwdXNoaW5nIHRvJyxcbiAgICAgICAgZ2hwYWdlcy5kZWZhdWx0cy5icmFuY2gsXG4gICAgICApXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLWUsIC0tZGVzdCA8ZGVzdD4nLFxuICAgICAgICAnVGFyZ2V0IGRpcmVjdG9yeSB3aXRoaW4gdGhlIGRlc3RpbmF0aW9uIGJyYW5jaCAocmVsYXRpdmUgdG8gdGhlIHJvb3QpJyxcbiAgICAgICAgZ2hwYWdlcy5kZWZhdWx0cy5kZXN0LFxuICAgICAgKVxuICAgICAgLm9wdGlvbignLWEsIC0tYWRkJywgJ09ubHkgYWRkLCBhbmQgbmV2ZXIgcmVtb3ZlIGV4aXN0aW5nIGZpbGVzJylcbiAgICAgIC5vcHRpb24oJy14LCAtLXNpbGVudCcsICdEbyBub3Qgb3V0cHV0IHRoZSByZXBvc2l0b3J5IHVybCcpXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLW0sIC0tbWVzc2FnZSA8bWVzc2FnZT4nLFxuICAgICAgICAnY29tbWl0IG1lc3NhZ2UnLFxuICAgICAgICBnaHBhZ2VzLmRlZmF1bHRzLm1lc3NhZ2UsXG4gICAgICApXG4gICAgICAub3B0aW9uKCctZywgLS10YWcgPHRhZz4nLCAnYWRkIHRhZyB0byBjb21taXQnKVxuICAgICAgLm9wdGlvbignLS1naXQgPGdpdD4nLCAnUGF0aCB0byBnaXQgZXhlY3V0YWJsZScsIGdocGFnZXMuZGVmYXVsdHMuZ2l0KVxuICAgICAgLm9wdGlvbignLXQsIC0tZG90ZmlsZXMnLCAnSW5jbHVkZSBkb3RmaWxlcycpXG4gICAgICAub3B0aW9uKCctLW5vamVreWxsJywgJ0FkZCBhIC5ub2pla3lsbCBmaWxlIHRvIGRpc2FibGUgSmVreWxsJylcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctLWNuYW1lIDxDTkFNRT4nLFxuICAgICAgICAnQWRkIGEgQ05BTUUgZmlsZSB3aXRoIHRoZSBuYW1lIG9mIHlvdXIgY3VzdG9tIGRvbWFpbicsXG4gICAgICApXG4gICAgICAub3B0aW9uKCctciwgLS1yZXBvIDxyZXBvPicsICdVUkwgb2YgdGhlIHJlcG9zaXRvcnkgeW91IGFyZSBwdXNoaW5nIHRvJylcbiAgICAgIC5vcHRpb24oJy1wLCAtLWRlcHRoIDxkZXB0aD4nLCAnZGVwdGggZm9yIGNsb25lJywgZ2hwYWdlcy5kZWZhdWx0cy5kZXB0aClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctbywgLS1yZW1vdGUgPG5hbWU+JyxcbiAgICAgICAgJ1RoZSBuYW1lIG9mIHRoZSByZW1vdGUnLFxuICAgICAgICBnaHBhZ2VzLmRlZmF1bHRzLnJlbW90ZSxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctdSwgLS11c2VyIDxhZGRyZXNzPicsXG4gICAgICAgICdUaGUgbmFtZSBhbmQgZW1haWwgb2YgdGhlIHVzZXIgKGRlZmF1bHRzIHRvIHRoZSBnaXQgY29uZmlnKS4gIEZvcm1hdCBpcyBcIllvdXIgTmFtZSA8ZW1haWxAZXhhbXBsZS5jb20+XCIuJyxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctdiwgLS1yZW1vdmUgPHBhdHRlcm4+JyxcbiAgICAgICAgJ1JlbW92ZSBmaWxlcyB0aGF0IG1hdGNoIHRoZSBnaXZlbiBwYXR0ZXJuICcgK1xuICAgICAgICAgICcoaWdub3JlZCBpZiB1c2VkIHRvZ2V0aGVyIHdpdGggLS1hZGQpLicsXG4gICAgICAgIGdocGFnZXMuZGVmYXVsdHMucmVtb3ZlLFxuICAgICAgKVxuICAgICAgLm9wdGlvbignLW4sIC0tbm8tcHVzaCcsICdDb21taXQgb25seSAod2l0aCBubyBwdXNoKScpXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLWYsIC0tbm8taGlzdG9yeScsXG4gICAgICAgICdQdXNoIGZvcmNlIG5ldyBjb21taXQgd2l0aG91dCBwYXJlbnQgaGlzdG9yeScsXG4gICAgICApXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLS1iZWZvcmUtYWRkIDxmaWxlPicsXG4gICAgICAgICdFeGVjdXRlIHRoZSBmdW5jdGlvbiBleHBvcnRlZCBieSA8ZmlsZT4gYmVmb3JlIFwiZ2l0IGFkZFwiJyxcbiAgICAgIClcbiAgICAgIC5wYXJzZShhcmdzKTtcblxuICAgIGNvbnN0IG9wdGlvbnMgPSBwcm9ncmFtLm9wdHMoKTtcblxuICAgIGxldCB1c2VyO1xuICAgIGlmIChvcHRpb25zLnVzZXIpIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gYWRkci5wYXJzZU9uZUFkZHJlc3Mob3B0aW9ucy51c2VyKTtcbiAgICAgIGlmICghcGFydHMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb3VsZCBub3QgcGFyc2UgbmFtZSBhbmQgZW1haWwgZnJvbSB1c2VyIG9wdGlvbiBcIiR7b3B0aW9ucy51c2VyfVwiIGAgK1xuICAgICAgICAgICAgJyhmb3JtYXQgc2hvdWxkIGJlIFwiWW91ciBOYW1lIDxlbWFpbEBleGFtcGxlLmNvbT5cIiknLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdXNlciA9IHtuYW1lOiBwYXJ0cy5uYW1lLCBlbWFpbDogcGFydHMuYWRkcmVzc307XG4gICAgfVxuICAgIGxldCBiZWZvcmVBZGQ7XG4gICAgaWYgKG9wdGlvbnMuYmVmb3JlQWRkKSB7XG4gICAgICBjb25zdCBtID0gcmVxdWlyZShcbiAgICAgICAgcmVxdWlyZS5yZXNvbHZlKG9wdGlvbnMuYmVmb3JlQWRkLCB7XG4gICAgICAgICAgcGF0aHM6IFtwcm9jZXNzLmN3ZCgpXSxcbiAgICAgICAgfSksXG4gICAgICApO1xuXG4gICAgICBpZiAodHlwZW9mIG0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYmVmb3JlQWRkID0gbTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG0gPT09ICdvYmplY3QnICYmIHR5cGVvZiBtLmRlZmF1bHQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgYmVmb3JlQWRkID0gbS5kZWZhdWx0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDb3VsZCBub3QgZmluZCBmdW5jdGlvbiB0byBleGVjdXRlIGJlZm9yZSBhZGRpbmcgZmlsZXMgaW4gYCArXG4gICAgICAgICAgICBgXCIke29wdGlvbnMuYmVmb3JlQWRkfVwiLlxcbiBgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIHJlcG86IG9wdGlvbnMucmVwbyxcbiAgICAgIHNpbGVudDogISFvcHRpb25zLnNpbGVudCxcbiAgICAgIGJyYW5jaDogb3B0aW9ucy5icmFuY2gsXG4gICAgICBzcmM6IG9wdGlvbnMuc3JjLFxuICAgICAgZGVzdDogb3B0aW9ucy5kZXN0LFxuICAgICAgbWVzc2FnZTogb3B0aW9ucy5tZXNzYWdlLFxuICAgICAgdGFnOiBvcHRpb25zLnRhZyxcbiAgICAgIGdpdDogb3B0aW9ucy5naXQsXG4gICAgICBkZXB0aDogb3B0aW9ucy5kZXB0aCxcbiAgICAgIGRvdGZpbGVzOiAhIW9wdGlvbnMuZG90ZmlsZXMsXG4gICAgICBub2pla3lsbDogISFvcHRpb25zLm5vamVreWxsLFxuICAgICAgY25hbWU6IG9wdGlvbnMuY25hbWUsXG4gICAgICBhZGQ6ICEhb3B0aW9ucy5hZGQsXG4gICAgICByZW1vdmU6IG9wdGlvbnMucmVtb3ZlLFxuICAgICAgcmVtb3RlOiBvcHRpb25zLnJlbW90ZSxcbiAgICAgIHB1c2g6ICEhb3B0aW9ucy5wdXNoLFxuICAgICAgaGlzdG9yeTogISFvcHRpb25zLmhpc3RvcnksXG4gICAgICB1c2VyOiB1c2VyLFxuICAgICAgYmVmb3JlQWRkOiBiZWZvcmVBZGQsXG4gICAgfTtcblxuICAgIHJldHVybiBwdWJsaXNoKG9wdGlvbnMuZGlzdCwgY29uZmlnKTtcbiAgfSk7XG59XG5cbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBtYWluKHByb2Nlc3MuYXJndilcbiAgICAudGhlbigoKSA9PiB7XG4gICAgICBwcm9jZXNzLnN0ZG91dC53cml0ZSgnUHVibGlzaGVkXFxuJyk7XG4gICAgfSlcbiAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgcHJvY2Vzcy5zdGRlcnIud3JpdGUoYCR7ZXJyLnN0YWNrfVxcbmAsICgpID0+IHByb2Nlc3MuZXhpdCgxKSk7XG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFpbjtcbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cztcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2xpbGNvbmZpZy9yZWFkbWUubWRcbiMgTGlsY29uZmlnIOKame+4j1xuWyFbbnBtIHZlcnNpb25dKGh0dHBzOi8vYmFkZ2UuZnVyeS5pby9qcy9saWxjb25maWcuc3ZnKV0oaHR0cHM6Ly9iYWRnZS5mdXJ5LmlvL2pzL2xpbGNvbmZpZylcblshW2luc3RhbGwgc2l6ZV0oaHR0cHM6Ly9wYWNrYWdlcGhvYmlhLm5vdy5zaC9iYWRnZT9wPWxpbGNvbmZpZyldKGh0dHBzOi8vcGFja2FnZXBob2JpYS5ub3cuc2gvcmVzdWx0P3A9bGlsY29uZmlnKVxuWyFbQ292ZXJhZ2UgU3RhdHVzXShodHRwczovL2NvdmVyYWxscy5pby9yZXBvcy9naXRodWIvYW50b25rNTIvbGlsY29uZmlnL2JhZGdlLnN2ZyldKGh0dHBzOi8vY292ZXJhbGxzLmlvL2dpdGh1Yi9hbnRvbms1Mi9saWxjb25maWcpXG5cbkEgemVyby1kZXBlbmRlbmN5IGFsdGVybmF0aXZlIHRvIFtjb3NtaWNvbmZpZ10oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvY29zbWljb25maWcpIHdpdGggdGhlIHNhbWUgQVBJLlxuXG4jIyBJbnN0YWxsYXRpb25cblxuYGBgc2hcbm5wbSBpbnN0YWxsIGxpbGNvbmZpZ1xuYGBgXG5cbiMjIFVzYWdlXG5cbmBgYGpzXG5pbXBvcnQge2xpbGNvbmZpZywgbGlsY29uZmlnU3luY30gZnJvbSAnbGlsY29uZmlnJztcblxuLy8gYWxsIGtleXMgYXJlIG9wdGlvbmFsXG5jb25zdCBvcHRpb25zID0ge1xuICAgIHN0b3BEaXI6ICcvVXNlcnMveW91L3NvbWUvZGlyJyxcbiAgICBzZWFyY2hQbGFjZXM6IFsncGFja2FnZS5qc29uJywgJ215YXBwLmNvbmYuanMnXSxcbiAgICBpZ25vcmVFbXB0eVNlYXJjaFBsYWNlczogZmFsc2Vcbn1cbi4uLlxuUGF0aDogcGFja2FnZS5qc29uXG57XG4gIFwibmFtZVwiOiBcInZpdGVfcmVhY3Rfc2hhZGNuX3RzXCIsXG4gIFwicHJpdmF0ZVwiOiB0cnVlLFxuICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICBcImJ1aWxkXCI6IFwidml0ZSBidWlsZFwiLFxuICAgIFwiYnVpbGQ6ZGV2XCI6IFwidml0ZSBidWlsZCAtLW1vZGUgZGV2ZWxvcG1lbnRcIixcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLlwiLFxuICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBob29rZm9ybS9yZXNvbHZlcnNcIjogXCJeMy45LjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1hY2NvcmRpb25cIjogXCJeMS4yLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1hbGVydC1kaWFsb2dcIjogXCJeMS4xLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1hc3BlY3QtcmF0aW9cIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1hdmF0YXJcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1jaGVja2JveFwiOiBcIl4xLjEuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWNvbGxhcHNpYmxlXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtY29udGV4dC1tZW51XCI6IFwiXjIuMi4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtZGlhbG9nXCI6IFwiXjEuMS4yXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtZHJvcGRvd24tbWVudVwiOiBcIl4yLjEuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWhvdmVyLWNhcmRcIjogXCJeMS4xLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1sYWJlbFwiOiBcIl4yLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LW1lbnViYXJcIjogXCJeMS4xLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1uYXZpZ2F0aW9uLW1lbnVcIjogXCJeMS4yLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1wb3BvdmVyXCI6IFwiXjEuMS4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtcHJvZ3Jlc3NcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1yYWRpby1ncm91cFwiOiBcIl4xLjIuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNjcm9sbC1hcmVhXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2VsZWN0XCI6IFwiXjIuMS4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2VwYXJhdG9yXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2xpZGVyXCI6IFwiXjEuMi4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2xvdFwiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXN3aXRjaFwiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRhYnNcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC10b2FzdFwiOiBcIl4xLjIuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvZ2dsZVwiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvZ2dsZS1ncm91cFwiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvb2x0aXBcIjogXCJeMS4xLjRcIixcbiAgICBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiOiBcIl41LjU2LjJcIixcbiAgICBcImNsYXNzLXZhcmlhbmNlLWF1dGhvcml0eVwiOiBcIl4wLjcuMVwiLFxuICAgIFwiY2xzeFwiOiBcIl4yLjEuMVwiLFxuICAgIFwiY21ka1wiOiBcIl4xLjAuMFwiLFxuICAgIFwiZGF0ZS1mbnNcIjogXCJeMy42LjBcIixcbiAgICBcImVtYmxhLWNhcm91c2VsLXJlYWN0XCI6IFwiXjguMy4wXCIsXG4gICAgXCJpbnB1dC1vdHBcIjogXCJeMS4yLjRcIixcbiAgICBcImx1Y2lkZS1yZWFjdFwiOiBcIl4wLjQ2Mi4wXCIsXG4gICAgXCJuZXh0LXRoZW1lc1wiOiBcIl4wLjMuMFwiLFxuICAgIFwicmVhY3RcIjogXCJeMTguMy4xXCIsXG4gICAgXCJyZWFjdC1kYXktcGlja2VyXCI6IFwiXjguMTAuMVwiLFxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjMuMVwiLFxuICAgIFwicmVhY3QtaG9vay1mb3JtXCI6IFwiXjcuNTMuMFwiLFxuICAgIFwicmVhY3QtcmVzaXphYmxlLXBhbmVsc1wiOiBcIl4yLjEuM1wiLFxuICAgIFwicmVhY3Qtcm91dGVyLWRvbVwiOiBcIl42LjI2LjJcIixcbiAgICBcInJlY2hhcnRzXCI6IFwiXjIuMTIuN1wiLFxuICAgIFwic29ubmVyXCI6IFwiXjEuNS4wXCIsXG4gICAgXCJ0YWlsd2luZC1tZXJnZVwiOiBcIl4yLjUuMlwiLFxuICAgIFwidGFpbHdpbmRjc3MtYW5pbWF0ZVwiOiBcIl4xLjAuN1wiLFxuICAgIFwidmF1bFwiOiBcIl4wLjkuM1wiLFxuICAgIFwiem9kXCI6IFwiXjMuMjMuOFwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBlc2xpbnQvanNcIjogXCJeOS45LjBcIixcbiAgICBcIkB0YWlsd2luZGNzcy90eXBvZ3JhcGh5XCI6IFwiXjAuNS4xNVwiLFxuICAgIFwiQHR5cGVzL25vZGVcIjogXCJeMjIuNS41XCIsXG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCJeMTguMy4zXCIsXG4gICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjMuMFwiLFxuICAgIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3Qtc3djXCI6IFwiXjMuNS4wXCIsXG4gICAgXCJhdXRvcHJlZml4ZXJcIjogXCJeMTAuNC4yMFwiLFxuICAgIFwiZXNsaW50XCI6IFwiXjkuOS4wXCIsXG4gICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LWhvb2tzXCI6IFwiXjUuMS4wLXJjLjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtcmVmcmVzaFwiOiBcIl4wLjQuOVwiLFxuICAgIFwiZ2gtcGFnZXNcIjogXCJeNi4zLjBcIixcbiAgICBcImdsb2JhbHNcIjogXCJeMTUuOS4wXCIsXG4gICAgXCJwb3N0Y3NzXCI6IFwiXjguNC40N1wiLFxuICAgIFwidGFpbHdpbmRjc3NcIjogXCJeMy40LjExXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjUuNS4zXCIsXG4gICAgXCJ0eXBlc2NyaXB0LWVzbGludFwiOiBcIl44LjAuMVwiLFxuICAgIFwidml0ZVwiOiBcIl41LjQuMVwiXG4gIH1cbn1cbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL0BodW1hbmZzL2NvcmUvUkVBRE1FLm1kXG4uLi5cblxuPiBbIVdBUk5JTkddXG4+IFRoaXMgcHJvamVjdCBpcyAqKmV4cGVyaW1lbnRhbCoqIGFuZCBtYXkgY2hhbmdlIHNpZ25pZmljYW50bHkgYmVmb3JlIHYxLjAuMC4gVXNlIGF0IHlvdXIgb3duIGNhdXRpb24gYW5kIGRlZmluaXRlbHkgbm90IGluIHByb2R1Y3Rpb24hXG5cbiMjIEluc3RhbGxhdGlvblxuXG4jIyMgTm9kZS5qc1xuXG5JbnN0YWxsIHVzaW5nIHlvdXIgZmF2b3JpdGUgcGFja2FnZSBtYW5hZ2VyIGZvciBOb2RlLmpzOlxuXG5gYGBzaGVsbFxubnBtIGluc3RhbGwgQGh1bWFuZnMvY29yZVxuXG4jIG9yXG5cbnBucG0gaW5zdGFsbCBAaHVtYW5mcy9jb3JlXG5cbiMgb3JcblxueWFybiBhZGQgQGh1bWFuZnMvY29yZVxuXG4jIG9yXG5cbmJ1biBpbnN0YWxsIEBodW1hbmZzL2NvcmVcbmBgYFxuXG5UaGVuIHlvdSBjYW4gaW1wb3J0IHRoZSBgSGZzYCBhbmQgYFBhdGhgIGNsYXNzZXMgbGlrZSB0aGlzOlxuXG5gYGBqc1xuaW1wb3J0IHsgSGZzLCBQYXRoIH0gZnJvbSBcIkBodW1hbmZzL2NvcmVcIjtcbmBgYFxuXG4jIyMgRGVub1xuXG5JbnN0YWxsIHVzaW5nIFtKU1JdKGh0dHBzOi8vanNyLmlvKTpcblxuYGBgc2hlbGxcbmRlbm8gYWRkIEBodW1hbmZzL2NvcmVcblxuIyBvclxuXG5qc3IgYWRkIEBodW1hbmZzL2NvcmVcbmBgYFxuXG5UaGVuIHlvdSBjYW4gaW1wb3J0IHRoZSBgSGZzYCBjbGFzcyBsaWtlIHRoaXM6XG5cbmBgYGpzXG5pbXBvcnQgeyBIZnMsIFBhdGggfSBmcm9tIFwiQGh1bWFuZnMvY29yZVwiO1xuYGBgXG5cbiMjIyBCcm93c2VyXG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9hanYvc2NyaXB0cy90cmF2aXMtZ2gtcGFnZXNcbiMhL3Vzci9iaW4vZW52IGJhc2hcblxuc2V0IC1lXG5cbmlmIFtbIFwiJFRSQVZJU19CUkFOQ0hcIiA9PSBcIm1hc3RlclwiICYmIFwiJFRSQVZJU19QVUxMX1JFUVVFU1RcIiA9PSBcImZhbHNlXCIgJiYgJFRSQVZJU19KT0JfTlVNQkVSID1+IFwiLjNcIiBdXTsgdGhlblxuICBnaXQgZGlmZiAtLW5hbWUtb25seSAkVFJBVklTX0NPTU1JVF9SQU5HRSB8IGdyZXAgLXFFICdcXC5tZCR8XkxJQ0VOU0UkfHRyYXZpcy1naC1wYWdlcyQnICYmIHtcbiAgICBybSAtcmYgLi4vZ2gtcGFnZXNcbiAgICBnaXQgY2xvbmUgLWIgZ2gtcGFnZXMgLS1zaW5nbGUtYnJhbmNoIGh0dHBzOi8vJHtHSVRIVUJfVE9LRU59QGdpdGh1Yi5jb20vYWp2LXZhbGlkYXRvci9hanYuZ2l0IC4uL2doLXBhZ2VzXG4gICAgbWtkaXIgLXAgLi4vZ2gtcGFnZXMvX3NvdXJjZVxuICAgIGNwICoubWQgLi4vZ2gtcGFnZXMvX3NvdXJjZVxuICAgIGNwIExJQ0VOU0UgLi4vZ2gtcGFnZXMvX3NvdXJjZVxuICAgIGN1cnJlbnREaXI9JChwd2QpXG4gICAgY2QgLi4vZ2gtcGFnZXNcbiAgICAkY3VycmVudERpci9ub2RlX21vZHVsZXMvLmJpbi9naC1wYWdlcy1nZW5lcmF0b3JcbiAgICAjIHJlbW92ZSBsb2dvIGZyb20gUkVBRE1FXG4gICAgc2VkIC1pIC1FIFwicy88aW1nW14+XSthanZfbG9nb1tePl0rPi8vXCIgaW5kZXgubWRcbiAgICBnaXQgY29uZmlnIHVzZXIuZW1haWwgXCIkR0lUX1VTRVJfRU1BSUxcIlxuICAgIGdpdCBjb25maWcgdXNlci5uYW1lIFwiJEdJVF9VU0VSX05BTUVcIlxuICAgIGdpdCBhZGQgLlxuICAgIGdpdCBjb21taXQgLWFtIFwidXBkYXRlZCBieSB0cmF2aXMgYnVpbGQgIyRUUkFWSVNfQlVJTERfTlVNQkVSXCJcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2xpbGNvbmZpZy9zcmMvaW5kZXguanNcbi8vIEB0cy1jaGVja1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbmNvbnN0IG9zID0gcmVxdWlyZSgnb3MnKTtcbmNvbnN0IHVybCA9IHJlcXVpcmUoJ3VybCcpO1xuXG5jb25zdCBmc1JlYWRGaWxlQXN5bmMgPSBmcy5wcm9taXNlcy5yZWFkRmlsZTtcblxuLyoqIEB0eXBlIHsobmFtZTogc3RyaW5nLCBzeW5jOiBib29sZWFuKSA9PiBzdHJpbmdbXX0gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRTZWFyY2hQbGFjZXMobmFtZSwgc3luYykge1xuXHRyZXR1cm4gW1xuXHRcdCdwYWNrYWdlLmpzb24nLFxuXHRcdGAuJHtuYW1lfXJjLmpzb25gLFxuXHRcdGAuJHtuYW1lfXJjLmpzYCxcblx0XHRgLiR7bmFtZX1yYy5janNgLFxuXHRcdC4uLihzeW5jID8gW10gOiBbYC4ke25hbWV9cmMubWpzYF0pLFxuXHRcdGAuY29uZmlnLyR7bmFtZX1yY2AsXG5cdFx0YC5jb25maWcvJHtuYW1lfXJjLmpzb25gLFxuXHRcdGAuY29uZmlnLyR7bmFtZX1yYy5qc2AsXG5cdFx0YC5jb25maWcvJHtuYW1lfXJjLmNqc2AsXG5cdFx0Li4uKHN5bmMgPyBbXSA6IFtgLmNvbmZpZy8ke25hbWV9cmMubWpzYF0pLFxuXHRcdGAke25hbWV9LmNvbmZpZy5qc2AsXG5cdFx0YCR7bmFtZX0uY29uZmlnLmNqc2AsXG5cdFx0Li4uKHN5bmMgPyBbXSA6IFtgJHtuYW1lfS5jb25maWcubWpzYF0pLFxuXHRdO1xufVxuLi4uXG5cbi8qKiBAdHlwZSB7aW1wb3J0KCcuL2luZGV4JykubGlsY29uZmlnfSAqL1xubW9kdWxlLmV4cG9ydHMubGlsY29uZmlnID0gZnVuY3Rpb24gbGlsY29uZmlnKG5hbWUsIG9wdGlvbnMpIHtcblx0Y29uc3Qge1xuXHRcdGlnbm9yZUVtcHR5U2VhcmNoUGxhY2VzLFxuXHRcdGxvYWRlcnMsXG5cdFx0cGFja2FnZVByb3AsXG5cdFx0c2VhcmNoUGxhY2VzLFxuXHRcdHN0b3BEaXIsXG5cdFx0dHJhbnNmb3JtLFxuXHRcdGNhY2hlLFxuXHR9ID0gZ2V0T3B0aW9ucyhuYW1lLCBvcHRpb25zID8/IHt9LCBmYWxzZSk7XG5cdGNvbnN0IHNlYXJjaENhY2hlID0gbmV3IE1hcCgpO1xuXHRjb25zdCBsb2FkQ2FjaGUgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IGVtcGxhY2UgPSBtYWtlRW1wbGFjZShjYWNoZSk7XG5cblx0cmV0dXJuIHtcblx0XHRhc3luYyBzZWFyY2goc2VhcmNoRnJvbSA9IHByb2Nlc3MuY3dkKCkpIHtcblx0XHRcdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2luZGV4JykuTGlsY29uZmlnUmVzdWx0fSAqL1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0ge1xuXHRcdFx0XHRjb25maWc6IG51bGwsXG5cdFx0XHRcdGZpbGVwYXRoOiAnJyxcblx0XHRcdH07XG5cblx0XHRcdC8qKiBAdHlwZSB7U2V0PHN0cmluZz59ICovXG5cdFx0XHRjb25zdCB2aXNpdGVkID0gbmV3IFNldCgpO1xuXHRcdFx0bGV0IGRpciA9IHNlYXJjaEZyb207XG5cdFx0XHRkaXJMb29wOiB3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRpZiAoY2FjaGUpIHtcblx0XHRcdFx0XHRjb25zdCByID0gc2VhcmNoQ2FjaGUuZ2V0KGRpcik7XG5cdFx0XHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCBwIG9mIHZpc2l0ZWQpIHNlYXJjaENhY2hlLnNldChwLCByKTtcblx0XHRcdFx0XHRcdHJldHVybiByO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2aXNpdGVkLmFkZChkaXIpO1xuXHRcdFx0XHR9XG4uLi5cblBhdGg6IHRhaWx3aW5kLmNvbmZpZy50c1xuXG5pbXBvcnQgdHlwZSB7IENvbmZpZyB9IGZyb20gXCJ0YWlsd2luZGNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGRhcmtNb2RlOiBbXCJjbGFzc1wiXSxcbiAgY29udGVudDogW1xuICAgIFwiLi9wYWdlcy8qKi8qLnt0cyx0c3h9XCIsXG4gICAgXCIuL2NvbXBvbmVudHMvKiovKi57dHMsdHN4fVwiLFxuICAgIFwiLi9hcHAvKiovKi57dHMsdHN4fVwiLFxuICAgIFwiLi9zcmMvKiovKi57dHMsdHN4fVwiLFxuICBdLFxuICBwcmVmaXg6IFwiXCIsXG4gIHRoZW1lOiB7XG4gICAgY29udGFpbmVyOiB7XG4gICAgICBjZW50ZXI6IHRydWUsXG4gICAgICBwYWRkaW5nOiBcIjJyZW1cIixcbiAgICAgIHNjcmVlbnM6IHtcbiAgICAgICAgXCIyeGxcIjogXCIxNDAwcHhcIlxuICAgICAgfVxuICAgIH0sXG4uLi5cblBhdGg6IHNyYy9tYWluLnRzeFxuaW1wb3J0IHsgY3JlYXRlUm9vdCB9IGZyb20gJ3JlYWN0LWRvbS9jbGllbnQnXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwLnRzeCdcbmltcG9ydCAnLi9pbmRleC5jc3MnXG5cbmNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpISkucmVuZGVyKDxBcHAgLz4pO1xuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMveWFtbC9wYWNrYWdlLmpzb25cbi4uLlxuICAgIFwidGVzdDpkaXN0OnR5cGVzXCI6IFwidHNjIC0tYWxsb3dKcyAtLW1vZHVsZVJlc29sdXRpb24gbm9kZSAtLW5vRW1pdCAtLXRhcmdldCBlczUgZGlzdC9pbmRleC5qc1wiLFxuICAgIFwidGVzdDp0eXBlc1wiOiBcInRzYyAtLW5vRW1pdCAmJiB0c2MgLS1ub0VtaXQgLXAgdGVzdHMvdHNjb25maWcuanNvblwiLFxuICAgIFwiZG9jczppbnN0YWxsXCI6IFwiY2QgZG9jcy1zbGF0ZSAmJiBidW5kbGUgaW5zdGFsbFwiLFxuICAgIFwicHJlZG9jczpkZXBsb3lcIjogXCJub2RlIGRvY3MvcHJlcGFyZS1kb2NzLm1qc1wiLFxuICAgIFwiZG9jczpkZXBsb3lcIjogXCJjZCBkb2NzLXNsYXRlICYmIC4vZGVwbG95LnNoXCIsXG4gICAgXCJwcmVkb2NzXCI6IFwibm9kZSBkb2NzL3ByZXBhcmUtZG9jcy5tanNcIixcbiAgICBcImRvY3NcIjogXCJjZCBkb2NzLXNsYXRlICYmIGJ1bmRsZSBleGVjIG1pZGRsZW1hbiBzZXJ2ZXJcIixcbiAgICBcInByZXZlcnNpb25cIjogXCJucG0gdGVzdCAmJiBucG0gcnVuIGJ1aWxkXCIsXG4gICAgXCJwcmVwdWJsaXNoT25seVwiOiBcIm5wbSBydW4gY2xlYW4gJiYgbnBtIHRlc3QgJiYgbnBtIHJ1biBidWlsZFwiXG4gIH0sXG4gIFwiYnJvd3NlcnNsaXN0XCI6IFwiZGVmYXVsdHMsIG5vdCBpZSAxMVwiLFxuICBcInByZXR0aWVyXCI6IHtcbiAgICBcImFycm93UGFyZW5zXCI6IFwiYXZvaWRcIixcbiAgICBcInNlbWlcIjogZmFsc2UsXG4gICAgXCJzaW5nbGVRdW90ZVwiOiB0cnVlLFxuICAgIFwidHJhaWxpbmdDb21tYVwiOiBcIm5vbmVcIlxuICB9LFxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvY29tbWFuZGVyL1JlYWRtZS5tZFxuLi4uXG5gYGBcblxuIyMgRXhhbXBsZXNcblxuYGBganNcbmNvbnN0IHByb2dyYW0gPSByZXF1aXJlKCdjb21tYW5kZXInKTtcblxucHJvZ3JhbVxuICAudmVyc2lvbignMC4xLjAnKVxuICAub3B0aW9uKCctQywgLS1jaGRpciA8cGF0aD4nLCAnY2hhbmdlIHRoZSB3b3JraW5nIGRpcmVjdG9yeScpXG4gIC5vcHRpb24oJy1jLCAtLWNvbmZpZyA8cGF0aD4nLCAnc2V0IGNvbmZpZyBwYXRoLiBkZWZhdWx0cyB0byAuL2RlcGxveS5jb25mJylcbiAgLm9wdGlvbignLVQsIC0tbm8tdGVzdHMnLCAnaWdub3JlIHRlc3QgaG9vaycpO1xuXG5wcm9ncmFtXG4gIC5jb21tYW5kKCdzZXR1cCBbZW52XScpXG4gIC5kZXNjcmlwdGlvbigncnVuIHNldHVwIGNvbW1hbmRzIGZvciBhbGwgZW52cycpXG4gIC5vcHRpb24oXCItcywgLS1zZXR1cF9tb2RlIFttb2RlXVwiLCBcIldoaWNoIHNldHVwIG1vZGUgdG8gdXNlXCIpXG4gIC5hY3Rpb24oZnVuY3Rpb24oZW52LCBvcHRpb25zKXtcbiAgICBjb25zdCBtb2RlID0gb3B0aW9ucy5zZXR1cF9tb2RlIHx8IFwibm9ybWFsXCI7XG4gICAgZW52ID0gZW52IHx8ICdhbGwnO1xuICAgIGNvbnNvbGUubG9nKCdzZXR1cCBmb3IgJXMgZW52KHMpIHdpdGggJXMgbW9kZScsIGVudiwgbW9kZSk7XG4gIH0pO1xuXG5wcm9ncmFtXG4gIC5jb21tYW5kKCdleGVjIDxjbWQ+JylcbiAgLmFsaWFzKCdleCcpXG4gIC5kZXNjcmlwdGlvbignZXhlY3V0ZSB0aGUgZ2l2ZW4gcmVtb3RlIGNtZCcpXG4gIC5vcHRpb24oXCItZSwgLS1leGVjX21vZGUgPG1vZGU+XCIsIFwiV2hpY2ggZXhlYyBtb2RlIHRvIHVzZVwiKVxuICAuYWN0aW9uKGZ1bmN0aW9uKGNtZCwgb3B0aW9ucyl7XG4gICAgY29uc29sZS5sb2coJ2V4ZWMgXCIlc1wiIHVzaW5nICVzIG1vZGUnLCBjbWQsIG9wdGlvbnMuZXhlY19tb2RlKTtcbiAgfSkub24oJy0taGVscCcsIGZ1bmN0aW9uKCkge1xuICAgIGNvbnNvbGUubG9nKCcnKTtcbiAgICBjb25zb2xlLmxvZygnRXhhbXBsZXM6Jyk7XG4gICAgY29uc29sZS5sb2coJycpO1xuICAgIGNvbnNvbGUubG9nKCcgICQgZGVwbG95IGV4ZWMgc2VxdWVudGlhbCcpO1xuICAgIGNvbnNvbGUubG9nKCcgICQgZGVwbG95IGV4ZWMgYXN5bmMnKTtcbiAgfSk7XG5cbnByb2dyYW1cbiAgLmNvbW1hbmQoJyonKVxuICAuYWN0aW9uKGZ1bmN0aW9uKGVudil7XG4gICAgY29uc29sZS5sb2coJ2RlcGxveWluZyBcIiVzXCInLCBlbnYpO1xuICB9KTtcbi4uLlxuUGF0aDogc3JjL2NvbXBvbmVudHMvTWxvcHNKb3VybmV5LnRzeFxuLi4uXG4gICAge1xuICAgICAgc3RhZ2U6IFwi0J7RgNC60LXRgdGC0YDQsNGG0LjRjyDQvNC+0LTQtdC70LXQuVwiLFxuICAgICAgdmFuaWxsYToge1xuICAgICAgICBkZXNjcmlwdGlvbjogXCLQlNC10LvQsNC10YIg0YHQvtCx0YHRgtCy0LXQvdC90YvQuSBpbmdyZXNzLCDQv9C40YjQtdGCIFlBTUwg0LTQu9GPIEtGU2VydmluZy9TZWxkb24sINC90LDRgdGC0YDQsNC40LLQsNC10YIgUHJvbWV0aGV1cyBBZGFwdGVyINC4IEhQQS5cIixcbiAgICAgICAgaWNvbjogPFhDaXJjbGUgY2xhc3NOYW1lPVwidGV4dC1yZWQtNTAwXCIgLz4sXG4gICAgICAgIGVmZm9ydDogXCLQotGA0LXQsdGD0LXRgiDRjdC60YHQv9C10YDRgtC40LfRi1wiLFxuICAgICAgICB0aW1lOiBcIjEtMiDQvdC10LTQtdC70LhcIlxuICAgICAgfSxcbiAgICAgIG5vdmE6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwi0JPQvtGC0L7QstGL0LUg0YjQsNCx0LvQvtC90YsgZGVwbG95bWVudCArIGF1dG9zY2FsaW5nOyDQvNC10YLRgNC40LrQuCDQvNC+0LTQtdC70LXQuSDQv9C+0L/QsNC00LDRjtGCINCyIFRoYW5vcyDQsdC10Lcg0LTQvtC/0L7Qu9C90LjRgtC10LvRjNC90YvRhSBleHBvcnRlcnMuXCIsXG4gICAgICAgIGljb246IDxDaGVja0NpcmNsZSBjbGFzc05hbWU9XCJ0ZXh0LWdyZWVuLTUwMFwiIC8+LFxuICAgICAgICBlZmZvcnQ6IFwi0JPQvtGC0L7QstGL0LUg0YjQsNCx0LvQvtC90YtcIixcbiAgICAgICAgdGltZTogXCIxLTIg0LTQvdGPXCJcbiAgICAgIH1cbiAgICB9LFxuLi4uXG5QYXRoOiBzcmMvY29tcG9uZW50cy9EYXRhU2NpZW5jZUpvdXJuZXkudHN4XG4uLi5cbiAgICB7XG4gICAgICBzdGFnZTogXCJEZXBsb3ltZW50IC8gQS1CXCIsXG4gICAgICB2YW5pbGxhOiB7XG4gICAgICAgIGRlc2NyaXB0aW9uOiBcItCf0LjRiNC10YIg0YHQtdGA0LLQuNGBIFlBTUwsINC00L7Qs9C+0LLQsNGA0LjQstCw0LXRgtGB0Y8g0L4gSW5ncmVzczsg0LTQvtC70YzRiNC1IDEtMiDQtNC90LXQuS5cIixcbiAgICAgICAgaWNvbjogPEFsZXJ0VHJpYW5nbGUgY2xhc3NOYW1lPVwidGV4dC1hbWJlci01MDBcIiAvPixcbiAgICAgICAgZWZmb3J0OiBcItCi0YDQtdCx0YPQtdGCIERldk9wc1wiLFxuICAgICAgICB0aW1lOiBcIjEtMiDQtNC90Y9cIlxuICAgICAgfSxcbiAgICAgIG5vdmE6IHtcbiAgICAgICAgZGVzY3JpcHRpb246IFwi0J3QsNC20LjQvNCw0LXRgiDCq1Byb21vdGUgbW9kZWzCuyDQsiBNTGZsb3cg4oaSINGB0LXRgNCy0LjRgSDRgNCw0LfQstGR0YDQvdGD0YIsINC60LDQvdCw0YDQtdC10YfQvdGL0Lkg0YLRgNCw0YTQuNC6IDEwICUg0L3QsNGB0YLRgNC+0LXQvS5cIixcbiAgICAgICAgaWNvbjogPENoZWNrQ2lyY2xlIGNsYXNzTmFtZT1cInRleHQtZ3JlZW4tNTAwXCIgLz4sXG4gICAgICAgIGVmZm9ydDogXCJPbmUtY2xpY2sgZGVwbG95XCIsXG4gICAgICAgIHRpbWU6IFwi0JzQuNC90YPRgtGLXCJcbiAgICAgIH1cbiAgICB9LFxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvY21kay9wYWNrYWdlLmpzb25cbntcbiAgXCJuYW1lXCI6IFwiY21ka1wiLFxuICBcInZlcnNpb25cIjogXCIxLjAuMFwiLFxuICBcImxpY2Vuc2VcIjogXCJNSVRcIixcbiAgXCJtYWluXCI6IFwiLi9kaXN0L2luZGV4LmpzXCIsXG4gIFwibW9kdWxlXCI6IFwiLi9kaXN0L2luZGV4Lm1qc1wiLFxuICBcInR5cGVzXCI6IFwiLi9kaXN0L2luZGV4LmQudHNcIixcbiAgXCJmaWxlc1wiOiBbXG4gICAgXCJkaXN0XCJcbiAgXSxcbiAgXCJleHBvcnRzXCI6IHtcbiAgICBcIi5cIjoge1xuICAgICAgXCJ0eXBlc1wiOiBcIi4vZGlzdC9pbmRleC5kLnRzXCIsXG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9pbmRleC5tanNcIixcbiAgICAgIFwicmVxdWlyZVwiOiBcIi4vZGlzdC9pbmRleC5qc1wiXG4gICAgfVxuICB9LFxuICBcInBlZXJEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwicmVhY3RcIjogXCJeMTguMC4wXCIsXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMC4wXCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWRpYWxvZ1wiOiBcIjEuMC41XCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtcHJpbWl0aXZlXCI6IFwiMS4wLjNcIlxuICB9LFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAdHlwZXMvcmVhY3RcIjogXCIxOC4wLjE1XCJcbiAgfSxcbiAgXCJzaWRlRWZmZWN0c1wiOiBmYWxzZSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImJ1aWxkXCI6IFwidHN1cCBzcmNcIixcbiAgICBcImRldlwiOiBcInRzdXAgc3JjIC0td2F0Y2hcIlxuICB9XG59Li4uXG5QYXRoOiBub2RlX21vZHVsZXMvcmVhY3QvUkVBRE1FLm1kXG4jIGByZWFjdGBcblxuUmVhY3QgaXMgYSBKYXZhU2NyaXB0IGxpYnJhcnkgZm9yIGNyZWF0aW5nIHVzZXIgaW50ZXJmYWNlcy5cblxuVGhlIGByZWFjdGAgcGFja2FnZSBjb250YWlucyBvbmx5IHRoZSBmdW5jdGlvbmFsaXR5IG5lY2Vzc2FyeSB0byBkZWZpbmUgUmVhY3QgY29tcG9uZW50cy4gSXQgaXMgdHlwaWNhbGx5IHVzZWQgdG9nZXRoZXIgd2l0aCBhIFJlYWN0IHJlbmRlcmVyIGxpa2UgYHJlYWN0LWRvbWAgZm9yIHRoZSB3ZWIsIG9yIGByZWFjdC1uYXRpdmVgIGZvciB0aGUgbmF0aXZlIGVudmlyb25tZW50cy5cblxuKipOb3RlOioqIGJ5IGRlZmF1bHQsIFJlYWN0IHdpbGwgYmUgaW4gZGV2ZWxvcG1lbnQgbW9kZS4gVGhlIGRldmVsb3BtZW50IHZlcnNpb24gaW5jbHVkZXMgZXh0cmEgd2FybmluZ3MgYWJvdXQgY29tbW9uIG1pc3Rha2VzLCB3aGVyZWFzIHRoZSBwcm9kdWN0aW9uIHZlcnNpb24gaW5jbHVkZXMgZXh0cmEgcGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9ucyBhbmQgc3RyaXBzIGFsbCBlcnJvciBtZXNzYWdlcy4gRG9uJ3QgZm9yZ2V0IHRvIHVzZSB0aGUgW3Byb2R1Y3Rpb24gYnVpbGRdKGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9vcHRpbWl6aW5nLXBlcmZvcm1hbmNlLmh0bWwjdXNlLXRoZS1wcm9kdWN0aW9uLWJ1aWxkKSB3aGVuIGRlcGxveWluZyB5b3VyIGFwcGxpY2F0aW9uLlxuXG4jIyBVc2FnZVxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvYmFyZS1vcy9wYWNrYWdlLmpzb25cbntcbiAgXCJuYW1lXCI6IFwiYmFyZS1vc1wiLFxuICBcInZlcnNpb25cIjogXCIzLjYuMVwiLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiT3BlcmF0aW5nIHN5c3RlbSB1dGlsaXRpZXMgZm9yIEphdmFzY3JpcHRcIixcbiAgXCJleHBvcnRzXCI6IHtcbiAgICBcIi5cIjoge1xuICAgICAgXCJ0eXBlc1wiOiBcIi4vaW5kZXguZC50c1wiLFxuICAgICAgXCJkZWZhdWx0XCI6IFwiLi9pbmRleC5qc1wiXG4gICAgfSxcbiAgICBcIi4vcGFja2FnZVwiOiBcIi4vcGFja2FnZS5qc29uXCIsXG4gICAgXCIuL2NvbnN0YW50c1wiOiBcIi4vbGliL2NvbnN0YW50cy5qc1wiLFxuICAgIFwiLi9lcnJvcnNcIjogXCIuL2xpYi9lcnJvcnMuanNcIlxuICB9LFxuICBcImZpbGVzXCI6IFtcbiAgICBcImluZGV4LmpzXCIsXG4gICAgXCJpbmRleC5kLnRzXCIsXG4gICAgXCJiaW5kaW5nLmNcIixcbiAgICBcImJpbmRpbmcuanNcIixcbiAgICBcIkNNYWtlTGlzdHMudHh0XCIsXG4gICAgXCJsaWJcIixcbiAgICBcInByZWJ1aWxkc1wiXG4gIF0sXG4gIFwiYWRkb25cIjogdHJ1ZSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcInRlLi4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZTllMjk0NDQtYzU1Mi00MTI0LWI2M2QtY2UwYTQ2M2YxMzA4O3Rvb2x1X3ZydHhfMDE0c0w0NWVzV3pRelJmOEE0UWpYTG1nIjp7InJlcXVlc3RJZCI6ImU5ZTI5NDQ0LWM1NTItNDEyNC1iNjNkLWNlMGE0NjNmMTMwOCIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDE0c0w0NWVzV3pRelJmOEE0UWpYTG1nIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiVGhlIGZvbGxvd2luZyBjb2RlIHNlY3Rpb25zIHdlcmUgcmV0cmlldmVkOlxuUGF0aDogbm9kZV9tb2R1bGVzL2Fqdi9zY3JpcHRzL3RyYXZpcy1naC1wYWdlc1xuIyEvdXNyL2Jpbi9lbnYgYmFzaFxuXG5zZXQgLWVcblxuaWYgW1sgXCIkVFJBVklTX0JSQU5DSFwiID09IFwibWFzdGVyXCIgJiYgXCIkVFJBVklTX1BVTExfUkVRVUVTVFwiID09IFwiZmFsc2VcIiAmJiAkVFJBVklTX0pPQl9OVU1CRVIgPX4gXCIuM1wiIF1dOyB0aGVuXG4gIGdpdCBkaWZmIC0tbmFtZS1vbmx5ICRUUkFWSVNfQ09NTUlUX1JBTkdFIHwgZ3JlcCAtcUUgJ1xcLm1kJHxeTElDRU5TRSR8dHJhdmlzLWdoLXBhZ2VzJCcgJiYge1xuICAgIHJtIC1yZiAuLi9naC1wYWdlc1xuICAgIGdpdCBjbG9uZSAtYiBnaC1wYWdlcyAtLXNpbmdsZS1icmFuY2ggaHR0cHM6Ly8ke0dJVEhVQl9UT0tFTn1AZ2l0aHViLmNvbS9hanYtdmFsaWRhdG9yL2Fqdi5naXQgLi4vZ2gtcGFnZXNcbiAgICBta2RpciAtcCAuLi9naC1wYWdlcy9fc291cmNlXG4gICAgY3AgKi5tZCAuLi9naC1wYWdlcy9fc291cmNlXG4gICAgY3AgTElDRU5TRSAuLi9naC1wYWdlcy9fc291cmNlXG4gICAgY3VycmVudERpcj0kKHB3ZClcbiAgICBjZCAuLi9naC1wYWdlc1xuICAgICRjdXJyZW50RGlyL25vZGVfbW9kdWxlcy8uYmluL2doLXBhZ2VzLWdlbmVyYXRvclxuICAgICMgcmVtb3ZlIGxvZ28gZnJvbSBSRUFETUVcbiAgICBzZWQgLWkgLUUgXCJzLzxpbWdbXj5dK2Fqdl9sb2dvW14+XSs+Ly9cIiBpbmRleC5tZFxuICAgIGdpdCBjb25maWcgdXNlci5lbWFpbCBcIiRHSVRfVVNFUl9FTUFJTFwiXG4gICAgZ2l0IGNvbmZpZyB1c2VyLm5hbWUgXCIkR0lUX1VTRVJfTkFNRVwiXG4gICAgZ2l0IGFkZCAuXG4gICAgZ2l0IGNvbW1pdCAtYW0gXCJ1cGRhdGVkIGJ5IHRyYXZpcyBidWlsZCAjJFRSQVZJU19CVUlMRF9OVU1CRVJcIlxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvLmJpbi9naC1wYWdlc1xuIyEvdXNyL2Jpbi9lbnYgbm9kZVxuXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3Qge0NvbW1hbmR9ID0gcmVxdWlyZSgnY29tbWFuZGVyJyk7XG5jb25zdCBhZGRyID0gcmVxdWlyZSgnZW1haWwtYWRkcmVzc2VzJyk7XG5jb25zdCBnaHBhZ2VzID0gcmVxdWlyZSgnLi4vbGliL2luZGV4LmpzJyk7XG5jb25zdCBwa2cgPSByZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKTtcblxuZnVuY3Rpb24gcHVibGlzaChkaXN0LCBjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBiYXNlUGF0aCA9IHBhdGgucmVzb2x2ZShwcm9jZXNzLmN3ZCgpLCBkaXN0KTtcbiAgICBnaHBhZ2VzLnB1Ymxpc2goYmFzZVBhdGgsIGNvbmZpZywgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXR1cm4gcmVqZWN0KGVycik7XG4gICAgICB9XG4gICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBtYWluKGFyZ3MpIHtcbiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oKCkgPT4ge1xuICAgIGNvbnN0IHByb2dyYW0gPSBuZXcgQ29tbWFuZCgpXG4gICAgICAudmVyc2lvbihwa2cudmVyc2lvbilcbiAgICAgIC5yZXF1aXJlZE9wdGlvbihcbiAgICAgICAgJy1kLCAtLWRpc3QgPGRpc3Q+JyxcbiAgICAgICAgJ0Jhc2UgZGlyZWN0b3J5IGZvciBhbGwgc291cmNlIGZpbGVzJyxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctcywgLS1zcmMgPHNyYz4nLFxuICAgICAgICAnUGF0dGVybiB1c2VkIHRvIHNlbGVjdCB3aGljaCBmaWxlcyB0byBwdWJsaXNoJyxcbiAgICAgICAgZ2hwYWdlcy5kZWZhdWx0cy5zcmMsXG4gICAgICApXG4gICAgICAub3B0aW9uKFxuICAgICAgICAnLWIsIC0tYnJhbmNoIDxicmFuY2g+JyxcbiAgICAgICAgJ05hbWUgb2YgdGhlIGJyYW5jaCB5b3UgYXJlIHB1c2hpbmcgdG8nLFxuICAgICAgICBnaHBhZ2VzLmRlZmF1bHRzLmJyYW5jaCxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctZSwgLS1kZXN0IDxkZXN0PicsXG4gICAgICAgICdUYXJnZXQgZGlyZWN0b3J5IHdpdGhpbiB0aGUgZGVzdGluYXRpb24gYnJhbmNoIChyZWxhdGl2ZSB0byB0aGUgcm9vdCknLFxuICAgICAgICBnaHBhZ2VzLmRlZmF1bHRzLmRlc3QsXG4gICAgICApXG4gICAgICAub3B0aW9uKCctYSwgLS1hZGQnLCAnT25seSBhZGQsIGFuZCBuZXZlciByZW1vdmUgZXhpc3RpbmcgZmlsZXMnKVxuICAgICAgLm9wdGlvbignLXgsIC0tc2lsZW50JywgJ0RvIG5vdCBvdXRwdXQgdGhlIHJlcG9zaXRvcnkgdXJsJylcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctbSwgLS1tZXNzYWdlIDxtZXNzYWdlPicsXG4gICAgICAgICdjb21taXQgbWVzc2FnZScsXG4gICAgICAgIGdocGFnZXMuZGVmYXVsdHMubWVzc2FnZSxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oJy1nLCAtLXRhZyA8dGFnPicsICdhZGQgdGFnIHRvIGNvbW1pdCcpXG4gICAgICAub3B0aW9uKCctLWdpdCA8Z2l0PicsICdQYXRoIHRvIGdpdCBleGVjdXRhYmxlJywgZ2hwYWdlcy5kZWZhdWx0cy5naXQpXG4gICAgICAub3B0aW9uKCctdCwgLS1kb3RmaWxlcycsICdJbmNsdWRlIGRvdGZpbGVzJylcbiAgICAgIC5vcHRpb24oJy0tbm9qZWt5bGwnLCAnQWRkIGEgLm5vamVreWxsIGZpbGUgdG8gZGlzYWJsZSBKZWt5bGwnKVxuICAgICAgLm9wdGlvbihcbiAgICAgICAgJy0tY25hbWUgPENOQU1FPicsXG4gICAgICAgICdBZGQgYSBDTkFNRSBmaWxlIHdpdGggdGhlIG5hbWUgb2YgeW91ciBjdXN0b20gZG9tYWluJyxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oJy1yLCAtLXJlcG8gPHJlcG8+JywgJ1VSTCBvZiB0aGUgcmVwb3NpdG9yeSB5b3UgYXJlIHB1c2hpbmcgdG8nKVxuICAgICAgLm9wdGlvbignLXAsIC0tZGVwdGggPGRlcHRoPicsICdkZXB0aCBmb3IgY2xvbmUnLCBnaHBhZ2VzLmRlZmF1bHRzLmRlcHRoKVxuICAgICAgLm9wdGlvbihcbiAgICAgICAgJy1vLCAtLXJlbW90ZSA8bmFtZT4nLFxuICAgICAgICAnVGhlIG5hbWUgb2YgdGhlIHJlbW90ZScsXG4gICAgICAgIGdocGFnZXMuZGVmYXVsdHMucmVtb3RlLFxuICAgICAgKVxuICAgICAgLm9wdGlvbihcbiAgICAgICAgJy11LCAtLXVzZXIgPGFkZHJlc3M+JyxcbiAgICAgICAgJ1RoZSBuYW1lIGFuZCBlbWFpbCBvZiB0aGUgdXNlciAoZGVmYXVsdHMgdG8gdGhlIGdpdCBjb25maWcpLiAgRm9ybWF0IGlzIFwiWW91ciBOYW1lIDxlbWFpbEBleGFtcGxlLmNvbT5cIi4nLFxuICAgICAgKVxuICAgICAgLm9wdGlvbihcbiAgICAgICAgJy12LCAtLXJlbW92ZSA8cGF0dGVybj4nLFxuICAgICAgICAnUmVtb3ZlIGZpbGVzIHRoYXQgbWF0Y2ggdGhlIGdpdmVuIHBhdHRlcm4gJyArXG4gICAgICAgICAgJyhpZ25vcmVkIGlmIHVzZWQgdG9nZXRoZXIgd2l0aCAtLWFkZCkuJyxcbiAgICAgICAgZ2hwYWdlcy5kZWZhdWx0cy5yZW1vdmUsXG4gICAgICApXG4gICAgICAub3B0aW9uKCctbiwgLS1uby1wdXNoJywgJ0NvbW1pdCBvbmx5ICh3aXRoIG5vIHB1c2gpJylcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctZiwgLS1uby1oaXN0b3J5JyxcbiAgICAgICAgJ1B1c2ggZm9yY2UgbmV3IGNvbW1pdCB3aXRob3V0IHBhcmVudCBoaXN0b3J5JyxcbiAgICAgIClcbiAgICAgIC5vcHRpb24oXG4gICAgICAgICctLWJlZm9yZS1hZGQgPGZpbGU+JyxcbiAgICAgICAgJ0V4ZWN1dGUgdGhlIGZ1bmN0aW9uIGV4cG9ydGVkIGJ5IDxmaWxlPiBiZWZvcmUgXCJnaXQgYWRkXCInLFxuICAgICAgKVxuICAgICAgLnBhcnNlKGFyZ3MpO1xuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHByb2dyYW0ub3B0cygpO1xuXG4gICAgbGV0IHVzZXI7XG4gICAgaWYgKG9wdGlvbnMudXNlcikge1xuICAgICAgY29uc3QgcGFydHMgPSBhZGRyLnBhcnNlT25lQWRkcmVzcyhvcHRpb25zLnVzZXIpO1xuICAgICAgaWYgKCFwYXJ0cykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYENvdWxkIG5vdCBwYXJzZSBuYW1lIGFuZCBlbWFpbCBmcm9tIHVzZXIgb3B0aW9uIFwiJHtvcHRpb25zLnVzZXJ9XCIgYCArXG4gICAgICAgICAgICAnKGZvcm1hdCBzaG91bGQgYmUgXCJZb3VyIE5hbWUgPGVtYWlsQGV4YW1wbGUuY29tPlwiKScsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB1c2VyID0ge25hbWU6IHBhcnRzLm5hbWUsIGVtYWlsOiBwYXJ0cy5hZGRyZXNzfTtcbiAgICB9XG4gICAgbGV0IGJlZm9yZUFkZDtcbiAgICBpZiAob3B0aW9ucy5iZWZvcmVBZGQpIHtcbiAgICAgIGNvbnN0IG0gPSByZXF1aXJlKFxuICAgICAgICByZXF1aXJlLnJlc29sdmUob3B0aW9ucy5iZWZvcmVBZGQsIHtcbiAgICAgICAgICBwYXRoczogW3Byb2Nlc3MuY3dkKCldLFxuICAgICAgICB9KSxcbiAgICAgICk7XG5cbiAgICAgIGlmICh0eXBlb2YgbSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBiZWZvcmVBZGQgPSBtO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG0uZGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBiZWZvcmVBZGQgPSBtLmRlZmF1bHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYENvdWxkIG5vdCBmaW5kIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgYmVmb3JlIGFkZGluZyBmaWxlcyBpbiBgICtcbiAgICAgICAgICAgIGBcIiR7b3B0aW9ucy5iZWZvcmVBZGR9XCIuXFxuIGAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY29uZmlnID0ge1xuICAgICAgcmVwbzogb3B0aW9ucy5yZXBvLFxuICAgICAgc2lsZW50OiAhIW9wdGlvbnMuc2lsZW50LFxuICAgICAgYnJhbmNoOiBvcHRpb25zLmJyYW5jaCxcbiAgICAgIHNyYzogb3B0aW9ucy5zcmMsXG4gICAgICBkZXN0OiBvcHRpb25zLmRlc3QsXG4gICAgICBtZXNzYWdlOiBvcHRpb25zLm1lc3NhZ2UsXG4gICAgICB0YWc6IG9wdGlvbnMudGFnLFxuICAgICAgZ2l0OiBvcHRpb25zLmdpdCxcbiAgICAgIGRlcHRoOiBvcHRpb25zLmRlcHRoLFxuICAgICAgZG90ZmlsZXM6ICEhb3B0aW9ucy5kb3RmaWxlcyxcbiAgICAgIG5vamVreWxsOiAhIW9wdGlvbnMubm9qZWt5bGwsXG4gICAgICBjbmFtZTogb3B0aW9ucy5jbmFtZSxcbiAgICAgIGFkZDogISFvcHRpb25zLmFkZCxcbiAgICAgIHJlbW92ZTogb3B0aW9ucy5yZW1vdmUsXG4gICAgICByZW1vdGU6IG9wdGlvbnMucmVtb3RlLFxuICAgICAgcHVzaDogISFvcHRpb25zLnB1c2gsXG4gICAgICBoaXN0b3J5OiAhIW9wdGlvbnMuaGlzdG9yeSxcbiAgICAgIHVzZXI6IHVzZXIsXG4gICAgICBiZWZvcmVBZGQ6IGJlZm9yZUFkZCxcbiAgICB9O1xuXG4gICAgcmV0dXJuIHB1Ymxpc2gob3B0aW9ucy5kaXN0LCBjb25maWcpO1xuICB9KTtcbn1cblxuaWYgKHJlcXVpcmUubWFpbiA9PT0gbW9kdWxlKSB7XG4gIG1haW4ocHJvY2Vzcy5hcmd2KVxuICAgIC50aGVuKCgpID0+IHtcbiAgICAgIHByb2Nlc3Muc3Rkb3V0LndyaXRlKCdQdWJsaXNoZWRcXG4nKTtcbiAgICB9KVxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICBwcm9jZXNzLnN0ZGVyci53cml0ZShgJHtlcnIuc3RhY2t9XFxuYCwgKCkgPT4gcHJvY2Vzcy5leGl0KDEpKTtcbiAgICB9KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYWluO1xuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzO1xuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvbGlsY29uZmlnL3NyYy9pbmRleC5qc1xuLy8gQHRzLWNoZWNrXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xuY29uc3Qgb3MgPSByZXF1aXJlKCdvcycpO1xuY29uc3QgdXJsID0gcmVxdWlyZSgndXJsJyk7XG5cbmNvbnN0IGZzUmVhZEZpbGVBc3luYyA9IGZzLnByb21pc2VzLnJlYWRGaWxlO1xuXG4vKiogQHR5cGUgeyhuYW1lOiBzdHJpbmcsIHN5bmM6IGJvb2xlYW4pID0+IHN0cmluZ1tdfSAqL1xuZnVuY3Rpb24gZ2V0RGVmYXVsdFNlYXJjaFBsYWNlcyhuYW1lLCBzeW5jKSB7XG5cdHJldHVybiBbXG5cdFx0J3BhY2thZ2UuanNvbicsXG5cdFx0YC4ke25hbWV9cmMuanNvbmAsXG5cdFx0YC4ke25hbWV9cmMuanNgLFxuXHRcdGAuJHtuYW1lfXJjLmNqc2AsXG5cdFx0Li4uKHN5bmMgPyBbXSA6IFtgLiR7bmFtZX1yYy5tanNgXSksXG5cdFx0YC5jb25maWcvJHtuYW1lfXJjYCxcblx0XHRgLmNvbmZpZy8ke25hbWV9cmMuanNvbmAsXG5cdFx0YC5jb25maWcvJHtuYW1lfXJjLmpzYCxcblx0XHRgLmNvbmZpZy8ke25hbWV9cmMuY2pzYCxcblx0XHQuLi4oc3luYyA/IFtdIDogW2AuY29uZmlnLyR7bmFtZX1yYy5tanNgXSksXG5cdFx0YCR7bmFtZX0uY29uZmlnLmpzYCxcblx0XHRgJHtuYW1lfS5jb25maWcuY2pzYCxcblx0XHQuLi4oc3luYyA/IFtdIDogW2Ake25hbWV9LmNvbmZpZy5tanNgXSksXG5cdF07XG59XG4uLi5cblxuLyoqIEB0eXBlIHtpbXBvcnQoJy4vaW5kZXgnKS5saWxjb25maWd9ICovXG5tb2R1bGUuZXhwb3J0cy5saWxjb25maWcgPSBmdW5jdGlvbiBsaWxjb25maWcobmFtZSwgb3B0aW9ucykge1xuXHRjb25zdCB7XG5cdFx0aWdub3JlRW1wdHlTZWFyY2hQbGFjZXMsXG5cdFx0bG9hZGVycyxcblx0XHRwYWNrYWdlUHJvcCxcblx0XHRzZWFyY2hQbGFjZXMsXG5cdFx0c3RvcERpcixcblx0XHR0cmFuc2Zvcm0sXG5cdFx0Y2FjaGUsXG5cdH0gPSBnZXRPcHRpb25zKG5hbWUsIG9wdGlvbnMgPz8ge30sIGZhbHNlKTtcblx0Y29uc3Qgc2VhcmNoQ2FjaGUgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IGxvYWRDYWNoZSA9IG5ldyBNYXAoKTtcblx0Y29uc3QgZW1wbGFjZSA9IG1ha2VFbXBsYWNlKGNhY2hlKTtcblxuXHRyZXR1cm4ge1xuXHRcdGFzeW5jIHNlYXJjaChzZWFyY2hGcm9tID0gcHJvY2Vzcy5jd2QoKSkge1xuXHRcdFx0LyoqIEB0eXBlIHtpbXBvcnQoJy4vaW5kZXgnKS5MaWxjb25maWdSZXN1bHR9ICovXG5cdFx0XHRjb25zdCByZXN1bHQgPSB7XG5cdFx0XHRcdGNvbmZpZzogbnVsbCxcblx0XHRcdFx0ZmlsZXBhdGg6ICcnLFxuXHRcdFx0fTtcblxuXHRcdFx0LyoqIEB0eXBlIHtTZXQ8c3RyaW5nPn0gKi9cblx0XHRcdGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG5cdFx0XHRsZXQgZGlyID0gc2VhcmNoRnJvbTtcblx0XHRcdGRpckxvb3A6IHdoaWxlICh0cnVlKSB7XG5cdFx0XHRcdGlmIChjYWNoZSkge1xuXHRcdFx0XHRcdGNvbnN0IHIgPSBzZWFyY2hDYWNoZS5nZXQoZGlyKTtcblx0XHRcdFx0XHRpZiAociAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRmb3IgKGNvbnN0IHAgb2YgdmlzaXRlZCkgc2VhcmNoQ2FjaGUuc2V0KHAsIHIpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHI7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZpc2l0ZWQuYWRkKGRpcik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKGNvbnN0IHNlYXJjaFBsYWNlIG9mIHNlYXJjaFBsYWNlcykge1xuXHRcdFx0XHRcdGNvbnN0IGZpbGVwYXRoID0gcGF0aC5qb2luKGRpciwgc2VhcmNoUGxhY2UpO1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRhd2FpdCBmcy5wcm9taXNlcy5hY2Nlc3MoZmlsZXBhdGgpO1xuXHRcdFx0XHRcdH0gY2F0Y2gge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGNvbnN0IGNvbnRlbnQgPSBTdHJpbmcoYXdhaXQgZnNSZWFkRmlsZUFzeW5jKGZpbGVwYXRoKSk7XG5cdFx0XHRcdFx0Y29uc3QgbG9hZGVyS2V5ID0gcGF0aC5leHRuYW1lKHNlYXJjaFBsYWNlKSB8fCAnbm9FeHQnO1xuXHRcdFx0XHRcdGNvbnN0IGxvYWRlciA9IGxvYWRlcnNbbG9hZGVyS2V5XTtcblxuXHRcdFx0XHRcdC8vIGhhbmRsZSBwYWNrYWdlLmpzb25cblx0XHRcdFx0XHRpZiAoc2VhcmNoUGxhY2UgPT09ICdwYWNrYWdlLmpzb24nKSB7XG5cdFx0XHRcdFx0XHRjb25zdCBwa2cgPSBhd2FpdCBsb2FkZXIoZmlsZXBhdGgsIGNvbnRlbnQpO1xuXHRcdFx0XHRcdFx0Y29uc3QgbWF5YmVDb25maWcgPSBnZXRQYWNrYWdlUHJvcChwYWNrYWdlUHJvcCwgcGtnKTtcblx0XHRcdFx0XHRcdGlmIChtYXliZUNvbmZpZyAhPSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3VsdC5jb25maWcgPSBtYXliZUNvbmZpZztcblx0XHRcdFx0XHRcdFx0cmVzdWx0LmZpbGVwYXRoID0gZmlsZXBhdGg7XG5cdFx0XHRcdFx0XHRcdGJyZWFrIGRpckxvb3A7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHRcdH1cbi4uLlxuXG4vKiogQHR5cGUge2ltcG9ydCgnLi9pbmRleCcpLmxpbGNvbmZpZ1N5bmN9ICovXG5tb2R1bGUuZXhwb3J0cy5saWxjb25maWdTeW5jID0gZnVuY3Rpb24gbGlsY29uZmlnU3luYyhuYW1lLCBvcHRpb25zKSB7XG5cdGNvbnN0IHtcblx0XHRpZ25vcmVFbXB0eVNlYXJjaFBsYWNlcyxcblx0XHRsb2FkZXJzLFxuXHRcdHBhY2thZ2VQcm9wLFxuXHRcdHNlYXJjaFBsYWNlcyxcblx0XHRzdG9wRGlyLFxuXHRcdHRyYW5zZm9ybSxcblx0XHRjYWNoZSxcblx0fSA9IGdldE9wdGlvbnMobmFtZSwgb3B0aW9ucyA/PyB7fSwgdHJ1ZSk7XG5cdGNvbnN0IHNlYXJjaENhY2hlID0gbmV3IE1hcCgpO1xuXHRjb25zdCBsb2FkQ2FjaGUgPSBuZXcgTWFwKCk7XG5cdGNvbnN0IGVtcGxhY2UgPSBtYWtlRW1wbGFjZShjYWNoZSk7XG5cblx0cmV0dXJuIHtcblx0XHRzZWFyY2goc2VhcmNoRnJvbSA9IHByb2Nlc3MuY3dkKCkpIHtcblx0XHRcdC8qKiBAdHlwZSB7aW1wb3J0KCcuL2luZGV4JykuTGlsY29uZmlnUmVzdWx0fSAqL1xuXHRcdFx0Y29uc3QgcmVzdWx0ID0ge1xuXHRcdFx0XHRjb25maWc6IG51bGwsXG5cdFx0XHRcdGZpbGVwYXRoOiAnJyxcblx0XHRcdH07XG5cblx0XHRcdC8qKiBAdHlwZSB7U2V0PHN0cmluZz59ICovXG5cdFx0XHRjb25zdCB2aXNpdGVkID0gbmV3IFNldCgpO1xuXHRcdFx0bGV0IGRpciA9IHNlYXJjaEZyb207XG5cdFx0XHRkaXJMb29wOiB3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRpZiAoY2FjaGUpIHtcblx0XHRcdFx0XHRjb25zdCByID0gc2VhcmNoQ2FjaGUuZ2V0KGRpcik7XG5cdFx0XHRcdFx0aWYgKHIgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0Zm9yIChjb25zdCBwIG9mIHZpc2l0ZWQpIHNlYXJjaENhY2hlLnNldChwLCByKTtcblx0XHRcdFx0XHRcdHJldHVybiByO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR2aXNpdGVkLmFkZChkaXIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yIChjb25zdCBzZWFyY2hQbGFjZSBvZiBzZWFyY2hQbGFjZXMpIHtcblx0XHRcdFx0XHRjb25zdCBmaWxlcGF0aCA9IHBhdGguam9pbihkaXIsIHNlYXJjaFBsYWNlKTtcblx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0ZnMuYWNjZXNzU3luYyhmaWxlcGF0aCk7XG5cdFx0XHRcdFx0fSBjYXRjaCB7XG5cdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y29uc3QgbG9hZGVyS2V5ID0gcGF0aC5leHRuYW1lKHNlYXJjaFBsYWNlKSB8fCAnbm9FeHQnO1xuXHRcdFx0XHRcdGNvbnN0IGxvYWRlciA9IGxvYWRlcnNbbG9hZGVyS2V5XTtcblx0XHRcdFx0XHRjb25zdCBjb250ZW50ID0gU3RyaW5nKGZzLnJlYWRGaWxlU3luYyhmaWxlcGF0aCkpO1xuXG5cdFx0XHRcdFx0Ly8gaGFuZGxlIHBhY2thZ2UuanNvblxuXHRcdFx0XHRcdGlmIChzZWFyY2hQbGFjZSA9PT0gJ3BhY2thZ2UuanNvbicpIHtcblx0XHRcdFx0XHRcdGNvbnN0IHBrZyA9IGxvYWRlcihmaWxlcGF0aCwgY29udGVudCk7XG5cdFx0XHRcdFx0XHRjb25zdCBtYXliZUNvbmZpZyA9IGdldFBhY2thZ2VQcm9wKHBhY2thZ2VQcm9wLCBwa2cpO1xuXHRcdFx0XHRcdFx0aWYgKG1heWJlQ29uZmlnICE9IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0LmNvbmZpZyA9IG1heWJlQ29uZmlnO1xuXHRcdFx0XHRcdFx0XHRyZXN1bHQuZmlsZXBhdGggPSBmaWxlcGF0aDtcblx0XHRcdFx0XHRcdFx0YnJlYWsgZGlyTG9vcDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvY29zbWljb25maWcvZGlzdC9kZWZhdWx0cy5qc1xuLi4uXG5leHBvcnRzLmdldERlZmF1bHRTZWFyY2hQbGFjZXNTeW5jID0gZ2V0RGVmYXVsdFNlYXJjaFBsYWNlc1N5bmM7XG5leHBvcnRzLmdsb2JhbENvbmZpZ1NlYXJjaFBsYWNlcyA9IFtcbiAgICAnY29uZmlnJyxcbiAgICAnY29uZmlnLmpzb24nLFxuICAgICdjb25maWcueWFtbCcsXG4gICAgJ2NvbmZpZy55bWwnLFxuICAgICdjb25maWcuanMnLFxuICAgICdjb25maWcudHMnLFxuICAgICdjb25maWcuY2pzJyxcbiAgICAnY29uZmlnLm1qcycsXG5dO1xuZXhwb3J0cy5nbG9iYWxDb25maWdTZWFyY2hQbGFjZXNTeW5jID0gW1xuICAgICdjb25maWcnLFxuICAgICdjb25maWcuanNvbicsXG4gICAgJ2NvbmZpZy55YW1sJyxcbiAgICAnY29uZmlnLnltbCcsXG4gICAgJ2NvbmZpZy5qcycsXG4gICAgJ2NvbmZpZy50cycsXG4gICAgJ2NvbmZpZy5janMnLFxuXTtcbi8vIHRoaXMgbmVlZHMgdG8gYmUgaGFyZGNvZGVkLCBhcyB0aGlzIGlzIGludGVuZGVkIGZvciBlbmQgdXNlcnMsIHdobyBjYW4ndCBzdXBwbHkgb3B0aW9ucyBhdCB0aGlzIHBvaW50XG5leHBvcnRzLm1ldGFTZWFyY2hQbGFjZXMgPSBbXG4gICAgJ3BhY2thZ2UuanNvbicsXG4gICAgJ3BhY2thZ2UueWFtbCcsXG4gICAgJy5jb25maWcvY29uZmlnLmpzb24nLFxuICAgICcuY29uZmlnL2NvbmZpZy55YW1sJyxcbiAgICAnLmNvbmZpZy9jb25maWcueW1sJyxcbiAgICAnLmNvbmZpZy9jb25maWcuanMnLFxuICAgICcuY29uZmlnL2NvbmZpZy50cycsXG4gICAgJy5jb25maWcvY29uZmlnLmNqcycsXG4gICAgJy5jb25maWcvY29uZmlnLm1qcycsXG5dO1xuLi4uXG5QYXRoOiBwYWNrYWdlLmpzb25cbntcbiAgXCJuYW1lXCI6IFwidml0ZV9yZWFjdF9zaGFkY25fdHNcIixcbiAgXCJwcml2YXRlXCI6IHRydWUsXG4gIFwidmVyc2lvblwiOiBcIjAuMC4wXCIsXG4gIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgIFwiYnVpbGRcIjogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgXCJidWlsZDpkZXZcIjogXCJ2aXRlIGJ1aWxkIC0tbW9kZSBkZXZlbG9wbWVudFwiLFxuICAgIFwibGludFwiOiBcImVzbGludCAuXCIsXG4gICAgXCJwcmV2aWV3XCI6IFwidml0ZSBwcmV2aWV3XCJcbiAgfSxcbiAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGhvb2tmb3JtL3Jlc29sdmVyc1wiOiBcIl4zLjkuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFjY29yZGlvblwiOiBcIl4xLjIuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFsZXJ0LWRpYWxvZ1wiOiBcIl4xLjEuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFzcGVjdC1yYXRpb1wiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWF2YXRhclwiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWNoZWNrYm94XCI6IFwiXjEuMS4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtY29sbGFwc2libGVcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1jb250ZXh0LW1lbnVcIjogXCJeMi4yLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1kaWFsb2dcIjogXCJeMS4xLjJcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1kcm9wZG93bi1tZW51XCI6IFwiXjIuMS4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtaG92ZXItY2FyZFwiOiBcIl4xLjEuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LWxhYmVsXCI6IFwiXjIuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtbWVudWJhclwiOiBcIl4xLjEuMVwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LW5hdmlnYXRpb24tbWVudVwiOiBcIl4xLjIuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXJcIjogXCJeMS4xLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1wcm9ncmVzc1wiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXJhZGlvLWdyb3VwXCI6IFwiXjEuMi4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2Nyb2xsLWFyZWFcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zZWxlY3RcIjogXCJeMi4xLjFcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zZXBhcmF0b3JcIjogXCJeMS4xLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zbGlkZXJcIjogXCJeMS4yLjBcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1zbG90XCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3Qtc3dpdGNoXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtdGFic1wiOiBcIl4xLjEuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvYXN0XCI6IFwiXjEuMi4xXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9nZ2xlXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9nZ2xlLWdyb3VwXCI6IFwiXjEuMS4wXCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9vbHRpcFwiOiBcIl4xLjEuNFwiLFxuICAgIFwiQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5XCI6IFwiXjUuNTYuMlwiLFxuICAgIFwiY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5XCI6IFwiXjAuNy4xXCIsXG4gICAgXCJjbHN4XCI6IFwiXjIuMS4xXCIsXG4gICAgXCJjbWRrXCI6IFwiXjEuMC4wXCIsXG4gICAgXCJkYXRlLWZuc1wiOiBcIl4zLjYuMFwiLFxuICAgIFwiZW1ibGEtY2Fyb3VzZWwtcmVhY3RcIjogXCJeOC4zLjBcIixcbiAgICBcImlucHV0LW90cFwiOiBcIl4xLjIuNFwiLFxuICAgIFwibHVjaWRlLXJlYWN0XCI6IFwiXjAuNDYyLjBcIixcbiAgICBcIm5leHQtdGhlbWVzXCI6IFwiXjAuMy4wXCIsXG4gICAgXCJyZWFjdFwiOiBcIl4xOC4zLjFcIixcbiAgICBcInJlYWN0LWRheS1waWNrZXJcIjogXCJeOC4xMC4xXCIsXG4gICAgXCJyZWFjdC1kb21cIjogXCJeMTguMy4xXCIsXG4gICAgXCJyZWFjdC1ob29rLWZvcm1cIjogXCJeNy41My4wXCIsXG4gICAgXCJyZWFjdC1yZXNpemFibGUtcGFuZWxzXCI6IFwiXjIuMS4zXCIsXG4gICAgXCJyZWFjdC1yb3V0ZXItZG9tXCI6IFwiXjYuMjYuMlwiLFxuICAgIFwicmVjaGFydHNcIjogXCJeMi4xMi43XCIsXG4gICAgXCJzb25uZXJcIjogXCJeMS41LjBcIixcbiAgICBcInRhaWx3aW5kLW1lcmdlXCI6IFwiXjIuNS4yXCIsXG4gICAgXCJ0YWlsd2luZGNzcy1hbmltYXRlXCI6IFwiXjEuMC43XCIsXG4gICAgXCJ2YXVsXCI6IFwiXjAuOS4zXCIsXG4gICAgXCJ6b2RcIjogXCJeMy4yMy44XCJcbiAgfSxcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIFwiQGVzbGludC9qc1wiOiBcIl45LjkuMFwiLFxuICAgIFwiQHRhaWx3aW5kY3NzL3R5cG9ncmFwaHlcIjogXCJeMC41LjE1XCIsXG4gICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMi41LjVcIixcbiAgICBcIkB0eXBlcy9yZWFjdFwiOiBcIl4xOC4zLjNcIixcbiAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMy4wXCIsXG4gICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjogXCJeMy41LjBcIixcbiAgICBcImF1dG9wcmVmaXhlclwiOiBcIl4xMC40LjIwXCIsXG4gICAgXCJlc2xpbnRcIjogXCJeOS45LjBcIixcbiAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNS4xLjAtcmMuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1yZWZyZXNoXCI6IFwiXjAuNC45XCIsXG4gICAgXCJnaC1wYWdlc1wiOiBcIl42LjMuMFwiLFxuICAgIFwiZ2xvYmFsc1wiOiBcIl4xNS45LjBcIixcbiAgICBcInBvc3Rjc3NcIjogXCJeOC40LjQ3XCIsXG4gICAgXCJ0YWlsd2luZGNzc1wiOiBcIl4zLjQuMTFcIixcbiAgICBcInR5cGVzY3JpcHRcIjogXCJeNS41LjNcIixcbiAgICBcInR5cGVzY3JpcHQtZXNsaW50XCI6IFwiXjguMC4xXCIsXG4gICAgXCJ2aXRlXCI6IFwiXjUuNC4xXCJcbiAgfVxufVxuLi4uXG5QYXRoOiBkaXN0Ly5ub2pla3lsbFxuXG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9mYXN0cS8uZ2l0aHViL3dvcmtmbG93cy9jaS55bWxcbm5hbWU6IGNpXG5cbm9uOiBbcHVzaCwgcHVsbF9yZXF1ZXN0XVxuXG5qb2JzOlxuICBsZWdhY3k6XG4gICAgcnVucy1vbjogdWJ1bnR1LWxhdGVzdFxuXG4gICAgc3RyYXRlZ3k6XG4gICAgICBtYXRyaXg6XG4gICAgICAgIG5vZGUtdmVyc2lvbjogWycwLjEwJywgJzAuMTInLCA0LngsIDYueCwgOC54XVxuXG4gICAgc3RlcHM6XG4gICAgICAtIHVzZXM6IGFjdGlvbnMvY2hlY2tvdXRAdjNcbiAgICAgICAgd2l0aDpcbiAgICAgICAgICBwZXJzaXN0LWNyZWRlbnRpYWxzOiBmYWxzZVxuXG4gICAgICAtIG5hbWU6IFVzZSBOb2RlLmpzXG4gICAgICAgIHVzZXM6IGFjdGlvbnMvc2V0dXAtbm9kZUB2MVxuICAgICAgICB3aXRoOlxuICAgICAgICAgIG5vZGUtdmVyc2lvbjogJHt7IG1hdHJpeC5ub2RlLXZlcnNpb24gfX1cblxuICAgICAgLSBuYW1lOiBJbnN0YWxsXG4gICAgICAgIHJ1bjogfFxuICAgICAgICAgIG5wbSBpbnN0YWxsIC0tcHJvZHVjdGlvbiAmJiBucG0gaW5zdGFsbCB0YXBlXG5cbiAgICAgIC0gbmFtZTogUnVuIHRlc3RzXG4gICAgICAgIHJ1bjogfFxuICAgICAgICAgIG5wbSBydW4gbGVnYWN5XG5cbiAgdGVzdDpcbiAgICBydW5zLW9uOiB1YnVudHUtbGF0ZXN0XG5cbiAgICBzdHJhdGVneTpcbiAgICAgIG1hdHJpeDpcbiAgICAgICAgbm9kZS12ZXJzaW9uOiBbMTAueCwgMTIueCwgMTMueCwgMTQueCwgMTUueCwgMTYueCwgMTgueCwgMjAueF1cblxuICAgIHN0ZXBzOlxuICAgICAgLSB1c2VzOiBhY3Rpb25zL2NoZWNrb3V0QHYzXG4gICAgICAgIHdpdGg6XG4gICAgICAgICAgcGVyc2lzdC1jcmVkZW50aWFsczogZmFsc2VcblxuICAgICAgLSBuYW1lOiBVc2UgTm9kZS5qc1xuICAgICAgICB1c2VzOiBhY3Rpb25zL3NldHVwLW5vZGVAdjNcbiAgICAgICAgd2l0aDpcbiAgICAgICAgICBub2RlLXZlcnNpb246ICR7eyBtYXRyaXgubm9kZS12ZXJzaW9uIH19XG5cbiAgICAgIC0gbmFtZTogSW5zdGFsbFxuICAgICAgICBydW46IHxcbiAgICAgICAgICBucG0gaW5zdGFsbFxuXG4gICAgICAtIG5hbWU6IFJ1biB0ZXN0c1xuICAgICAgICBydW46IHxcbiAgICAgICAgICBucG0gcnVuIHRlc3RcblxuICB0eXBlczpcbiAgICBydW5zLW9uOiB1YnVudHUtbGF0ZXN0XG5cbiAgICBzdGVwczpcbiAgICAgIC0gdXNlczogYWN0aW9ucy9jaGVja291dEB2M1xuICAgICAgICB3aXRoOlxuICAgICAgICAgIHBlcnNpc3QtY3JlZGVudGlhbHM6IGZhbHNlXG5cbiAgICAgIC0gbmFtZTogVXNlIE5vZGUuanNcbiAgICAgICAgdXNlczogYWN0aW9ucy9zZXR1cC1ub2RlQHYzXG4gICAgICAgIHdpdGg6XG4gICAgICAgICAgbm9kZS12ZXJzaW9uOiAxNlxuXG4gICAgICAtIG5hbWU6IEluc3RhbGxcbiAgICAgICAgcnVuOiB8XG4gICAgICAgICAgbnBtIGluc3RhbGxcblxuICAgICAgLSBuYW1lOiBSdW4gdHlwZXMgdGVzdHNcbiAgICAgICAgcnVuOiB8XG4gICAgICAgICAgbnBtIHJ1biB0eXBlc2NyaXB0XG4uLi5cblBhdGg6IHB1YmxpYy8ubm9qZWt5bGxcblxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvYXN0LXR5cGVzLy5naXRodWIvd29ya2Zsb3dzL21haW4ueW1sXG5uYW1lOiBDSVxuXG5vbjpcbiAgcHVzaDpcbiAgICBicmFuY2hlczogWyBtYXN0ZXIgXVxuICBwdWxsX3JlcXVlc3Q6XG4gICAgYnJhbmNoZXM6IFsgbWFzdGVyIF1cblxuam9iczpcbiAgdGVzdDpcbiAgICBuYW1lOiBUZXN0IG9uIG5vZGUgJHt7IG1hdHJpeC5ub2RlX3ZlcnNpb24gfX0gYW5kICR7eyBtYXRyaXgub3MgfX1cbiAgICBydW5zLW9uOiAke3sgbWF0cml4Lm9zIH19XG4gICAgc3RyYXRlZ3k6XG4gICAgICBtYXRyaXg6XG4gICAgICAgIG5vZGVfdmVyc2lvbjogWycxMCcsICcxMicsICcxNCddXG4gICAgICAgIG9zOiBbdWJ1bnR1LWxhdGVzdF1cblxuICAgIHN0ZXBzOlxuICAgIC0gdXNlczogYWN0aW9ucy9jaGVja291dEB2MlxuICAgIC0gbmFtZTogVXNlIE5vZGUuanMgJHt7IG1hdHJpeC5ub2RlX3ZlcnNpb24gfX1cbiAgICAgIHVzZXM6IGFjdGlvbnMvc2V0dXAtbm9kZUB2MVxuICAgICAgd2l0aDpcbiAgICAgICAgbm9kZS12ZXJzaW9uOiAke3sgbWF0cml4Lm5vZGVfdmVyc2lvbiB9fVxuXG4gICAgLSBuYW1lOiBucG0gaW5zdGFsbCwgYnVpbGQgYW5kIHRlc3RcbiAgICAgIHJ1bjogfFxuICAgICAgICBucG0gaW5zdGFsbFxuICAgICAgICBucG0gcnVuIGJ1aWxkIC0taWYtcHJlc2VudFxuICAgICAgICBucG0gdGVzdFxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvZmFzdC1lcXVhbHMvLnJlbGVhc2UtaXQuanNvblxue1xuICBcImdpdGh1YlwiOiB7XG4gICAgXCJyZWxlYXNlXCI6IHRydWUsXG4gICAgXCJ0YWdOYW1lXCI6IFwidiR7dmVyc2lvbn1cIlxuICB9LFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiYmVmb3JlU3RhcnRcIjogXCJucG0gcnVuIHByZXB1Ymxpc2g6Y29tcGlsZVwiXG4gIH1cbn1cbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL3Byb3h5LWZyb20tZW52Ly50cmF2aXMueW1sXG5sYW5ndWFnZTogbm9kZV9qc1xubm9kZV9qczpcbiAgLSBub2RlXG4gIC0gbHRzLypcbnNjcmlwdDpcbiAgLSBucG0gcnVuIGxpbnRcbiAgIyB0ZXN0LWNvdmVyYWdlIHdpbGwgYWxzbyBydW4gdGhlIHRlc3RzLCBidXQgZG9lcyBub3QgcHJpbnQgaGVscGZ1bCBvdXRwdXQgdXBvbiB0ZXN0IGZhaWx1cmUuXG4gICMgU28gd2UgYWxzbyBydW4gdGhlIHRlc3RzIHNlcGFyYXRlbHkuXG4gIC0gbnBtIHJ1biB0ZXN0XG4gIC0gbnBtIHJ1biB0ZXN0LWNvdmVyYWdlICYmIGNhdCBjb3ZlcmFnZS9sY292LmluZm8gfCAuL25vZGVfbW9kdWxlcy8uYmluL2NvdmVyYWxscyAmJiBybSAtcmYgY292ZXJhZ2Vcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzLy5iaW4vZ2gtcGFnZXMtY2xlYW5cbiMhL3Vzci9iaW4vZW52IG5vZGVcblxuY29uc3QgZ2hwYWdlcyA9IHJlcXVpcmUoJy4uL2xpYi9pbmRleC5qcycpO1xuXG5mdW5jdGlvbiBtYWluKCkge1xuICBnaHBhZ2VzLmNsZWFuKCk7XG59XG5cbmlmIChyZXF1aXJlLm1haW4gPT09IG1vZHVsZSkge1xuICBtYWluKCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFpbjtcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2ppdGkvcGFja2FnZS5qc29uXG4uLi5cbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImJ1aWxkXCI6IFwicG5wbSBjbGVhbiAmJiBOT0RFX0VOVj1wcm9kdWN0aW9uIHBucG0gd2VicGFja1wiLFxuICAgIFwiY2xlYW5cIjogXCJybSAtcmYgZGlzdFwiLFxuICAgIFwiZGV2XCI6IFwicG5wbSBjbGVhbiAmJiBwbnBtIHdlYnBhY2sgLS13YXRjaFwiLFxuICAgIFwiaml0aVwiOiBcIkpJVElfREVCVUc9MSBKSVRJX0NBQ0hFPWZhbHNlIEpJVElfUkVRVUlSRV9DQUNIRT1mYWxzZSAuL2Jpbi9qaXRpLmpzXCIsXG4gICAgXCJqaXRpOmxlZ2FjeVwiOiBcIkpJVElfREVCVUc9MSBucHggbm9kZUAxMiAuL2Jpbi9qaXRpLmpzXCIsXG4gICAgXCJsaW50XCI6IFwiZXNsaW50IC4gJiYgcHJldHRpZXIgLWMgc3JjIGxpYiB0ZXN0IHN0dWJzXCIsXG4gICAgXCJsaW50OmZpeFwiOiBcImVzbGludCAtLWZpeCAuICYmIHByZXR0aWVyIC13IHNyYyBsaWIgdGVzdCBzdHVic1wiLFxuICAgIFwicmVsZWFzZVwiOiBcInBucG0gYnVpbGQgJiYgcG5wbSB0ZXN0ICYmIGNoYW5nZWxvZ2VuIC0tcmVsZWFzZSAtLXB1c2ggJiYgbnBtIHB1Ymxpc2hcIixcbiAgICBcInRlc3RcIjogXCJwbnBtIGxpbnQgJiYgdml0ZXN0IHJ1biAtLWNvdmVyYWdlICYmIHBucG0gdGVzdDpidW5cIixcbiAgICBcInRlc3Q6YnVuXCI6IFwiYnVuIC0tYnVuIHRlc3QgdGVzdC9idW5cIlxuICB9LFxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvaXMtY29yZS1tb2R1bGUvLm55Y3JjXG57XG5cdFwiYWxsXCI6IHRydWUsXG5cdFwiY2hlY2stY292ZXJhZ2VcIjogZmFsc2UsXG5cdFwicmVwb3J0ZXJcIjogW1widGV4dC1zdW1tYXJ5XCIsIFwidGV4dFwiLCBcImh0bWxcIiwgXCJqc29uXCJdLFxuXHRcImV4Y2x1ZGVcIjogW1xuXHRcdFwiY292ZXJhZ2VcIixcblx0XHRcInRlc3RcIlxuXHRdXG59XG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy9mYXN0LWVxdWFscy8ucmVsZWFzZS1pdC5iZXRhLmpzb25cbntcbiAgXCJnaXRodWJcIjoge1xuICAgIFwicmVsZWFzZVwiOiB0cnVlLFxuICAgIFwidGFnTmFtZVwiOiBcInYke3ZlcnNpb259XCJcbiAgfSxcbiAgXCJucG1cIjoge1xuICAgIFwidGFnXCI6IFwibmV4dFwiXG4gIH0sXG4gIFwicHJlUmVsZWFzZUlkXCI6IFwiYmV0YVwiLFxuICBcInNjcmlwdHNcIjoge1xuICAgIFwiYmVmb3JlU3RhcnRcIjogXCJucG0gcnVuIHByZXB1Ymxpc2g6Y29tcGlsZVwiXG4gIH1cbn1cbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2ZkLXNsaWNlci8udHJhdmlzLnltbFxubGFuZ3VhZ2U6IG5vZGVfanNcbm5vZGVfanM6XG4gIC0gXCIwLjEwXCJcbnNjcmlwdDpcbiAgLSBcIm5wbSBydW4gdGVzdC10cmF2aXNcIlxuYWZ0ZXJfc2NyaXB0OlxuICAtIFwibnBtIGluc3RhbGwgY292ZXJhbGxzQDIgJiYgY2F0IC4vY292ZXJhZ2UvbGNvdi5pbmZvIHwgLi9ub2RlX21vZHVsZXMvLmJpbi9jb3ZlcmFsbHNcIlxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvZ3JhcGhlbWVyL3BhY2thZ2UuanNvblxuLi4uXG4gIFwic2NyaXB0c1wiOiB7XG4gICAgXCJwcmVwdWJsaXNoT25seVwiOiBcIm5wbSBydW4gYnVpbGRcIixcbiAgICBcImJ1aWxkXCI6IFwidHNjIC0tcHJvamVjdCB0c2NvbmZpZy5qc29uXCIsXG4gICAgXCJwcmV0ZXN0XCI6IFwibnBtIHJ1biBidWlsZFwiLFxuICAgIFwidGVzdFwiOiBcInRzLW5vZGUgbm9kZV9tb2R1bGVzL3RhcGUvYmluL3RhcGUgdGVzdHMvKioudHNcIixcbiAgICBcInByZXR0aWVyOmNoZWNrXCI6IFwicHJldHRpZXIgLS1jaGVjayAuXCIsXG4gICAgXCJwcmV0dGllcjpmaXhcIjogXCJwcmV0dGllciAtLXdyaXRlIC5cIlxuICB9LFxuICBcInJlcG9zaXRvcnlcIjoge1xuICAgIFwidHlwZVwiOiBcImdpdFwiLFxuICAgIFwidXJsXCI6IFwiaHR0cHM6Ly9naXRodWIuY29tL2ZsbW50L2dyYXBoZW1lci5naXRcIlxuICB9LFxuICBcImJ1Z3NcIjogXCJodHRwczovL2dpdGh1Yi5jb20vZmxtbnQvZ3JhcGhlbWVyL2lzc3Vlc1wiLFxuICBcImRldkRlcGVuZGVuY2llc1wiOiB7XG4gICAgXCJAdHlwZXMvdGFwZVwiOiBcIl40LjEzLjBcIixcbiAgICBcImh1c2t5XCI6IFwiXjQuMy4wXCIsXG4gICAgXCJsaW50LXN0YWdlZFwiOiBcIl4xMC4zLjBcIixcbiAgICBcInByZXR0aWVyXCI6IFwiXjIuMS4xXCIsXG4gICAgXCJ0YXBlXCI6IFwiXjQuNi4zXCIsXG4gICAgXCJ0cy1ub2RlXCI6IFwiXjkuMC4wXCIsXG4gICAgXCJ0eXBlc2NyaXB0XCI6IFwiXjQuMC4yXCJcbiAgfSxcbiAgXCJodXNreVwiOiB7XG4gICAgXCJob29rc1wiOiB7XG4gICAgICBcInByZS1jb21taXRcIjogXCJsaW50LXN0YWdlZFwiLFxuICAgICAgXCJwcmUtcHVzaFwiOiBcIm5wbSB0ZXN0XCJcbiAgICB9XG4gIH0sXG4gIFwibGludC1zdGFnZWRcIjoge1xuICAgIFwiKi57anMsdHMsbWQsanNvbn1cIjogXCJwcmV0dGllciAtLXdyaXRlXCJcbiAgfVxufVxuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvYWp2L3NjcmlwdHMvcHVibGlzaC1idWlsdC12ZXJzaW9uXG4uLi5cblxuaWYgW1sgLW4gJFRSQVZJU19UQUcgJiYgJFRSQVZJU19KT0JfTlVNQkVSID1+IFwiLjNcIiBdXTsgdGhlblxuICBlY2hvIFwiQWJvdXQgdG8gcHVibGlzaCAkVFJBVklTX1RBRyB0byBhanYtZGlzdC4uLlwiXG5cbiAgZ2l0IGNvbmZpZyB1c2VyLmVtYWlsIFwiJEdJVF9VU0VSX0VNQUlMXCJcbiAgZ2l0IGNvbmZpZyB1c2VyLm5hbWUgXCIkR0lUX1VTRVJfTkFNRVwiXG5cbiAgZ2l0IGNsb25lIGh0dHBzOi8vJHtHSVRIVUJfVE9LRU59QGdpdGh1Yi5jb20vYWp2LXZhbGlkYXRvci9hanYtZGlzdC5naXQgLi4vYWp2LWRpc3RcblxuICBybSAtcmYgLi4vYWp2LWRpc3QvZGlzdFxuICBta2RpciAuLi9hanYtZGlzdC9kaXN0XG4gIGNwIC4vZGlzdC9hanYuKiAuLi9hanYtZGlzdC9kaXN0XG4gIGNhdCBib3dlci5qc29uIHwgc2VkICdzL1wibmFtZVwiOiBcImFqdlwiL1wibmFtZVwiOiBcImFqdi1kaXN0XCIvJyA+IC4uL2Fqdi1kaXN0L2Jvd2VyLmpzb25cbiAgY2QgLi4vYWp2LWRpc3RcblxuICBpZiBbWyBgZ2l0IHN0YXR1cyAtLXBvcmNlbGFpbmAgXV07IHRoZW5cbiAgICBlY2hvIFwiQ2hhbmdlcyBkZXRlY3RlZC4gVXBkYXRpbmcgbWFzdGVyIGJyYW5jaC4uLlwiXG4gICAgZ2l0IGFkZCAtQVxuICAgIGdpdCBjb21taXQgLW0gXCJ1cGRhdGVkIGJ5IHRyYXZpcyBidWlsZCAjJFRSQVZJU19CVUlMRF9OVU1CRVJcIlxuICAgIGdpdCBwdXNoIC0tcXVpZXQgb3JpZ2luIG1hc3RlciA+IC9kZXYvbnVsbCAyPiYxXG4gIGZpXG5cbiAgZWNobyBcIlB1Ymxpc2hpbmcgdGFnLi4uXCJcblxuICBnaXQgdGFnICRUUkFWSVNfVEFHXG4gIGdpdCBwdXNoIC0tdGFncyA+IC9kZXYvbnVsbCAyPiYxXG5cbiAgZWNobyBcIkRvbmVcIlxuZmlcbi4uLlxuUGF0aDogbm9kZV9tb2R1bGVzL2VzdHJhdmVyc2UvZ3VscGZpbGUuanNcbi4uLlxuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBndWxwID0gcmVxdWlyZSgnZ3VscCcpLFxuICAgIGdpdCA9IHJlcXVpcmUoJ2d1bHAtZ2l0JyksXG4gICAgYnVtcCA9IHJlcXVpcmUoJ2d1bHAtYnVtcCcpLFxuICAgIGZpbHRlciA9IHJlcXVpcmUoJ2d1bHAtZmlsdGVyJyksXG4gICAgdGFnVmVyc2lvbiA9IHJlcXVpcmUoJ2d1bHAtdGFnLXZlcnNpb24nKTtcblxudmFyIFRFU1QgPSBbICd0ZXN0LyouanMnIF07XG52YXIgUE9XRVJFRCA9IFsgJ3Bvd2VyZWQtdGVzdC8qLmpzJyBdO1xudmFyIFNPVVJDRSA9IFsgJ3NyYy8qKi8qLmpzJyBdO1xuXG4vKipcbiAqIEJ1bXBpbmcgdmVyc2lvbiBudW1iZXIgYW5kIHRhZ2dpbmcgdGhlIHJlcG9zaXRvcnkgd2l0aCBpdC5cbiAqIFBsZWFzZSByZWFkIGh0dHA6Ly9zZW12ZXIub3JnL1xuICpcbiAqIFlvdSBjYW4gdXNlIHRoZSBjb21tYW5kc1xuICpcbiAqICAgICBndWxwIHBhdGNoICAgICAjIG1ha2VzIHYwLjEuMCAtPiB2MC4xLjFcbiAqICAgICBndWxwIGZlYXR1cmUgICAjIG1ha2VzIHYwLjEuMSAtPiB2MC4yLjBcbiAqICAgICBndWxwIHJlbGVhc2UgICAjIG1ha2VzIHYwLjIuMSAtPiB2MS4wLjBcbiAqXG4gKiBUbyBidW1wIHRoZSB2ZXJzaW9uIG51bWJlcnMgYWNjb3JkaW5nbHkgYWZ0ZXIgeW91IGRpZCBhIHBhdGNoLFxuICogaW50cm9kdWNlZCBhIGZlYXR1cmUgb3IgbWFkZSBhIGJhY2t3YXJkcy1pbmNvbXBhdGlibGUgcmVsZWFzZS5cbiAqL1xuLi4uXG5QYXRoOiBub2RlX21vZHVsZXMvZmFzdC1qc29uLXN0YWJsZS1zdHJpbmdpZnkvLnRyYXZpcy55bWxcbmxhbmd1YWdlOiBub2RlX2pzXG5ub2RlX2pzOlxuICAtIFwiOFwiXG4gIC0gXCIxMFwiXG4gIC0gXCIxMlwiXG4gIC0gXCIxM1wiXG5hZnRlcl9zY3JpcHQ6XG4gIC0gY292ZXJhbGxzIDwgY292ZXJhZ2UvbGNvdi5pbmZvXG4uLi5cblBhdGg6IG5vZGVfbW9kdWxlcy90YWlsd2luZGNzcy9zY3JpcHRzL2NyZWF0ZS1wbHVnaW4tbGlzdC5qc1xuaW1wb3J0IHsgY29yZVBsdWdpbnMgfSBmcm9tICcuLi9zcmMvY29yZVBsdWdpbnMnXG5pbXBvcnQgZnMgZnJvbSAnZnMnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuXG5sZXQgY29yZVBsdWdpbkxpc3QgPSBPYmplY3Qua2V5cyhjb3JlUGx1Z2lucylcblxuZnMud3JpdGVGaWxlU3luYyhcbiAgcGF0aC5qb2luKHByb2Nlc3MuY3dkKCksLi4uIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYzIxODc2YmUtNzk4ZS00ZTEyLThjNWMtYjZlZDk5NDBhOTBhO3Rvb2x1X3ZydHhfMDFYRHpSNWpERXNBdG5mNmk0MVBjYmJCIjp7InJlcXVlc3RJZCI6ImMyMTg3NmJlLTc5OGUtNGUxMi04YzVjLWI2ZWQ5OTQwYTkwYSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFYRHpSNWpERXNBdG5mNmk0MVBjYmJCIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiB2aXRlLmNvbmZpZy50czpcbiAgICAgMVx0aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbiAgICAgMlx0aW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjtcbiAgICAgM1x0aW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcbiAgICAgNFx0XG4gICAgIDVcdC8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXG4gICAgIDZcdGV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZygoeyBtb2RlIH0pID0+ICh7XG4gICAgIDdcdCAgYmFzZTogJy9zaXRlLW5vdmEvJyxcbiAgICAgOFx0ICBzZXJ2ZXI6IHtcbiAgICAgOVx0ICAgIGhvc3Q6IFwiOjpcIixcbiAgICAxMFx0ICAgIHBvcnQ6IDgwODAsXG4gICAgMTFcdCAgfSxcbiAgICAxMlx0ICBwbHVnaW5zOiBbXG4gICAgMTNcdCAgICByZWFjdCgpLFxuICAgIDE0XHQgIF0sXG4gICAgMTVcdCAgcmVzb2x2ZToge1xuICAgIDE2XHQgICAgYWxpYXM6IHtcbiAgICAxN1x0ICAgICAgXCJAXCI6IHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsIFwiLi9zcmNcIiksXG4gICAgMThcdCAgICB9LFxuICAgIDE5XHQgIH0sXG4gICAgMjBcdH0pKTtcbiAgICAyMVx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAyMVxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMjgzYmNmNzEtM2JmYy00Njg2LWJmMzgtY2RjYjAyMGMxNjc3O3Rvb2x1X3ZydHhfMDExZDJDQ1phb2d5ejNNVjQ5NGdmbmZLIjp7InJlcXVlc3RJZCI6IjI4M2JjZjcxLTNiZmMtNDY4Ni1iZjM4LWNkY2IwMjBjMTY3NyIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDExZDJDQ1phb2d5ejNNVjQ5NGdmbmZLIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBwYWNrYWdlLmpzb246XG4gICAgIDFcdHtcbiAgICAgMlx0ICBcIm5hbWVcIjogXCJ2aXRlX3JlYWN0X3NoYWRjbl90c1wiLFxuICAgICAzXHQgIFwicHJpdmF0ZVwiOiB0cnVlLFxuICAgICA0XHQgIFwidmVyc2lvblwiOiBcIjAuMC4wXCIsXG4gICAgIDVcdCAgXCJ0eXBlXCI6IFwibW9kdWxlXCIsXG4gICAgIDZcdCAgXCJzY3JpcHRzXCI6IHtcbiAgICAgN1x0ICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgICA4XHQgICAgXCJidWlsZFwiOiBcInZpdGUgYnVpbGRcIixcbiAgICAgOVx0ICAgIFwiYnVpbGQ6ZGV2XCI6IFwidml0ZSBidWlsZCAtLW1vZGUgZGV2ZWxvcG1lbnRcIixcbiAgICAxMFx0ICAgIFwibGludFwiOiBcImVzbGludCAuXCIsXG4gICAgMTFcdCAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIlxuICAgIDEyXHQgIH0sXG4gICAgMTNcdCAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIDE0XHQgICAgXCJAaG9va2Zvcm0vcmVzb2x2ZXJzXCI6IFwiXjMuOS4wXCIsXG4gICAgMTVcdCAgICBcIkByYWRpeC11aS9yZWFjdC1hY2NvcmRpb25cIjogXCJeMS4yLjBcIixcbiAgICAxNlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFsZXJ0LWRpYWxvZ1wiOiBcIl4xLjEuMVwiLFxuICAgIDE3XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYXNwZWN0LXJhdGlvXCI6IFwiXjEuMS4wXCIsXG4gICAgMThcdCAgICBcIkByYWRpeC11aS9yZWFjdC1hdmF0YXJcIjogXCJeMS4xLjBcIixcbiAgICAxOVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWNoZWNrYm94XCI6IFwiXjEuMS4xXCIsXG4gICAgMjBcdCAgICBcIkByYWRpeC11aS9yZWFjdC1jb2xsYXBzaWJsZVwiOiBcIl4xLjEuMFwiLFxuICAgIDIxXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtY29udGV4dC1tZW51XCI6IFwiXjIuMi4xXCIsXG4gICAgMjJcdCAgICBcIkByYWRpeC11aS9yZWFjdC1kaWFsb2dcIjogXCJeMS4xLjJcIixcbiAgICAyM1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWRyb3Bkb3duLW1lbnVcIjogXCJeMi4xLjFcIixcbiAgICAyNFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWhvdmVyLWNhcmRcIjogXCJeMS4xLjFcIixcbiAgICAyNVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWxhYmVsXCI6IFwiXjIuMS4wXCIsXG4gICAgMjZcdCAgICBcIkByYWRpeC11aS9yZWFjdC1tZW51YmFyXCI6IFwiXjEuMS4xXCIsXG4gICAgMjdcdCAgICBcIkByYWRpeC11aS9yZWFjdC1uYXZpZ2F0aW9uLW1lbnVcIjogXCJeMS4yLjBcIixcbiAgICAyOFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXBvcG92ZXJcIjogXCJeMS4xLjFcIixcbiAgICAyOVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXByb2dyZXNzXCI6IFwiXjEuMS4wXCIsXG4gICAgMzBcdCAgICBcIkByYWRpeC11aS9yZWFjdC1yYWRpby1ncm91cFwiOiBcIl4xLjIuMFwiLFxuICAgIDMxXHQgICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2Nyb2xsLWFyZWFcIjogXCJeMS4xLjBcIixcbiAgICAzMlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNlbGVjdFwiOiBcIl4yLjEuMVwiLFxuICAgIDMzXHQgICAgXCJAcmFkaXgtdWkvcmVhY3Qtc2VwYXJhdG9yXCI6IFwiXjEuMS4wXCIsXG4gICAgMzRcdCAgICBcIkByYWRpeC11aS9yZWFjdC1zbGlkZXJcIjogXCJeMS4yLjBcIixcbiAgICAzNVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNsb3RcIjogXCJeMS4xLjBcIixcbiAgICAzNlx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXN3aXRjaFwiOiBcIl4xLjEuMFwiLFxuICAgIDM3XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtdGFic1wiOiBcIl4xLjEuMFwiLFxuICAgIDM4XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9hc3RcIjogXCJeMS4yLjFcIixcbiAgICAzOVx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LXRvZ2dsZVwiOiBcIl4xLjEuMFwiLFxuICAgIDQwXHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtdG9nZ2xlLWdyb3VwXCI6IFwiXjEuMS4wXCIsXG4gICAgNDFcdCAgICBcIkByYWRpeC11aS9yZWFjdC10b29sdGlwXCI6IFwiXjEuMS40XCIsXG4gICAgNDJcdCAgICBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiOiBcIl41LjU2LjJcIixcbiAgICA0M1x0ICAgIFwiY2xhc3MtdmFyaWFuY2UtYXV0aG9yaXR5XCI6IFwiXjAuNy4xXCIsXG4gICAgNDRcdCAgICBcImNsc3hcIjogXCJeMi4xLjFcIixcbiAgICA0NVx0ICAgIFwiY21ka1wiOiBcIl4xLjAuMFwiLFxuICAgIDQ2XHQgICAgXCJkYXRlLWZuc1wiOiBcIl4zLjYuMFwiLFxuICAgIDQ3XHQgICAgXCJlbWJsYS1jYXJvdXNlbC1yZWFjdFwiOiBcIl44LjMuMFwiLFxuICAgIDQ4XHQgICAgXCJpbnB1dC1vdHBcIjogXCJeMS4yLjRcIixcbiAgICA0OVx0ICAgIFwibHVjaWRlLXJlYWN0XCI6IFwiXjAuNDYyLjBcIixcbiAgICA1MFx0ICAgIFwibmV4dC10aGVtZXNcIjogXCJeMC4zLjBcIixcbiAgICA1MVx0ICAgIFwicmVhY3RcIjogXCJeMTguMy4xXCIsXG4gICAgNTJcdCAgICBcInJlYWN0LWRheS1waWNrZXJcIjogXCJeOC4xMC4xXCIsXG4gICAgNTNcdCAgICBcInJlYWN0LWRvbVwiOiBcIl4xOC4zLjFcIixcbiAgICA1NFx0ICAgIFwicmVhY3QtaG9vay1mb3JtXCI6IFwiXjcuNTMuMFwiLFxuICAgIDU1XHQgICAgXCJyZWFjdC1yZXNpemFibGUtcGFuZWxzXCI6IFwiXjIuMS4zXCIsXG4gICAgNTZcdCAgICBcInJlYWN0LXJvdXRlci1kb21cIjogXCJeNi4yNi4yXCIsXG4gICAgNTdcdCAgICBcInJlY2hhcnRzXCI6IFwiXjIuMTIuN1wiLFxuICAgIDU4XHQgICAgXCJzb25uZXJcIjogXCJeMS41LjBcIixcbiAgICA1OVx0ICAgIFwidGFpbHdpbmQtbWVyZ2VcIjogXCJeMi41LjJcIixcbiAgICA2MFx0ICAgIFwidGFpbHdpbmRjc3MtYW5pbWF0ZVwiOiBcIl4xLjAuN1wiLFxuICAgIDYxXHQgICAgXCJ2YXVsXCI6IFwiXjAuOS4zXCIsXG4gICAgNjJcdCAgICBcInpvZFwiOiBcIl4zLjIzLjhcIlxuICAgIDYzXHQgIH0sXG4gICAgNjRcdCAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xuICAgIDY1XHQgICAgXCJAZXNsaW50L2pzXCI6IFwiXjkuOS4wXCIsXG4gICAgNjZcdCAgICBcIkB0YWlsd2luZGNzcy90eXBvZ3JhcGh5XCI6IFwiXjAuNS4xNVwiLFxuICAgIDY3XHQgICAgXCJAdHlwZXMvbm9kZVwiOiBcIl4yMi41LjVcIixcbiAgICA2OFx0ICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjMuM1wiLFxuICAgIDY5XHQgICAgXCJAdHlwZXMvcmVhY3QtZG9tXCI6IFwiXjE4LjMuMFwiLFxuICAgIDcwXHQgICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdC1zd2NcIjogXCJeMy41LjBcIixcbiAgICA3MVx0ICAgIFwiYXV0b3ByZWZpeGVyXCI6IFwiXjEwLjQuMjBcIixcbiAgICA3Mlx0ICAgIFwiZXNsaW50XCI6IFwiXjkuOS4wXCIsXG4gICAgNzNcdCAgICBcImVzbGludC1wbHVnaW4tcmVhY3QtaG9va3NcIjogXCJeNS4xLjAtcmMuMFwiLFxuICAgIDc0XHQgICAgXCJlc2xpbnQtcGx1Z2luLXJlYWN0LXJlZnJlc2hcIjogXCJeMC40LjlcIixcbiAgICA3NVx0ICAgIFwiZ2gtcGFnZXNcIjogXCJeNi4zLjBcIixcbiAgICA3Nlx0ICAgIFwiZ2xvYmFsc1wiOiBcIl4xNS45LjBcIixcbiAgICA3N1x0ICAgIFwicG9zdGNzc1wiOiBcIl44LjQuNDdcIixcbiAgICA3OFx0ICAgIFwidGFpbHdpbmRjc3NcIjogXCJeMy40LjExXCIsXG4gICAgNzlcdCAgICBcInR5cGVzY3JpcHRcIjogXCJeNS41LjNcIixcbiAgICA4MFx0ICAgIFwidHlwZXNjcmlwdC1lc2xpbnRcIjogXCJeOC4wLjFcIixcbiAgICA4MVx0ICAgIFwidml0ZVwiOiBcIl41LjQuMVwiXG4gICAgODJcdCAgfVxuICAgIDgzXHR9XG4gICAgODRcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogODRcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjdkY2ZlZDk3LTBiNDItNDVmYy05ZGYwLTFkOThkYjI1NGJjYTt0b29sdV92cnR4XzAxTlEzaXdhSnRSbTlqanJ0dDFEem82WSI6eyJyZXF1ZXN0SWQiOiI3ZGNmZWQ5Ny0wYjQyLTQ1ZmMtOWRmMC0xZDk4ZGIyNTRiY2EiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxTlEzaXdhSnRSbTlqanJ0dDFEem82WSIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gaW5kZXguaHRtbDpcbiAgICAgMVx0XG4gICAgIDJcdDwhRE9DVFlQRSBodG1sPlxuICAgICAzXHQ8aHRtbCBsYW5nPVwicnVcIj5cbiAgICAgNFx0ICA8aGVhZD5cbiAgICAgNVx0ICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiIC8+XG4gICAgIDZcdCAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFwiIC8+XG4gICAgIDdcdCAgICA8dGl0bGU+Tm92YSBBSSAtIEt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyBBSS9NTDwvdGl0bGU+XG4gICAgIDhcdCAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PVwiTm92YSBBSSAtINC/0YDQtdC00L3QsNGB0YLRgNC+0LXQvdC90LDRjyBrdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8g0LfQsNC00LDRh9CwINC+0LHRg9GH0LXQvdC40Y8g0Lgg0LjQvdGE0LXRgNC10L3RgdCwLiDQodC90LjQttC10L3QuNC1INGA0LDRgdGF0L7QtNC+0LIg0Lgg0L/QvtCy0YvRiNC10L3QuNC1INGD0YLQuNC70LjQt9Cw0YbQuNC4INGA0LXRgdGD0YDRgdC+0LIg0LrQu9Cw0YHRgtC10YDQsC5cIiAvPlxuICAgICA5XHQgICAgPG1ldGEgbmFtZT1cImF1dGhvclwiIGNvbnRlbnQ9XCJOb3ZhIEFJXCIgLz5cbiAgICAxMFx0XG4gICAgMTFcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnRpdGxlXCIgY29udGVudD1cIk5vdmEgQUkgLSBLdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8gQUkvTUxcIiAvPlxuICAgIDEyXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgMTNcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnR5cGVcIiBjb250ZW50PVwid2Vic2l0ZVwiIC8+XG4gICAgMTRcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlXCIgY29udGVudD1cImh0dHBzOi8vbG92YWJsZS5kZXYvb3BlbmdyYXBoLWltYWdlLXA5OHBxZy5wbmdcIiAvPlxuICAgIDE1XHRcbiAgICAxNlx0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmNhcmRcIiBjb250ZW50PVwic3VtbWFyeV9sYXJnZV9pbWFnZVwiIC8+XG4gICAgMTdcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjpzaXRlXCIgY29udGVudD1cIkBsb3ZhYmxlX2RldlwiIC8+XG4gICAgMThcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjppbWFnZVwiIGNvbnRlbnQ9XCJodHRwczovL2xvdmFibGUuZGV2L29wZW5ncmFwaC1pbWFnZS1wOThwcWcucG5nXCIgLz5cbiAgICAxOVx0ICAgIFxuICAgIDIwXHQgICAgPGxpbmsgcmVsPVwicHJlY29ubmVjdFwiIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tXCI+XG4gICAgMjFcdCAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb21cIiBjcm9zc29yaWdpbj5cbiAgICAyMlx0ICAgIDxsaW5rIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUludGVyOndnaHRANDAwOzUwMDs2MDA7NzAwJmRpc3BsYXk9c3dhcFwiIHJlbD1cInN0eWxlc2hlZXRcIj5cbiAgICAyM1x0ICA8L2hlYWQ+XG4gICAgMjRcdFxuICAgIDI1XHQgIDxib2R5PlxuICAgIDI2XHQgICAgPGRpdiBpZD1cInJvb3RcIj48L2Rpdj5cbiAgICAyN1x0ICAgIDwhLS0gSU1QT1JUQU5UOiBETyBOT1QgUkVNT1ZFIFRISVMgU0NSSVBUIFRBRyBPUiBUSElTIFZFUlkgQ09NTUVOVCEgLS0+XG4gICAgMjhcdCAgICA8c2NyaXB0IHNyYz1cImh0dHBzOi8vY2RuLmdwdGVuZy5jby9ncHRlbmdpbmVlci5qc1wiIHR5cGU9XCJtb2R1bGVcIj48L3NjcmlwdD5cbiAgICAyOVx0ICAgIDxzY3JpcHQgdHlwZT1cIm1vZHVsZVwiIHNyYz1cIi9zcmMvbWFpbi50c3hcIj48L3NjcmlwdD5cbiAgICAzMFx0ICA8L2JvZHk+XG4gICAgMzFcdDwvaHRtbD5cbiAgICAzMlx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAzMlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZWZmZWRhZDUtNGMzZi00MzVkLTgzMGMtMGYyMDEyODMwZDIwO3Rvb2x1X3ZydHhfMDFCQ0xRaXV6eFlGbWFDS0gyRmtBQnJxIjp7InJlcXVlc3RJZCI6ImVmZmVkYWQ1LTRjM2YtNDM1ZC04MzBjLTBmMjAxMjgzMGQyMCIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFCQ0xRaXV6eFlGbWFDS0gyRmtBQnJxIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBkaXN0L2luZGV4Lmh0bWw6XG4gICAgIDFcdFxuICAgICAyXHQ8IURPQ1RZUEUgaHRtbD5cbiAgICAgM1x0PGh0bWwgbGFuZz1cInJ1XCI+XG4gICAgIDRcdCAgPGhlYWQ+XG4gICAgIDVcdCAgICA8bWV0YSBjaGFyc2V0PVwiVVRGLThcIiAvPlxuICAgICA2XHQgICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcIiAvPlxuICAgICA3XHQgICAgPHRpdGxlPk5vdmEgQUkgLSBLdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8gQUkvTUw8L3RpdGxlPlxuICAgICA4XHQgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD1cIk5vdmEgQUkgLSDQv9GA0LXQtNC90LDRgdGC0YDQvtC10L3QvdCw0Y8ga3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPINC30LDQtNCw0YfQsCDQvtCx0YPRh9C10L3QuNGPINC4INC40L3RhNC10YDQtdC90YHQsC4g0KHQvdC40LbQtdC90LjQtSDRgNCw0YHRhdC+0LTQvtCyINC4INC/0L7QstGL0YjQtdC90LjQtSDRg9GC0LjQu9C40LfQsNGG0LjQuCDRgNC10YHRg9GA0YHQvtCyINC60LvQsNGB0YLQtdGA0LAuXCIgLz5cbiAgICAgOVx0ICAgIDxtZXRhIG5hbWU9XCJhdXRob3JcIiBjb250ZW50PVwiTm92YSBBSVwiIC8+XG4gICAgMTBcdFxuICAgIDExXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0aXRsZVwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0gS3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPIEFJL01MXCIgLz5cbiAgICAxMlx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6ZGVzY3JpcHRpb25cIiBjb250ZW50PVwiTm92YSBBSSAtINC/0YDQtdC00L3QsNGB0YLRgNC+0LXQvdC90LDRjyBrdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8g0LfQsNC00LDRh9CwINC+0LHRg9GH0LXQvdC40Y8g0Lgg0LjQvdGE0LXRgNC10L3RgdCwLiDQodC90LjQttC10L3QuNC1INGA0LDRgdGF0L7QtNC+0LIg0Lgg0L/QvtCy0YvRiNC10L3QuNC1INGD0YLQuNC70LjQt9Cw0YbQuNC4INGA0LXRgdGD0YDRgdC+0LIg0LrQu9Cw0YHRgtC10YDQsC5cIiAvPlxuICAgIDEzXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0eXBlXCIgY29udGVudD1cIndlYnNpdGVcIiAvPlxuICAgIDE0XHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzppbWFnZVwiIGNvbnRlbnQ9XCJodHRwczovL2xvdmFibGUuZGV2L29wZW5ncmFwaC1pbWFnZS1wOThwcWcucG5nXCIgLz5cbiAgICAxNVx0XG4gICAgMTZcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjpjYXJkXCIgY29udGVudD1cInN1bW1hcnlfbGFyZ2VfaW1hZ2VcIiAvPlxuICAgIDE3XHQgICAgPG1ldGEgbmFtZT1cInR3aXR0ZXI6c2l0ZVwiIGNvbnRlbnQ9XCJAbG92YWJsZV9kZXZcIiAvPlxuICAgIDE4XHQgICAgPG1ldGEgbmFtZT1cInR3aXR0ZXI6aW1hZ2VcIiBjb250ZW50PVwiaHR0cHM6Ly9sb3ZhYmxlLmRldi9vcGVuZ3JhcGgtaW1hZ2UtcDk4cHFnLnBuZ1wiIC8+XG4gICAgMTlcdCAgICBcbiAgICAyMFx0ICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbVwiPlxuICAgIDIxXHQgICAgPGxpbmsgcmVsPVwicHJlY29ubmVjdFwiIGhyZWY9XCJodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tXCIgY3Jvc3NvcmlnaW4+XG4gICAgMjJcdCAgICA8bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1JbnRlcjp3Z2h0QDQwMDs1MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCI+XG4gICAgMjNcdCAgICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBjcm9zc29yaWdpbiBzcmM9XCIvc2l0ZS1ub3ZhL2Fzc2V0cy9pbmRleC1DWEp5ODViNy5qc1wiPjwvc2NyaXB0PlxuICAgIDI0XHQgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGNyb3Nzb3JpZ2luIGhyZWY9XCIvc2l0ZS1ub3ZhL2Fzc2V0cy9pbmRleC1CREZWcEtEbS5jc3NcIj5cbiAgICAyNVx0ICA8L2hlYWQ+XG4gICAgMjZcdFxuICAgIDI3XHQgIDxib2R5PlxuICAgIDI4XHQgICAgPGRpdiBpZD1cInJvb3RcIj48L2Rpdj5cbiAgICAyOVx0ICAgIDwhLS0gSU1QT1JUQU5UOiBETyBOT1QgUkVNT1ZFIFRISVMgU0NSSVBUIFRBRyBPUiBUSElTIFZFUlkgQ09NTUVOVCEgLS0+XG4gICAgMzBcdCAgICA8c2NyaXB0IHNyYz1cImh0dHBzOi8vY2RuLmdwdGVuZy5jby9ncHRlbmdpbmVlci5qc1wiIHR5cGU9XCJtb2R1bGVcIj48L3NjcmlwdD5cbiAgICAzMVx0ICA8L2JvZHk+XG4gICAgMzJcdDwvaHRtbD5cbiAgICAzM1x0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAzM1xuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiODNmNjZkMTctYzU4OS00MGEwLTg4NGItODU5OGQzN2YxOTgxO3Rvb2x1X3ZydHhfMDFSTFJOc1Q3U3ZNdFBaNFQ5WjVHcEVRIjp7InJlcXVlc3RJZCI6IjgzZjY2ZDE3LWM1ODktNDBhMC04ODRiLTg1OThkMzdmMTk4MSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFSTFJOc1Q3U3ZNdFBaNFQ5WjVHcEVRIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSdzIHRoZSByZXN1bHQgb2YgcnVubmluZyBgY2F0IC1uYCBvbiBzcmMvbWFpbi50c3g6XG4gICAgIDFcdGltcG9ydCB7IGNyZWF0ZVJvb3QgfSBmcm9tICdyZWFjdC1kb20vY2xpZW50J1xuICAgICAyXHRpbXBvcnQgQXBwIGZyb20gJy4vQXBwLnRzeCdcbiAgICAgM1x0aW1wb3J0ICcuL2luZGV4LmNzcydcbiAgICAgNFx0XG4gICAgIDVcdGNyZWF0ZVJvb3QoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJyb290XCIpISkucmVuZGVyKDxBcHAgLz4pO1xuICAgICA2XHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDZcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjQzODJmODdjLTQyMzUtNDgzMy04N2VkLTNjOTAwZTRmZTY4Yjt0b29sdV92cnR4XzAxSGtnRUhwS3ZSQVhvNHZiV2c1V1Z3eSI6eyJyZXF1ZXN0SWQiOiI0MzgyZjg3Yy00MjM1LTQ4MzMtODdlZC0zYzkwMGU0ZmU2OGIiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxSGtnRUhwS3ZSQVhvNHZiV2c1V1Z3eSIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgcGFja2FnZS5qc29uLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAgMlx0ICBcIm5hbWVcIjogXCJ2aXRlX3JlYWN0X3NoYWRjbl90c1wiLFxuICAgICAzXHQgIFwicHJpdmF0ZVwiOiB0cnVlLFxuICAgICA0XHQgIFwidmVyc2lvblwiOiBcIjAuMC4wXCIsXG4gICAgIDVcdCAgXCJ0eXBlXCI6IFwibW9kdWxlXCIsXG4gICAgIDZcdCAgXCJzY3JpcHRzXCI6IHtcbiAgICAgN1x0ICAgIFwiZGV2XCI6IFwidml0ZVwiLFxuICAgICA4XHQgICAgXCJidWlsZFwiOiBcInZpdGUgYnVpbGRcIixcbiAgICAgOVx0ICAgIFwiYnVpbGQ6ZGV2XCI6IFwidml0ZSBidWlsZCAtLW1vZGUgZGV2ZWxvcG1lbnRcIixcbiAgICAxMFx0ICAgIFwibGludFwiOiBcImVzbGludCAuXCIsXG4gICAgMTFcdCAgICBcInByZXZpZXdcIjogXCJ2aXRlIHByZXZpZXdcIixcbiAgICAxMlx0ICAgIFwicHJlZGVwbG95XCI6IFwibnBtIHJ1biBidWlsZFwiLFxuICAgIDEzXHQgICAgXCJkZXBsb3lcIjogXCJnaC1wYWdlcyAtZCBkaXN0XCJcbiAgICAxNFx0ICB9LFxuICAgIDE1XHQgIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICAxNlx0ICAgIFwiQGhvb2tmb3JtL3Jlc29sdmVyc1wiOiBcIl4zLjkuMFwiLFxuICAgIDE3XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYWNjb3JkaW9uXCI6IFwiXjEuMi4wXCIsXG4gICAgMThcdCAgICBcIkByYWRpeC11aS9yZWFjdC1hbGVydC1kaWFsb2dcIjogXCJeMS4xLjFcIixcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMzg2YmNmNDAtYmU3Zi00NzNjLWE1OGMtYzNkNTQ2ZGE2YjY3O3Rvb2x1X3ZydHhfMDFVVEVxdTI0S3B1aU04M1JlczVvajd6Ijp7InJlcXVlc3RJZCI6IjM4NmJjZjQwLWJlN2YtNDczYy1hNThjLWMzZDU0NmRhNmI2NyIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFVVEVxdTI0S3B1aU04M1JlczVvajd6IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBpbmRleC5odG1sLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAyNVx0ICA8Ym9keT5cbiAgICAyNlx0ICAgIDxkaXYgaWQ9XCJyb290XCI+PC9kaXY+XG4gICAgMjdcdCAgICA8IS0tIElNUE9SVEFOVDogRE8gTk9UIFJFTU9WRSBUSElTIFNDUklQVCBUQUcgT1IgVEhJUyBWRVJZIENPTU1FTlQhIC0tPlxuICAgIDI4XHQgICAgPHNjcmlwdCBzcmM9XCJodHRwczovL2Nkbi5ncHRlbmcuY28vZ3B0ZW5naW5lZXIuanNcIiB0eXBlPVwibW9kdWxlXCI+PC9zY3JpcHQ+XG4gICAgMjlcdCAgICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBzcmM9XCIuL3NyYy9tYWluLnRzeFwiPjwvc2NyaXB0PlxuICAgIDMwXHQgIDwvYm9keT5cbiAgICAzMVx0PC9odG1sPlxuICAgIDMyXHRcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiZTBkOGZkZjgtOTcwMy00YTAyLThjNDAtYzJhYzEyMjQwNjhmO3Rvb2x1X3ZydHhfMDFFZkxwbnllRWtaQTEzSzIyY3NQTjdSIjp7InJlcXVlc3RJZCI6ImUwZDhmZGY4LTk3MDMtNGEwMi04YzQwLWMyYWMxMjI0MDY4ZiIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFFZkxwbnllRWtaQTEzSzIyY3NQTjdSIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG48cmV0dXJuLWNvZGU+XG4xXG48L3JldHVybi1jb2RlPlxuPHN0ZG91dD5cblxuPC9zdGRvdXQ+XG48c3RkZXJyPlxuXG48L3N0ZGVycj4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJmZGRjYzMxMi0yMTZiLTRkMzgtOGU4Ni1kMGM1MWIwMTk4NDU7dG9vbHVfdnJ0eF8wMVdTRlRtZ2ZxODJvQVlnaTQyZzRjRTciOnsicmVxdWVzdElkIjoiZmRkY2MzMTItMjE2Yi00ZDM4LThlODYtZDBjNTFiMDE5ODQ1IiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVdTRlRtZ2ZxODJvQVlnaTQyZzRjRTciLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI2MTgzNWM4NS1lM2I4LTRiOWYtYTM0ZS0wNWJiYTU3YmRhZmQ7dG9vbHVfdnJ0eF8wMUhtMmk5cm9OQ29ReWc1WW1GdVJzUXEiOnsicmVxdWVzdElkIjoiNjE4MzVjODUtZTNiOC00YjlmLWEzNGUtMDViYmE1N2JkYWZkIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMUhtMmk5cm9OQ29ReWc1WW1GdVJzUXEiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIFJFQURNRS5tZC5cblJlc3VsdCBmb3Igc3RyX3JlcGxhY2UgZm9yIGVudHJ5IHdpdGggaW5kZXggWzBdOlxuUmVwbGFjZW1lbnQgc3VjY2Vzc2Z1bC5cbkVkaXRlZCBzZWN0aW9uIGFmdGVyIElERSBhdXRvLWZvcm1hdHRpbmcgd2FzIGFwcGxpZWQ6XG4gICAgMTNcdC0gVml0ZVxuICAgIDE0XHQtIFRhaWx3aW5kIENTU1xuICAgIDE1XHQtIHNoYWRjbi91aVxuICAgIDE2XHRcbiAgICAxN1x0IyMg0JvQvtC60LDQu9GM0L3QsNGPINGA0LDQt9GA0LDQsdC+0YLQutCwXG4gICAgMThcdFxuICAgIDE5XHRgYGBiYXNoXG4gICAgMjBcdCMg0KPRgdGC0LDQvdC+0LLQutCwINC30LDQstC40YHQuNC80L7RgdGC0LXQuVxuICAgIDIxXHRucG0gaW5zdGFsbFxuICAgIDIyXHRcbiAgICAyM1x0IyDQl9Cw0L/Rg9GB0Log0YHQtdGA0LLQtdGA0LAg0YDQsNC30YDQsNCx0L7RgtC60LhcbiAgICAyNFx0bnBtIHJ1biBkZXZcbiAgICAyNVx0XG4gICAgMjZcdCMg0KHQsdC+0YDQutCwINC00LvRjyDQv9GA0L7QtNCw0LrRiNC10L3QsFxuICAgIDI3XHRucG0gcnVuIGJ1aWxkXG4gICAgMjhcdFxuICAgIDI5XHQjINCU0LXQv9C70L7QuSDQvdCwIEdpdEh1YiBQYWdlc1xuICAgIDMwXHRucG0gcnVuIGRlcGxveVxuICAgIDMxXHRgYGBcbiAgICAzMlx0XG4gICAgMzNcdCMjINCU0LXQv9C70L7QuSDQvdCwIEdpdEh1YiBQYWdlc1xuICAgIDM0XHRcbiAgICAzNVx00J/RgNC+0LXQutGCINC90LDRgdGC0YDQvtC10L0g0LTQu9GPINCw0LLRgtC+0LzQsNGC0LjRh9C10YHQutC+0LPQviDQtNC10L/Qu9C+0Y8g0L3QsCBHaXRIdWIgUGFnZXMuINCU0LvRjyDQtNC10L/Qu9C+0Y8g0LLRi9C/0L7Qu9C90LjRgtC1OlxuICAgIDM2XHRcbiAgICAzN1x0YGBgYmFzaFxuICAgIDM4XHRucG0gcnVuIGRlcGxveVxuICAgIDM5XHRgYGBcbiAgICA0MFx0XG4gICAgNDFcdNCt0YLQsCDQutC+0LzQsNC90LTQsCDRgdC+0LHQtdGA0LXRgiDQv9GA0L7QtdC60YIg0Lgg0L7Qv9GD0LHQu9C40LrRg9C10YIg0LXQs9C+INC90LAg0LLQtdGC0LrQtSBgZ2gtcGFnZXNgINCy0LDRiNC10LPQviDRgNC10L/QvtC30LjRgtC+0YDQuNGPLlxuICAgIDQyXHRcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiOGEyZTcxYWEtOTgzZC00Nzk4LWEzNGQtODZmM2ViOWU5MzU0O3Rvb2x1X3ZydHhfMDE0cVJFRXBqZmZ4N1Fva3RXWHlzYWZkIjp7InJlcXVlc3RJZCI6IjhhMmU3MWFhLTk4M2QtNDc5OC1hMzRkLTg2ZjNlYjllOTM1NCIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDE0cVJFRXBqZmZ4N1Fva3RXWHlzYWZkIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG4gICAgICAgIDxyZXR1cm4tY29kZT5cbiAgICAgICAgMFxuICAgICAgICA8L3JldHVybi1jb2RlPlxuICAgICAgICA8c3Rkb3V0PlxuICAgICAgICBcbj4gdml0ZV9yZWFjdF9zaGFkY25fdHNAMC4wLjAgYnVpbGRcbj4gdml0ZSBidWlsZFxuXG5cdTAwMWJbMUdcdTAwMWJbMEtcdTAwMWJbMzZtdml0ZSB2NS40LjEwIFx1MDAxYlszMm1idWlsZGluZyBmb3IgcHJvZHVjdGlvbi4uLlx1MDAxYlszNm1cdTAwMWJbMzltXG5cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDEpIFx1MDAxYlsybWluZGV4Lmh0bWxcdTAwMWJbMjJtQnJvd3NlcnNsaXN0OiBicm93c2VycyBkYXRhIChjYW5pdXNlLWxpdGUpIGlzIDcgbW9udGhzIG9sZC4gUGxlYXNlIHJ1bjpcbiAgbnB4IHVwZGF0ZS1icm93c2Vyc2xpc3QtZGJAbGF0ZXN0XG4gIFdoeSB5b3Ugc2hvdWxkIGRvIGl0IHJlZ3VsYXJseTogaHR0cHM6Ly9naXRodWIuY29tL2Jyb3dzZXJzbGlzdC91cGRhdGUtZGIjcmVhZG1lXG5cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDUpIFx1MDAxYlsybXNyYy9pbmRleC5jc3NcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICg3NSkgXHUwMDFiWzJtc3JjL2NvbXBvbmVudHMvUHJvYmxlbXMudHN4XHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoOTQpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvaW5kZXguanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICg0MjUpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvYmF0dGVyeS13YXJuaW5nLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTIxMykgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9wYW5lbC1yaWdodC1vcGVuLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTY4OCkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDE3NzApIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9yZWNoYXJ0cy1zY2FsZS9lczYvaW5kZXguanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxOTQ0KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlszMm3inJNcdTAwMWJbMzltIDI0ODEgbW9kdWxlcyB0cmFuc2Zvcm1lZC5cblx1MDAxYlsyS1x1MDAxYlsxR3JlbmRlcmluZyBjaHVua3MgKDEpLi4uXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMCkuLi5cdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgxKS4uLlx1MDAxYlsyS1x1MDAxYlsxR2NvbXB1dGluZyBnemlwIHNpemUgKDIpLi4uXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMykuLi5cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMm1kaXN0L1x1MDAxYlsyMm1cdTAwMWJbMzJtaW5kZXguaHRtbCAgICAgICAgICAgICAgICAgXHUwMDFiWzM5bVx1MDAxYlsxbVx1MDAxYlsybSAgMS43MSBrQlx1MDAxYlsyMm1cdTAwMWJbMW1cdTAwMWJbMjJtXHUwMDFiWzJtIOKUgiBnemlwOiAgIDAuODAga0JcdTAwMWJbMjJtXG5cdTAwMWJbMm1kaXN0L1x1MDAxYlsyMm1cdTAwMWJbMm1hc3NldHMvXHUwMDFiWzIybVx1MDAxYlszNW1pbmRleC1CREZWcEtEbS5jc3MgIFx1MDAxYlszOW1cdTAwMWJbMW1cdTAwMWJbMm0gNzEuNDIga0JcdTAwMWJbMjJtXHUwMDFiWzFtXHUwMDFiWzIybVx1MDAxYlsybSDilIIgZ3ppcDogIDEyLjM2IGtCXHUwMDFiWzIybVxuXHUwMDFiWzJtZGlzdC9cdTAwMWJbMjJtXHUwMDFiWzJtYXNzZXRzL1x1MDAxYlsyMm1cdTAwMWJbMzZtaW5kZXgtQ1hKeTg1YjcuanMgICBcdTAwMWJbMzltXHUwMDFiWzFtXHUwMDFiWzMzbTczNy40MCBrQlx1MDAxYlszOW1cdTAwMWJbMjJtXHUwMDFiWzJtIOKUgiBnemlwOiAyMTUuODcga0JcdTAwMWJbMjJtXG5cdTAwMWJbMzNtXG4oISkgU29tZSBjaHVua3MgYXJlIGxhcmdlciB0aGFuIDUwMCBrQiBhZnRlciBtaW5pZmljYXRpb24uIENvbnNpZGVyOlxuLSBVc2luZyBkeW5hbWljIGltcG9ydCgpIHRvIGNvZGUtc3BsaXQgdGhlIGFwcGxpY2F0aW9uXG4tIFVzZSBidWlsZC5yb2xsdXBPcHRpb25zLm91dHB1dC5tYW51YWxDaHVua3MgdG8gaW1wcm92ZSBjaHVua2luZzogaHR0cHM6Ly9yb2xsdXBqcy5vcmcvY29uZmlndXJhdGlvbi1vcHRpb25zLyNvdXRwdXQtbWFudWFsY2h1bmtzXG4tIEFkanVzdCBjaHVuayBzaXplIGxpbWl0IGZvciB0aGlzIHdhcm5pbmcgdmlhIGJ1aWxkLmNodW5rU2l6ZVdhcm5pbmdMaW1pdC5cdTAwMWJbMzltXG5cdTAwMWJbMzJt4pyTIGJ1aWx0IGluIDEuOTZzXHUwMDFiWzM5bVxuXHUwMDFiWzFHXHUwMDFiWzBL4qCZXHUwMDFiWzFHXHUwMDFiWzBLXG4gICAgICAgIDwvc3Rkb3V0PlxuICAgICAgICA8c3RkZXJyPlxuICAgICAgICBcbiAgICAgICAgPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMDI2MjFmMmItN2MyNS00M2Y1LTgzOGQtYmRlMGE1MWU4YTliO3Rvb2x1X3ZydHhfMDFKS1JnNEh6Unl6NzVGYUJEQVo0bTdMIjp7InJlcXVlc3RJZCI6IjAyNjIxZjJiLTdjMjUtNDNmNS04MzhkLWJkZTBhNTFlOGE5YiIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFKS1JnNEh6Unl6NzVGYUJEQVo0bTdMIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG48cmV0dXJuLWNvZGU+XG4wXG48L3JldHVybi1jb2RlPlxuPHN0ZG91dD5cbi1ydy1yLS1yLS1AICAxIHZla2Vzc2Vyb3AgIHN0YWZmICAgICAxIE1heSAxNCAxNzoyNyAubm9qZWt5bGxcblxuPC9zdGRvdXQ+XG48c3RkZXJyPlxuXG48L3N0ZGVycj4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI0MmE5YjQzNi0wYTIzLTQ3ZDQtYjk0Yy00YmVmNzIzNzBkMzE7dG9vbHVfdnJ0eF8wMVM4MUtTTUJ0Z1I4RjNNVUx5RXpTVTEiOnsicmVxdWVzdElkIjoiNDJhOWI0MzYtMGEyMy00N2Q0LWI5NGMtNGJlZjcyMzcwZDMxIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVM4MUtTTUJ0Z1I4RjNNVUx5RXpTVTEiLCJwaGFzZSI6NiwicmVzdWx0Ijp7InRleHQiOiJGaWxlIGFscmVhZHkgZXhpc3RzOiAvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhL2Rpc3QvLm5vamVreWxsIiwiaXNFcnJvciI6dHJ1ZSwicmVxdWVzdElkIjoiIn19LCJjZjdiZTZkZi0yNjYyLTRhNzAtYTczZC1hYTk3M2VlYWZkNGM7dG9vbHVfdnJ0eF8wMVFpUkUzaFhBaFR0cFZ5UUM1R3I2elkiOnsicmVxdWVzdElkIjoiY2Y3YmU2ZGYtMjY2Mi00YTcwLWE3M2QtYWE5NzNlZWFmZDRjIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVFpUkUzaFhBaFR0cFZ5UUM1R3I2elkiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGRpc3QvaW5kZXguaHRtbDpcbiAgICAgMVx0XG4gICAgIDJcdDwhRE9DVFlQRSBodG1sPlxuICAgICAzXHQ8aHRtbCBsYW5nPVwicnVcIj5cbiAgICAgNFx0ICA8aGVhZD5cbiAgICAgNVx0ICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiIC8+XG4gICAgIDZcdCAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFwiIC8+XG4gICAgIDdcdCAgICA8dGl0bGU+Tm92YSBBSSAtIEt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyBBSS9NTDwvdGl0bGU+XG4gICAgIDhcdCAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PVwiTm92YSBBSSAtINC/0YDQtdC00L3QsNGB0YLRgNC+0LXQvdC90LDRjyBrdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8g0LfQsNC00LDRh9CwINC+0LHRg9GH0LXQvdC40Y8g0Lgg0LjQvdGE0LXRgNC10L3RgdCwLiDQodC90LjQttC10L3QuNC1INGA0LDRgdGF0L7QtNC+0LIg0Lgg0L/QvtCy0YvRiNC10L3QuNC1INGD0YLQuNC70LjQt9Cw0YbQuNC4INGA0LXRgdGD0YDRgdC+0LIg0LrQu9Cw0YHRgtC10YDQsC5cIiAvPlxuICAgICA5XHQgICAgPG1ldGEgbmFtZT1cImF1dGhvclwiIGNvbnRlbnQ9XCJOb3ZhIEFJXCIgLz5cbiAgICAxMFx0XG4gICAgMTFcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnRpdGxlXCIgY29udGVudD1cIk5vdmEgQUkgLSBLdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8gQUkvTUxcIiAvPlxuICAgIDEyXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgMTNcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnR5cGVcIiBjb250ZW50PVwid2Vic2l0ZVwiIC8+XG4gICAgMTRcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlXCIgY29udGVudD1cImh0dHBzOi8vbG92YWJsZS5kZXYvb3BlbmdyYXBoLWltYWdlLXA5OHBxZy5wbmdcIiAvPlxuICAgIDE1XHRcbiAgICAxNlx0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmNhcmRcIiBjb250ZW50PVwic3VtbWFyeV9sYXJnZV9pbWFnZVwiIC8+XG4gICAgMTdcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjpzaXRlXCIgY29udGVudD1cIkBsb3ZhYmxlX2RldlwiIC8+XG4gICAgMThcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjppbWFnZVwiIGNvbnRlbnQ9XCJodHRwczovL2xvdmFibGUuZGV2L29wZW5ncmFwaC1pbWFnZS1wOThwcWcucG5nXCIgLz5cbiAgICAxOVx0XG4gICAgMjBcdCAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb21cIj5cbiAgICAyMVx0ICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbVwiIGNyb3Nzb3JpZ2luPlxuICAgIDIyXHQgICAgPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW50ZXI6d2dodEA0MDA7NTAwOzYwMDs3MDAmZGlzcGxheT1zd2FwXCIgcmVsPVwic3R5bGVzaGVldFwiPlxuICAgIDIzXHQgICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgY3Jvc3NvcmlnaW4gc3JjPVwiL3NpdGUtbm92YS9hc3NldHMvaW5kZXgtQ1hKeTg1YjcuanNcIj48L3NjcmlwdD5cbiAgICAyNFx0ICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBjcm9zc29yaWdpbiBocmVmPVwiL3NpdGUtbm92YS9hc3NldHMvaW5kZXgtQkRGVnBLRG0uY3NzXCI+XG4gICAgMjVcdCAgPC9oZWFkPlxuICAgIDI2XHRcbiAgICAyN1x0ICA8Ym9keT5cbiAgICAyOFx0ICAgIDxkaXYgaWQ9XCJyb290XCI+PC9kaXY+XG4gICAgMjlcdCAgICA8IS0tIElNUE9SVEFOVDogRE8gTk9UIFJFTU9WRSBUSElTIFNDUklQVCBUQUcgT1IgVEhJUyBWRVJZIENPTU1FTlQhIC0tPlxuICAgIDMwXHQgICAgPHNjcmlwdCBzcmM9XCJodHRwczovL2Nkbi5ncHRlbmcuY28vZ3B0ZW5naW5lZXIuanNcIiB0eXBlPVwibW9kdWxlXCI+PC9zY3JpcHQ+XG4gICAgMzFcdCAgPC9ib2R5PlxuICAgIDMyXHQ8L2h0bWw+XG4gICAgMzNcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMzNcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjFiZDVjMTA5LTIwOTYtNGUyOC1hODJiLTY2NTBkNjU0NWYzYzt0b29sdV92cnR4XzAxMXlVNWpIaXRZS2hiRkxlRlN0WmtlbiI6eyJyZXF1ZXN0SWQiOiIxYmQ1YzEwOS0yMDk2LTRlMjgtYTgyYi02NjUwZDY1NDVmM2MiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxMXlVNWpIaXRZS2hiRkxlRlN0WmtlbiIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUgYXJlIHRoZSByZXN1bHRzIGZyb20gZXhlY3V0aW5nIHRoZSBjb21tYW5kLlxuICAgICAgICA8cmV0dXJuLWNvZGU+XG4gICAgICAgIDFcbiAgICAgICAgPC9yZXR1cm4tY29kZT5cbiAgICAgICAgPHN0ZG91dD5cbiAgICAgICAgXG4+IHZpdGVfcmVhY3Rfc2hhZGNuX3RzQDAuMC4wIHByZWRlcGxveVxuPiBucG0gcnVuIGJ1aWxkXG5cblx1MDAxYlsxR1x1MDAxYlswS1xuPiB2aXRlX3JlYWN0X3NoYWRjbl90c0AwLjAuMCBidWlsZFxuPiB2aXRlIGJ1aWxkXG5cblx1MDAxYlsxR1x1MDAxYlswS1x1MDAxYlszNm12aXRlIHY1LjQuMTAgXHUwMDFiWzMybWJ1aWxkaW5nIGZvciBwcm9kdWN0aW9uLi4uXHUwMDFiWzM2bVx1MDAxYlszOW1cblx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMSkgXHUwMDFiWzJtaW5kZXguaHRtbFx1MDAxYlsyMm1Ccm93c2Vyc2xpc3Q6IGJyb3dzZXJzIGRhdGEgKGNhbml1c2UtbGl0ZSkgaXMgNyBtb250aHMgb2xkLiBQbGVhc2UgcnVuOlxuICBucHggdXBkYXRlLWJyb3dzZXJzbGlzdC1kYkBsYXRlc3RcbiAgV2h5IHlvdSBzaG91bGQgZG8gaXQgcmVndWxhcmx5OiBodHRwczovL2dpdGh1Yi5jb20vYnJvd3NlcnNsaXN0L3VwZGF0ZS1kYiNyZWFkbWVcblx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoNykgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9tb2Rlcm4vdHlwZXMuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgyNykgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9tb2Rlcm4vdXNlU3VzcGVuc2VRdWVyeS5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDg0KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LXRvYXN0L2Rpc3QvaW5kZXgubWpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTIyKSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL2NoYXJ0LWJhci1iaWcuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICg3MDgpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vaWNvbnMvZGFtLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTQzMSkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9zbGlkZXJzLWhvcml6b250YWwuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxNjkxKSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDE3NzEpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHdC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDE5MTUpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9yZWFjdC10cmFuc2l0aW9uLWdyb3VwL2VzbS9Td2l0Y2hUcmFuc2l0aW9uLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlszMm3inJNcdTAwMWJbMzltIDI0ODEgbW9kdWxlcyB0cmFuc2Zvcm1lZC5cblx1MDAxYlsyS1x1MDAxYlsxR3JlbmRlcmluZyBjaHVua3MgKDEpLi4uXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMCkuLi5cdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgxKS4uLlx1MDAxYlsyS1x1MDAxYlsxR2NvbXB1dGluZyBnemlwIHNpemUgKDIpLi4uXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMykuLi5cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMm1kaXN0L1x1MDAxYlsyMm1cdTAwMWJbMzJtaW5kZXguaHRtbCAgICAgICAgICAgICAgICAgXHUwMDFiWzM5bVx1MDAxYlsxbVx1MDAxYlsybSAgMS43MSBrQlx1MDAxYlsyMm1cdTAwMWJbMW1cdTAwMWJbMjJtXHUwMDFiWzJtIOKUgiBnemlwOiAgIDAuODAga0JcdTAwMWJbMjJtXG5cdTAwMWJbMm1kaXN0L1x1MDAxYlsyMm1cdTAwMWJbMm1hc3NldHMvXHUwMDFiWzIybVx1MDAxYlszNW1pbmRleC1CREZWcEtEbS5jc3MgIFx1MDAxYlszOW1cdTAwMWJbMW1cdTAwMWJbMm0gNzEuNDIga0JcdTAwMWJbMjJtXHUwMDFiWzFtXHUwMDFiWzIybVx1MDAxYlsybSDilIIgZ3ppcDogIDEyLjM2IGtCXHUwMDFiWzIybVxuXHUwMDFiWzJtZGlzdC9cdTAwMWJbMjJtXHUwMDFiWzJtYXNzZXRzL1x1MDAxYlsyMm1cdTAwMWJbMzZtaW5kZXgtQ1hKeTg1YjcuanMgICBcdTAwMWJbMzltXHUwMDFiWzFtXHUwMDFiWzMzbTczNy40MCBrQlx1MDAxYlszOW1cdTAwMWJbMjJtXHUwMDFiWzJtIOKUgiBnemlwOiAyMTUuODcga0JcdTAwMWJbMjJtXG5cdTAwMWJbMzNtXG4oISkgU29tZSBjaHVua3MgYXJlIGxhcmdlciB0aGFuIDUwMCBrQiBhZnRlciBtaW5pZmljYXRpb24uIENvbnNpZGVyOlxuLSBVc2luZyBkeW5hbWljIGltcG9ydCgpIHRvIGNvZGUtc3BsaXQgdGhlIGFwcGxpY2F0aW9uXG4tIFVzZSBidWlsZC5yb2xsdXBPcHRpb25zLm91dHB1dC5tYW51YWxDaHVua3MgdG8gaW1wcm92ZSBjaHVua2luZzogaHR0cHM6Ly9yb2xsdXBqcy5vcmcvY29uZmlndXJhdGlvbi1vcHRpb25zLyNvdXRwdXQtbWFudWFsY2h1bmtzXG4tIEFkanVzdCBjaHVuayBzaXplIGxpbWl0IGZvciB0aGlzIHdhcm5pbmcgdmlhIGJ1aWxkLmNodW5rU2l6ZVdhcm5pbmdMaW1pdC5cdTAwMWJbMzltXG5cdTAwMWJbMzJt4pyTIGJ1aWx0IGluIDEuOTlzXHUwMDFiWzM5bVxuXHUwMDFiWzFHXHUwMDFiWzBL4qCZXHUwMDFiWzFHXHUwMDFiWzBLXHUwMDFiWzFHXHUwMDFiWzBL4qCZXHUwMDFiWzFHXHUwMDFiWzBLXG4+IHZpdGVfcmVhY3Rfc2hhZGNuX3RzQDAuMC4wIGRlcGxveVxuPiBnaC1wYWdlcyAtZCBkaXN0XG5cblx1MDAxYlsxR1x1MDAxYlswS+KgmVx1MDAxYlsxR1x1MDAxYlswS0Vycm9yOiBzcGF3biBFMkJJR1xuICAgIGF0IENoaWxkUHJvY2Vzcy5zcGF3biAobm9kZTppbnRlcm5hbC9jaGlsZF9wcm9jZXNzOjQyMToxMSlcbiAgICBhdCBPYmplY3Quc3Bhd24gKG5vZGU6Y2hpbGRfcHJvY2Vzczo3NTM6OSlcbiAgICBhdCAvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhL25vZGVfbW9kdWxlcy9naC1wYWdlcy9saWIvZ2l0LmpzOjMwOjIyXG4gICAgYXQgbmV3IFByb21pc2UgKDxhbm9ueW1vdXM+KVxuICAgIGF0IHNwYXduICgvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhL25vZGVfbW9kdWxlcy9naC1wYWdlcy9saWIvZ2l0LmpzOjI5OjEwKVxuICAgIGF0IEdpdC5leGVjICgvVXNlcnMvdmVrZXNzZXJvcC9Eb2N1bWVudHMvc2l0ZS1ub3ZhL25vZGVfbW9kdWxlcy9naC1wYWdlcy9saWIvZ2l0LmpzOjY5OjEwKVxuICAgIGF0IEdpdC5ybSAoL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YS9ub2RlX21vZHVsZXMvZ2gtcGFnZXMvbGliL2dpdC5qczoxNDY6MTUpXG4gICAgYXQgL1VzZXJzL3Zla2Vzc2Vyb3AvRG9jdW1lbnRzL3NpdGUtbm92YS9ub2RlX21vZHVsZXMvZ2gtcGFnZXMvbGliL2luZGV4LmpzOjE4ODoyMlxuXHUwMDFiWzFHXHUwMDFiWzBL4qCZXHUwMDFiWzFHXHUwMDFiWzBLXG4gICAgICAgIDwvc3Rkb3V0PlxuICAgICAgICA8c3RkZXJyPlxuICAgICAgICBcbiAgICAgICAgPC9zdGRlcnI+IiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiMzNiNmExZGYtNDlkZC00NmY4LTgxM2ItOTU0NzY5ZTViODI1O3Rvb2x1X3ZydHhfMDFWVGQyeXRlRW9WS201cG1QMkFEeTJ2Ijp7InJlcXVlc3RJZCI6IjMzYjZhMWRmLTQ5ZGQtNDZmOC04MTNiLTk1NDc2OWU1YjgyNSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFWVGQyeXRlRW9WS201cG1QMkFEeTJ2IiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBwYWNrYWdlLmpzb24uXG5SZXN1bHQgZm9yIHN0cl9yZXBsYWNlIGZvciBlbnRyeSB3aXRoIGluZGV4IFswXTpcblJlcGxhY2VtZW50IHN1Y2Nlc3NmdWwuXG5FZGl0ZWQgc2VjdGlvbiBhZnRlciBJREUgYXV0by1mb3JtYXR0aW5nIHdhcyBhcHBsaWVkOlxuICAgICA5XHQgICAgXCJidWlsZDpkZXZcIjogXCJ2aXRlIGJ1aWxkIC0tbW9kZSBkZXZlbG9wbWVudFwiLFxuICAgIDEwXHQgICAgXCJsaW50XCI6IFwiZXNsaW50IC5cIixcbiAgICAxMVx0ICAgIFwicHJldmlld1wiOiBcInZpdGUgcHJldmlld1wiLFxuICAgIDEyXHQgICAgXCJwcmVkZXBsb3lcIjogXCJucG0gcnVuIGJ1aWxkXCIsXG4gICAgMTNcdCAgICBcImRlcGxveVwiOiBcImdoLXBhZ2VzIC1kIGRpc3QgLS1hZGRcIlxuICAgIDE0XHQgIH0sXG4gICAgMTVcdCAgXCJkZXBlbmRlbmNpZXNcIjoge1xuICAgIDE2XHQgICAgXCJAaG9va2Zvcm0vcmVzb2x2ZXJzXCI6IFwiXjMuOS4wXCIsXG4gICAgMTdcdCAgICBcIkByYWRpeC11aS9yZWFjdC1hY2NvcmRpb25cIjogXCJeMS4yLjBcIixcblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYWMwOWZlODQtZmIyZi00MmI3LThmZjktOTBlYThlODFjNTAzO3Rvb2x1X3ZydHhfMDFEUnA0RDU3VTM4QllWYjhQeFlLQVNqIjp7InJlcXVlc3RJZCI6ImFjMDlmZTg0LWZiMmYtNDJiNy04ZmY5LTkwZWE4ZTgxYzUwMyIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFEUnA0RDU3VTM4QllWYjhQeFlLQVNqIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG4gICAgICAgIDxyZXR1cm4tY29kZT5cbiAgICAgICAgMVxuICAgICAgICA8L3JldHVybi1jb2RlPlxuICAgICAgICA8c3Rkb3V0PlxuICAgICAgICBcbj4gdml0ZV9yZWFjdF9zaGFkY25fdHNAMC4wLjAgcHJlZGVwbG95XG4+IG5wbSBydW4gYnVpbGRcblxuXHUwMDFiWzFHXHUwMDFiWzBLXG4+IHZpdGVfcmVhY3Rfc2hhZGNuX3RzQDAuMC4wIGJ1aWxkXG4+IHZpdGUgYnVpbGRcblxuXHUwMDFiWzFHXHUwMDFiWzBLXHUwMDFiWzM2bXZpdGUgdjUuNC4xMCBcdTAwMWJbMzJtYnVpbGRpbmcgZm9yIHByb2R1Y3Rpb24uLi5cdTAwMWJbMzZtXHUwMDFiWzM5bVxuXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxKSBcdTAwMWJbMm1pbmRleC5odG1sXHUwMDFiWzIybUJyb3dzZXJzbGlzdDogYnJvd3NlcnMgZGF0YSAoY2FuaXVzZS1saXRlKSBpcyA3IG1vbnRocyBvbGQuIFBsZWFzZSBydW46XG4gIG5weCB1cGRhdGUtYnJvd3NlcnNsaXN0LWRiQGxhdGVzdFxuICBXaHkgeW91IHNob3VsZCBkbyBpdCByZWd1bGFybHk6IGh0dHBzOi8vZ2l0aHViLmNvbS9icm93c2Vyc2xpc3QvdXBkYXRlLWRiI3JlYWRtZVxuXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICg1KSBcdTAwMWJbMm1zcmMvaW5kZXguY3NzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoODApIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sdWNpZGUtcmVhY3QvZGlzdC9lc20vbHVjaWRlLXJlYWN0LmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTA5KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL2JldHdlZW4taG9yaXpvbnRhbC1zdGFydC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDcyNSkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9kaXNjLWFsYnVtLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTUyNCkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy90aHVtYnMtdXAuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxNzEwKSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvcmVjaGFydHMvZXM2L2NhcnRlc2lhbi9FcnJvckJhci5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDE3NzMpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sb2Rhc2gvaGVhZC5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDE5NjMpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VUcmltLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlszMm3inJNcdTAwMWJbMzltIDI0ODEgbW9kdWxlcyB0cmFuc2Zvcm1lZC5cblx1MDAxYlsyS1x1MDAxYlsxR3JlbmRlcmluZyBjaHVua3MgKDEpLi4uXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMCkuLi5cdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgxKS4uLlx1MDAxYlsyS1x1MDAxYlsxR2NvbXB1dGluZyBnemlwIHNpemUgKDIpLi4uXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMykuLi5cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMm1kaXN0L1x1MDAxYlsyMm1cdTAwMWJbMzJtaW5kZXguaHRtbCAgICAgICAgICAgICAgICAgXHUwMDFiWzM5bVx1MDAxYlsxbVx1MDAxYlsybSAgMS43MSBrQlx1MDAxYlsyMm1cdTAwMWJbMW1cdTAwMWJbMjJtXHUwMDFiWzJtIOKUgiBnemlwOiAgIDAuODAga0JcdTAwMWJbMjJtXG5cdTAwMWJbMm1kaXN0L1x1MDAxYlsyMm1cdTAwMWJbMm1hc3NldHMvXHUwMDFiWzIybVx1MDAxYlszNW1pbmRleC1CREZWcEtEbS5jc3MgIFx1MDAxYlszOW1cdTAwMWJbMW1cdTAwMWJbMm0gNzEuNDIga0JcdTAwMWJbMjJtXHUwMDFiWzFtXHUwMDFiWzIybVx1MDAxYlsybSDilIIgZ3ppcDogIDEyLjM2IGtCXHUwMDFiWzIybVxuXHUwMDFiWzJtZGlzdC9cdTAwMWJbMjJtXHUwMDFiWzJtYXNzZXRzL1x1MDAxYlsyMm1cdTAwMWJbMzZtaW5kZXgtQ1hKeTg1YjcuanMgICBcdTAwMWJbMzltXHUwMDFiWzFtXHUwMDFiWzMzbTczNy40MCBrQlx1MDAxYlszOW1cdTAwMWJbMjJtXHUwMDFiWzJtIOKUgiBnemlwOiAyMTUuODcga0JcdTAwMWJbMjJtXG5cdTAwMWJbMzNtXG4oISkgU29tZSBjaHVua3MgYXJlIGxhcmdlciB0aGFuIDUwMCBrQiBhZnRlciBtaW5pZmljYXRpb24uIENvbnNpZGVyOlxuLSBVc2luZyBkeW5hbWljIGltcG9ydCgpIHRvIGNvZGUtc3BsaXQgdGhlIGFwcGxpY2F0aW9uXG4tIFVzZSBidWlsZC5yb2xsdXBPcHRpb25zLm91dHB1dC5tYW51YWxDaHVua3MgdG8gaW1wcm92ZSBjaHVua2luZzogaHR0cHM6Ly9yb2xsdXBqcy5vcmcvY29uZmlndXJhdGlvbi1vcHRpb25zLyNvdXRwdXQtbWFudWFsY2h1bmtzXG4tIEFkanVzdCBjaHVuayBzaXplIGxpbWl0IGZvciB0aGlzIHdhcm5pbmcgdmlhIGJ1aWxkLmNodW5rU2l6ZVdhcm5pbmdMaW1pdC5cdTAwMWJbMzltXG5cdTAwMWJbMzJt4pyTIGJ1aWx0IGluIDEuOTJzXHUwMDFiWzM5bVxuXHUwMDFiWzFHXHUwMDFiWzBL4qCZXHUwMDFiWzFHXHUwMDFiWzBLXHUwMDFiWzFHXHUwMDFiWzBL4qCZXHUwMDFiWzFHXHUwMDFiWzBLXG4+IHZpdGVfcmVhY3Rfc2hhZGNuX3RzQDAuMC4wIGRlcGxveVxuPiBnaC1wYWdlcyAtZCBkaXN0IC0tYWRkXG5cblx1MDAxYlsxR1x1MDAxYlswS+KgmVx1MDAxYlsxR1x1MDAxYlswS1VzZXJuYW1lIGZvciAnaHR0cHM6Ly9naXRodWIuY29tJzog0LzRg9C70YNcYiBcYlxiIFxiXGIgXGJcYiBcYnZla2Vzc2Vyb3BcblBhc3N3b3JkIGZvciAnaHR0cHM6Ly/QvNGDdmVrZXNzZXJvcEBnaXRodWIuY29tJzogXG5Qcm9jZXNzRXJyb3I6IHJlbW90ZTogU3VwcG9ydCBmb3IgcGFzc3dvcmQgYXV0aGVudGljYXRpb24gd2FzIHJlbW92ZWQgb24gQXVndXN0IDEzLCAyMDIxLlxucmVtb3RlOiBQbGVhc2Ugc2VlIGh0dHBzOi8vZG9jcy5naXRodWIuY29tL2dldC1zdGFydGVkL2dldHRpbmctc3RhcnRlZC13aXRoLWdpdC9hYm91dC1yZW1vdGUtcmVwb3NpdG9yaWVzI2Nsb25pbmctd2l0aC1odHRwcy11cmxzIGZvciBpbmZvcm1hdGlvbiBvbiBjdXJyZW50bHkgcmVjb21tZW5kZWQgbW9kZXMgb2YgYXV0aGVudGljYXRpb24uXG5mYXRhbDogQXV0aGVudGljYXRpb24gZmFpbGVkIGZvciAnaHR0cHM6Ly9naXRodWIuY29tL3Zla2Vzc2Vyb3Avc2l0ZS1ub3ZhLmdpdC8nXG5cbiAgICBhdCBDaGlsZFByb2Nlc3MuPGFub255bW91cz4gKC9Vc2Vycy92ZWtlc3Nlcm9wL0RvY3VtZW50cy9zaXRlLW5vdmEvbm9kZV9tb2R1bGVzL2doLXBhZ2VzL2xpYi9naXQuanM6NDI6MTYpXG4gICAgYXQgQ2hpbGRQcm9jZXNzLmVtaXQgKG5vZGU6ZXZlbnRzOjUwNzoyOClcbiAgICBhdCBtYXliZUNsb3NlIChub2RlOmludGVybmFsL2NoaWxkX3Byb2Nlc3M6MTEwMToxNilcbiAgICBhdCBTb2NrZXQuPGFub255bW91cz4gKG5vZGU6aW50ZXJuYWwvY2hpbGRfcHJvY2Vzczo0NTc6MTEpXG4gICAgYXQgU29ja2V0LmVtaXQgKG5vZGU6ZXZlbnRzOjUwNzoyOClcbiAgICBhdCBQaXBlLjxhbm9ueW1vdXM+IChub2RlOm5ldDozNTE6MTIpXG5cdTAwMWJbMUdcdTAwMWJbMEvioJlcdTAwMWJbMUdcdTAwMWJbMEtcbiAgICAgICAgPC9zdGRvdXQ+XG4gICAgICAgIDxzdGRlcnI+XG4gICAgICAgIFxuICAgICAgICA8L3N0ZGVycj4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJlMjVhYTZjYi03ZmZlLTQ1OTUtOGFmNy1lZWU3MmE3NDFlNDQ7dG9vbHVfdnJ0eF8wMVg0ZHI0Tjk0WmhVWGlwNFNNWU5pbWciOnsicmVxdWVzdElkIjoiZTI1YWE2Y2ItN2ZmZS00NTk1LThhZjctZWVlNzJhNzQxZTQ0IiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVg0ZHI0Tjk0WmhVWGlwNFNNWU5pbWciLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJGaWxlIHNhdmVkIHN1Y2Nlc3NmdWxseS4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJiM2Y4NjdjZi0yZWM4LTQyMWYtOTkyZi0wODUyNjA5N2MxMmE7dG9vbHVfdnJ0eF8wMUViUXpLZkJ2S0tKWG9BNjd0M1FMa1AiOnsicmVxdWVzdElkIjoiYjNmODY3Y2YtMmVjOC00MjFmLTk5MmYtMDg1MjYwOTdjMTJhIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMUViUXpLZkJ2S0tKWG9BNjd0M1FMa1AiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlIGFyZSB0aGUgcmVzdWx0cyBmcm9tIGV4ZWN1dGluZyB0aGUgY29tbWFuZC5cbjxyZXR1cm4tY29kZT5cbjBcbjwvcmV0dXJuLWNvZGU+XG48c3Rkb3V0PlxuXG48L3N0ZG91dD5cbjxzdGRlcnI+XG5cbjwvc3RkZXJyPiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjUzYTEyYzVlLWU3ZjUtNDA0Yy1hNzI1LTJlOTJlZGU0NDE0MDt0b29sdV92cnR4XzAxQkg1RUdIV0FBQ0JYYU5XQ25LQ241ayI6eyJyZXF1ZXN0SWQiOiI1M2ExMmM1ZS1lN2Y1LTQwNGMtYTcyNS0yZTkyZWRlNDQxNDAiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxQkg1RUdIV0FBQ0JYYU5XQ25LQ241ayIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IlN1Y2Nlc3NmdWxseSBlZGl0ZWQgdGhlIGZpbGUgUkVBRE1FLm1kLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAyOVx0IyDQlNC10L/Qu9C+0Lkg0L3QsCBHaXRIdWIgUGFnZXNcbiAgICAzMFx0bnBtIHJ1biBkZXBsb3lcbiAgICAzMVx0YGBgXG4gICAgMzJcdFxuICAgIDMzXHQjIyDQlNC10L/Qu9C+0Lkg0L3QsCBHaXRIdWIgUGFnZXNcbiAgICAzNFx0XG4gICAgMzVcdNCf0YDQvtC10LrRgiDQvdCw0YHRgtGA0L7QtdC9INC00LvRjyDQtNC10L/Qu9C+0Y8g0L3QsCBHaXRIdWIgUGFnZXMuINCU0LvRjyDQtNC10L/Qu9C+0Y8g0LXRgdGC0Ywg0LTQstCwINGB0L/QvtGB0L7QsdCwOlxuICAgIDM2XHRcbiAgICAzN1x0IyMjINCh0L/QvtGB0L7QsSAxOiDQmNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtSBucG0g0YHQutGA0LjQv9GC0LBcbiAgICAzOFx0XG4gICAgMzlcdGBgYGJhc2hcbiAgICA0MFx0bnBtIHJ1biBkZXBsb3lcbiAgICA0MVx0YGBgXG4gICAgNDJcdFxuICAgIDQzXHTQrdGC0LAg0LrQvtC80LDQvdC00LAg0YHQvtCx0LXRgNC10YIg0L/RgNC+0LXQutGCINC4INC+0L/Rg9Cx0LvQuNC60YPQtdGCINC10LPQviDQvdCwINCy0LXRgtC60LUgYGdoLXBhZ2VzYCDQstCw0YjQtdCz0L4g0YDQtdC/0L7Qt9C40YLQvtGA0LjRjy4g0J3QtdC+0LHRhdC+0LTQuNC80L4g0L3QsNGB0YLRgNC+0LjRgtGMINCw0YPRgtC10L3RgtC40YTQuNC60LDRhtC40Y4gR2l0SHViINGBINC/0L7QvNC+0YnRjNGOIFNTSCDQuNC70Lgg0YLQvtC60LXQvdCwINC00L7RgdGC0YPQv9CwLlxuICAgIDQ0XHRcbiAgICA0NVx0IyMjINCh0L/QvtGB0L7QsSAyOiDQmNGB0L/QvtC70YzQt9C+0LLQsNC90LjQtSDRgdC60YDQuNC/0YLQsCBkZXBsb3kuc2hcbiAgICA0Nlx0XG4gICAgNDdcdGBgYGJhc2hcbiAgICA0OFx0Li9kZXBsb3kuc2hcbiAgICA0OVx0YGBgXG4gICAgNTBcdFxuICAgIDUxXHTQrdGC0L7RgiDRgdC60YDQuNC/0YIg0YHQvtCx0LXRgNC10YIg0L/RgNC+0LXQutGCINC4INC+0L/Rg9Cx0LvQuNC60YPQtdGCINC10LPQviDQvdCwINCy0LXRgtC60LUgYGdoLXBhZ2VzYCDQstCw0YjQtdCz0L4g0YDQtdC/0L7Qt9C40YLQvtGA0LjRjy4g0KLRgNC10LHRg9C10YLRgdGPINC90LDRgdGC0YDQvtC10L3QvdGL0LkgU1NILdC60LvRjtGHINC00LvRjyBHaXRIdWIuXG4gICAgNTJcdFxuXG5SZXZpZXcgdGhlIGNoYW5nZXMgYW5kIG1ha2Ugc3VyZSB0aGV5IGFyZSBhcyBleHBlY3RlZCAoY29ycmVjdCBpbmRlbnRhdGlvbiwgbm8gZHVwbGljYXRlIGxpbmVzLCBldGMpLlxuRWRpdCB0aGUgZmlsZSBhZ2FpbiBpZiBuZWNlc3NhcnkuXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJmNmY3NDM3OS1jY2YzLTQwYWYtOGMzYS04MDAzNzY2YmU4NzE7dG9vbHVfdnJ0eF8wMTU1WEJCTG5oOEpFc3pBNnp0anVzYjYiOnsicmVxdWVzdElkIjoiZjZmNzQzNzktY2NmMy00MGFmLThjM2EtODAwMzc2NmJlODcxIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMTU1WEJCTG5oOEpFc3pBNnp0anVzYjYiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHZpdGUuY29uZmlnLnRzOlxuICAgICAxXHRpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xuICAgICAyXHRpbXBvcnQgcmVhY3QgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXJlYWN0LXN3Y1wiO1xuICAgICAzXHRpbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuICAgICA0XHRcbiAgICAgNVx0Ly8gaHR0cHM6Ly92aXRlanMuZGV2L2NvbmZpZy9cbiAgICAgNlx0ZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKCh7IG1vZGUgfSkgPT4gKHtcbiAgICAgN1x0ICBiYXNlOiAnL3NpdGUtbm92YS8nLFxuICAgICA4XHQgIHNlcnZlcjoge1xuICAgICA5XHQgICAgaG9zdDogXCI6OlwiLFxuICAgIDEwXHQgICAgcG9ydDogODA4MCxcbiAgICAxMVx0ICB9LFxuICAgIDEyXHQgIHBsdWdpbnM6IFtcbiAgICAxM1x0ICAgIHJlYWN0KCksXG4gICAgMTRcdCAgXSxcbiAgICAxNVx0ICByZXNvbHZlOiB7XG4gICAgMTZcdCAgICBhbGlhczoge1xuICAgIDE3XHQgICAgICBcIkBcIjogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCIuL3NyY1wiKSxcbiAgICAxOFx0ICAgIH0sXG4gICAgMTlcdCAgfSxcbiAgICAyMFx0fSkpO1xuICAgIDIxXHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDIxXG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIwNzIyZWZlMC0yZjc0LTQyZjEtYmZhYy1lNzVlMWZlOTA3Zjc7dG9vbHVfdnJ0eF8wMVJiWjdjUTlBaXh5Z0VGeGVUNjFuOGEiOnsicmVxdWVzdElkIjoiMDcyMmVmZTAtMmY3NC00MmYxLWJmYWMtZTc1ZTFmZTkwN2Y3IiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMVJiWjdjUTlBaXh5Z0VGeGVUNjFuOGEiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGluZGV4Lmh0bWw6XG4gICAgIDFcdFxuICAgICAyXHQ8IURPQ1RZUEUgaHRtbD5cbiAgICAgM1x0PGh0bWwgbGFuZz1cInJ1XCI+XG4gICAgIDRcdCAgPGhlYWQ+XG4gICAgIDVcdCAgICA8bWV0YSBjaGFyc2V0PVwiVVRGLThcIiAvPlxuICAgICA2XHQgICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjBcIiAvPlxuICAgICA3XHQgICAgPHRpdGxlPk5vdmEgQUkgLSBLdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8gQUkvTUw8L3RpdGxlPlxuICAgICA4XHQgICAgPG1ldGEgbmFtZT1cImRlc2NyaXB0aW9uXCIgY29udGVudD1cIk5vdmEgQUkgLSDQv9GA0LXQtNC90LDRgdGC0YDQvtC10L3QvdCw0Y8ga3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPINC30LDQtNCw0YfQsCDQvtCx0YPRh9C10L3QuNGPINC4INC40L3RhNC10YDQtdC90YHQsC4g0KHQvdC40LbQtdC90LjQtSDRgNCw0YHRhdC+0LTQvtCyINC4INC/0L7QstGL0YjQtdC90LjQtSDRg9GC0LjQu9C40LfQsNGG0LjQuCDRgNC10YHRg9GA0YHQvtCyINC60LvQsNGB0YLQtdGA0LAuXCIgLz5cbiAgICAgOVx0ICAgIDxtZXRhIG5hbWU9XCJhdXRob3JcIiBjb250ZW50PVwiTm92YSBBSVwiIC8+XG4gICAgMTBcdFxuICAgIDExXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0aXRsZVwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0gS3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPIEFJL01MXCIgLz5cbiAgICAxMlx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6ZGVzY3JpcHRpb25cIiBjb250ZW50PVwiTm92YSBBSSAtINC/0YDQtdC00L3QsNGB0YLRgNC+0LXQvdC90LDRjyBrdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8g0LfQsNC00LDRh9CwINC+0LHRg9GH0LXQvdC40Y8g0Lgg0LjQvdGE0LXRgNC10L3RgdCwLiDQodC90LjQttC10L3QuNC1INGA0LDRgdGF0L7QtNC+0LIg0Lgg0L/QvtCy0YvRiNC10L3QuNC1INGD0YLQuNC70LjQt9Cw0YbQuNC4INGA0LXRgdGD0YDRgdC+0LIg0LrQu9Cw0YHRgtC10YDQsC5cIiAvPlxuICAgIDEzXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzp0eXBlXCIgY29udGVudD1cIndlYnNpdGVcIiAvPlxuICAgIDE0XHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzppbWFnZVwiIGNvbnRlbnQ9XCJodHRwczovL2xvdmFibGUuZGV2L29wZW5ncmFwaC1pbWFnZS1wOThwcWcucG5nXCIgLz5cbiAgICAxNVx0XG4gICAgMTZcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjpjYXJkXCIgY29udGVudD1cInN1bW1hcnlfbGFyZ2VfaW1hZ2VcIiAvPlxuICAgIDE3XHQgICAgPG1ldGEgbmFtZT1cInR3aXR0ZXI6c2l0ZVwiIGNvbnRlbnQ9XCJAbG92YWJsZV9kZXZcIiAvPlxuICAgIDE4XHQgICAgPG1ldGEgbmFtZT1cInR3aXR0ZXI6aW1hZ2VcIiBjb250ZW50PVwiaHR0cHM6Ly9sb3ZhYmxlLmRldi9vcGVuZ3JhcGgtaW1hZ2UtcDk4cHFnLnBuZ1wiIC8+XG4gICAgMTlcdFxuICAgIDIwXHQgICAgPGxpbmsgcmVsPVwicHJlY29ubmVjdFwiIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tXCI+XG4gICAgMjFcdCAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ3N0YXRpYy5jb21cIiBjcm9zc29yaWdpbj5cbiAgICAyMlx0ICAgIDxsaW5rIGhyZWY9XCJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PUludGVyOndnaHRANDAwOzUwMDs2MDA7NzAwJmRpc3BsYXk9c3dhcFwiIHJlbD1cInN0eWxlc2hlZXRcIj5cbiAgICAyM1x0ICA8L2hlYWQ+XG4gICAgMjRcdFxuICAgIDI1XHQgIDxib2R5PlxuICAgIDI2XHQgICAgPGRpdiBpZD1cInJvb3RcIj48L2Rpdj5cbiAgICAyN1x0ICAgIDwhLS0gSU1QT1JUQU5UOiBETyBOT1QgUkVNT1ZFIFRISVMgU0NSSVBUIFRBRyBPUiBUSElTIFZFUlkgQ09NTUVOVCEgLS0+XG4gICAgMjhcdCAgICA8c2NyaXB0IHNyYz1cImh0dHBzOi8vY2RuLmdwdGVuZy5jby9ncHRlbmdpbmVlci5qc1wiIHR5cGU9XCJtb2R1bGVcIj48L3NjcmlwdD5cbiAgICAyOVx0ICAgIDxzY3JpcHQgdHlwZT1cIm1vZHVsZVwiIHNyYz1cIi4vc3JjL21haW4udHN4XCI+PC9zY3JpcHQ+XG4gICAgMzBcdCAgPC9ib2R5PlxuICAgIDMxXHQ8L2h0bWw+XG4gICAgMzJcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMzJcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjBiNWE2MjIwLTczMTAtNDVjZi05NTgxLWQ0NGE0ZTNjZmI4Yzt0b29sdV92cnR4XzAxM0Y3NmdWeTlkalFYeTFzeHNEajJLRSI6eyJyZXF1ZXN0SWQiOiIwYjVhNjIyMC03MzEwLTQ1Y2YtOTU4MS1kNDRhNGUzY2ZiOGMiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxM0Y3NmdWeTlkalFYeTFzeHNEajJLRSIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gcGFja2FnZS5qc29uOlxuICAgICAxXHR7XG4gICAgIDJcdCAgXCJuYW1lXCI6IFwidml0ZV9yZWFjdF9zaGFkY25fdHNcIixcbiAgICAgM1x0ICBcInByaXZhdGVcIjogdHJ1ZSxcbiAgICAgNFx0ICBcInZlcnNpb25cIjogXCIwLjAuMFwiLFxuICAgICA1XHQgIFwidHlwZVwiOiBcIm1vZHVsZVwiLFxuICAgICA2XHQgIFwic2NyaXB0c1wiOiB7XG4gICAgIDdcdCAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICAgOFx0ICAgIFwiYnVpbGRcIjogXCJ2aXRlIGJ1aWxkXCIsXG4gICAgIDlcdCAgICBcImJ1aWxkOmRldlwiOiBcInZpdGUgYnVpbGQgLS1tb2RlIGRldmVsb3BtZW50XCIsXG4gICAgMTBcdCAgICBcImxpbnRcIjogXCJlc2xpbnQgLlwiLFxuICAgIDExXHQgICAgXCJwcmV2aWV3XCI6IFwidml0ZSBwcmV2aWV3XCIsXG4gICAgMTJcdCAgICBcInByZWRlcGxveVwiOiBcIm5wbSBydW4gYnVpbGRcIixcbiAgICAxM1x0ICAgIFwiZGVwbG95XCI6IFwiZ2gtcGFnZXMgLWQgZGlzdCAtLWFkZFwiXG4gICAgMTRcdCAgfSxcbiAgICAxNVx0ICBcImRlcGVuZGVuY2llc1wiOiB7XG4gICAgMTZcdCAgICBcIkBob29rZm9ybS9yZXNvbHZlcnNcIjogXCJeMy45LjBcIixcbiAgICAxN1x0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWFjY29yZGlvblwiOiBcIl4xLjIuMFwiLFxuICAgIDE4XHQgICAgXCJAcmFkaXgtdWkvcmVhY3QtYWxlcnQtZGlhbG9nXCI6IFwiXjEuMS4xXCIsXG4gICAgMTlcdCAgICBcIkByYWRpeC11aS9yZWFjdC1hc3BlY3QtcmF0aW9cIjogXCJeMS4xLjBcIixcbiAgICAyMFx0ICAgIFwiQHJhZGl4LXVpL3JlYWN0LWF2YXRhclwiOiBcIl4xLjEuMFwiLFxuVG90YWwgbGluZXMgaW4gZmlsZTogODZcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjEyOGY2ZmJiLTc1ZDUtNDcxOC05NWI3LTAzZmJkY2JkODE5YTt0b29sdV92cnR4XzAxRjZNbWd1b01zcDRjQXNQdjVaSDhKQyI6eyJyZXF1ZXN0SWQiOiIxMjhmNmZiYi03NWQ1LTQ3MTgtOTViNy0wM2ZiZGNiZDgxOWEiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxRjZNbWd1b01zcDRjQXNQdjVaSDhKQyIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gZGlzdC9pbmRleC5odG1sOlxuICAgICAxXHRcbiAgICAgMlx0PCFET0NUWVBFIGh0bWw+XG4gICAgIDNcdDxodG1sIGxhbmc9XCJydVwiPlxuICAgICA0XHQgIDxoZWFkPlxuICAgICA1XHQgICAgPG1ldGEgY2hhcnNldD1cIlVURi04XCIgLz5cbiAgICAgNlx0ICAgIDxtZXRhIG5hbWU9XCJ2aWV3cG9ydFwiIGNvbnRlbnQ9XCJ3aWR0aD1kZXZpY2Utd2lkdGgsIGluaXRpYWwtc2NhbGU9MS4wXCIgLz5cbiAgICAgN1x0ICAgIDx0aXRsZT5Ob3ZhIEFJIC0gS3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPIEFJL01MPC90aXRsZT5cbiAgICAgOFx0ICAgIDxtZXRhIG5hbWU9XCJkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgIDlcdCAgICA8bWV0YSBuYW1lPVwiYXV0aG9yXCIgY29udGVudD1cIk5vdmEgQUlcIiAvPlxuICAgIDEwXHRcbiAgICAxMVx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dGl0bGVcIiBjb250ZW50PVwiTm92YSBBSSAtIEt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyBBSS9NTFwiIC8+XG4gICAgMTJcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmRlc2NyaXB0aW9uXCIgY29udGVudD1cIk5vdmEgQUkgLSDQv9GA0LXQtNC90LDRgdGC0YDQvtC10L3QvdCw0Y8ga3ViZXJuZXRlcy3Qv9C70LDRgtGE0L7RgNC80LAg0LTQu9GPINC30LDQtNCw0YfQsCDQvtCx0YPRh9C10L3QuNGPINC4INC40L3RhNC10YDQtdC90YHQsC4g0KHQvdC40LbQtdC90LjQtSDRgNCw0YHRhdC+0LTQvtCyINC4INC/0L7QstGL0YjQtdC90LjQtSDRg9GC0LjQu9C40LfQsNGG0LjQuCDRgNC10YHRg9GA0YHQvtCyINC60LvQsNGB0YLQtdGA0LAuXCIgLz5cbiAgICAxM1x0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6dHlwZVwiIGNvbnRlbnQ9XCJ3ZWJzaXRlXCIgLz5cbiAgICAxNFx0ICAgIDxtZXRhIHByb3BlcnR5PVwib2c6aW1hZ2VcIiBjb250ZW50PVwiaHR0cHM6Ly9sb3ZhYmxlLmRldi9vcGVuZ3JhcGgtaW1hZ2UtcDk4cHFnLnBuZ1wiIC8+XG4gICAgMTVcdFxuICAgIDE2XHQgICAgPG1ldGEgbmFtZT1cInR3aXR0ZXI6Y2FyZFwiIGNvbnRlbnQ9XCJzdW1tYXJ5X2xhcmdlX2ltYWdlXCIgLz5cbiAgICAxN1x0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOnNpdGVcIiBjb250ZW50PVwiQGxvdmFibGVfZGV2XCIgLz5cbiAgICAxOFx0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmltYWdlXCIgY29udGVudD1cImh0dHBzOi8vbG92YWJsZS5kZXYvb3BlbmdyYXBoLWltYWdlLXA5OHBxZy5wbmdcIiAvPlxuICAgIDE5XHRcbiAgICAyMFx0ICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbVwiPlxuICAgIDIxXHQgICAgPGxpbmsgcmVsPVwicHJlY29ubmVjdFwiIGhyZWY9XCJodHRwczovL2ZvbnRzLmdzdGF0aWMuY29tXCIgY3Jvc3NvcmlnaW4+XG4gICAgMjJcdCAgICA8bGluayBocmVmPVwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1JbnRlcjp3Z2h0QDQwMDs1MDA7NjAwOzcwMCZkaXNwbGF5PXN3YXBcIiByZWw9XCJzdHlsZXNoZWV0XCI+XG4gICAgMjNcdCAgICA8c2NyaXB0IHR5cGU9XCJtb2R1bGVcIiBjcm9zc29yaWdpbiBzcmM9XCIvc2l0ZS1ub3ZhL2Fzc2V0cy9pbmRleC1DWEp5ODViNy5qc1wiPjwvc2NyaXB0PlxuICAgIDI0XHQgICAgPGxpbmsgcmVsPVwic3R5bGVzaGVldFwiIGNyb3Nzb3JpZ2luIGhyZWY9XCIvc2l0ZS1ub3ZhL2Fzc2V0cy9pbmRleC1CREZWcEtEbS5jc3NcIj5cbiAgICAyNVx0ICA8L2hlYWQ+XG4gICAgMjZcdFxuICAgIDI3XHQgIDxib2R5PlxuICAgIDI4XHQgICAgPGRpdiBpZD1cInJvb3RcIj48L2Rpdj5cbiAgICAyOVx0ICAgIDwhLS0gSU1QT1JUQU5UOiBETyBOT1QgUkVNT1ZFIFRISVMgU0NSSVBUIFRBRyBPUiBUSElTIFZFUlkgQ09NTUVOVCEgLS0+XG4gICAgMzBcdCAgICA8c2NyaXB0IHNyYz1cImh0dHBzOi8vY2RuLmdwdGVuZy5jby9ncHRlbmdpbmVlci5qc1wiIHR5cGU9XCJtb2R1bGVcIj48L3NjcmlwdD5cbiAgICAzMVx0ICA8L2JvZHk+XG4gICAgMzJcdDwvaHRtbD5cbiAgICAzM1x0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAzM1xuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiYTVmMDAwZmYtYzM4ZS00OGQ4LTk0MGUtZDdlN2YyZmEwYjMxO3Rvb2x1X3ZydHhfMDFNZTU3dHhXTDZ2YUt0RnlmSmNGNHVNIjp7InJlcXVlc3RJZCI6ImE1ZjAwMGZmLWMzOGUtNDhkOC05NDBlLWQ3ZTdmMmZhMGIzMSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFNZTU3dHhXTDZ2YUt0RnlmSmNGNHVNIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiU3VjY2Vzc2Z1bGx5IGVkaXRlZCB0aGUgZmlsZSBpbmRleC5odG1sLlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAyM1x0ICA8L2hlYWQ+XG4gICAgMjRcdFxuICAgIDI1XHQgIDxib2R5PlxuICAgIDI2XHQgICAgPGRpdiBpZD1cInJvb3RcIj48L2Rpdj5cbiAgICAyN1x0ICAgIDwhLS0gR1BUIEVuZ2luZWVyIHNjcmlwdCByZW1vdmVkIC0tPlxuICAgIDI4XHQgICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgc3JjPVwiLi9zcmMvbWFpbi50c3hcIj48L3NjcmlwdD5cbiAgICAyOVx0ICA8L2JvZHk+XG4gICAgMzBcdDwvaHRtbD5cbiAgICAzMVx0XG5cblJldmlldyB0aGUgY2hhbmdlcyBhbmQgbWFrZSBzdXJlIHRoZXkgYXJlIGFzIGV4cGVjdGVkIChjb3JyZWN0IGluZGVudGF0aW9uLCBubyBkdXBsaWNhdGUgbGluZXMsIGV0YykuXG5FZGl0IHRoZSBmaWxlIGFnYWluIGlmIG5lY2Vzc2FyeS5cbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjNjNzQ3ODE1LTdiMjktNGY0Ny05YWYxLTFlMDEyZDVhNjk4Njt0b29sdV92cnR4XzAxRTZWVExNVGtHOW5YVWk5ZjhKM2g0cyI6eyJyZXF1ZXN0SWQiOiIzYzc0NzgxNS03YjI5LTRmNDctOWFmMS0xZTAxMmQ1YTY5ODYiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxRTZWVExNVGtHOW5YVWk5ZjhKM2g0cyIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gdml0ZS5jb25maWcudHM6XG4gICAgIDFcdGltcG9ydCB7IGRlZmluZUNvbmZpZyB9IGZyb20gXCJ2aXRlXCI7XG4gICAgIDJcdGltcG9ydCByZWFjdCBmcm9tIFwiQHZpdGVqcy9wbHVnaW4tcmVhY3Qtc3djXCI7XG4gICAgIDNcdGltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XG4gICAgIDRcdFxuICAgICA1XHQvLyBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL1xuICAgICA2XHRleHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoKHsgbW9kZSB9KSA9PiAoe1xuICAgICA3XHQgIGJhc2U6ICcvc2l0ZS1ub3ZhLycsXG4gICAgIDhcdCAgc2VydmVyOiB7XG4gICAgIDlcdCAgICBob3N0OiBcIjo6XCIsXG4gICAgMTBcdCAgICBwb3J0OiA4MDgwLFxuICAgIDExXHQgIH0sXG4gICAgMTJcdCAgcGx1Z2luczogW1xuICAgIDEzXHQgICAgcmVhY3QoKSxcbiAgICAxNFx0ICBdLFxuICAgIDE1XHQgIHJlc29sdmU6IHtcbiAgICAxNlx0ICAgIGFsaWFzOiB7XG4gICAgMTdcdCAgICAgIFwiQFwiOiBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCBcIi4vc3JjXCIpLFxuICAgIDE4XHQgICAgfSxcbiAgICAxOVx0ICB9LFxuICAgIDIwXHR9KSk7XG4gICAgMjFcdFxuVG90YWwgbGluZXMgaW4gZmlsZTogMjFcbiIsImlzRXJyb3IiOmZhbHNlLCJyZXF1ZXN0SWQiOiIifX0sIjY3YjRiMzQxLWNkMDEtNGVjNC1iNjBmLWExOWI1ZDE5MzYxNTt0b29sdV92cnR4XzAxMlJoWjh5YlVvVXpKajd6OUw5Sm1CaiI6eyJyZXF1ZXN0SWQiOiI2N2I0YjM0MS1jZDAxLTRlYzQtYjYwZi1hMTliNWQxOTM2MTUiLCJ0b29sVXNlSWQiOiJ0b29sdV92cnR4XzAxMlJoWjh5YlVvVXpKajd6OUw5Sm1CaiIsInBoYXNlIjo1LCJyZXN1bHQiOnsidGV4dCI6IkhlcmUncyB0aGUgcmVzdWx0IG9mIHJ1bm5pbmcgYGNhdCAtbmAgb24gc3JjL21haW4udHN4OlxuICAgICAxXHRpbXBvcnQgeyBjcmVhdGVSb290IH0gZnJvbSAncmVhY3QtZG9tL2NsaWVudCdcbiAgICAgMlx0aW1wb3J0IEFwcCBmcm9tICcuL0FwcC50c3gnXG4gICAgIDNcdGltcG9ydCAnLi9pbmRleC5jc3MnXG4gICAgIDRcdFxuICAgICA1XHRjcmVhdGVSb290KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicm9vdFwiKSEpLnJlbmRlcig8QXBwIC8+KTtcbiAgICAgNlx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiA2XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCI5NGM4YmRiZC0wMjdmLTQ2YzEtOTA4Yy0yYTYyNDc2MzQ0ZTQ7dG9vbHVfdnJ0eF8wMU5BUmd6UHFjRnp5WnNWM0pkMVE2RFgiOnsicmVxdWVzdElkIjoiOTRjOGJkYmQtMDI3Zi00NmMxLTkwOGMtMmE2MjQ3NjM0NGU0IiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMU5BUmd6UHFjRnp5WnNWM0pkMVE2RFgiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIHNyYy9BcHAudHN4OlxuICAgICAxXHRpbXBvcnQgeyBUb2FzdGVyIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS90b2FzdGVyXCI7XG4gICAgIDJcdGltcG9ydCB7IFRvYXN0ZXIgYXMgU29ubmVyIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS9zb25uZXJcIjtcbiAgICAgM1x0aW1wb3J0IHsgVG9vbHRpcFByb3ZpZGVyIH0gZnJvbSBcIkAvY29tcG9uZW50cy91aS90b29sdGlwXCI7XG4gICAgIDRcdGltcG9ydCB7IFF1ZXJ5Q2xpZW50LCBRdWVyeUNsaWVudFByb3ZpZGVyIH0gZnJvbSBcIkB0YW5zdGFjay9yZWFjdC1xdWVyeVwiO1xuICAgICA1XHRpbXBvcnQgeyBCcm93c2VyUm91dGVyLCBSb3V0ZXMsIFJvdXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbiAgICAgNlx0aW1wb3J0IEluZGV4IGZyb20gXCIuL3BhZ2VzL0luZGV4XCI7XG4gICAgIDdcdGltcG9ydCBOb3RGb3VuZCBmcm9tIFwiLi9wYWdlcy9Ob3RGb3VuZFwiO1xuICAgICA4XHRcbiAgICAgOVx0Y29uc3QgcXVlcnlDbGllbnQgPSBuZXcgUXVlcnlDbGllbnQoKTtcbiAgICAxMFx0XG4gICAgMTFcdGNvbnN0IEFwcCA9ICgpID0+IChcbiAgICAxMlx0ICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e3F1ZXJ5Q2xpZW50fT5cbiAgICAxM1x0ICAgIDxUb29sdGlwUHJvdmlkZXI+XG4gICAgMTRcdCAgICAgIDxUb2FzdGVyIC8+XG4gICAgMTVcdCAgICAgIDxTb25uZXIgLz5cbiAgICAxNlx0ICAgICAgPEJyb3dzZXJSb3V0ZXI+XG4gICAgMTdcdCAgICAgICAgPFJvdXRlcz5cbiAgICAxOFx0ICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxJbmRleCAvPn0gLz5cbiAgICAxOVx0ICAgICAgICAgIHsvKiBBREQgQUxMIENVU1RPTSBST1VURVMgQUJPVkUgVEhFIENBVENILUFMTCBcIipcIiBST1VURSAqL31cbiAgICAyMFx0ICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiKlwiIGVsZW1lbnQ9ezxOb3RGb3VuZCAvPn0gLz5cbiAgICAyMVx0ICAgICAgICA8L1JvdXRlcz5cbiAgICAyMlx0ICAgICAgPC9Ccm93c2VyUm91dGVyPlxuICAgIDIzXHQgICAgPC9Ub29sdGlwUHJvdmlkZXI+XG4gICAgMjRcdCAgPC9RdWVyeUNsaWVudFByb3ZpZGVyPlxuICAgIDI1XHQpO1xuICAgIDI2XHRcbiAgICAyN1x0ZXhwb3J0IGRlZmF1bHQgQXBwO1xuICAgIDI4XHRcblRvdGFsIGxpbmVzIGluIGZpbGU6IDI4XG4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCJkMDllNzZiYy01NjZlLTQ2M2ItYThmMS1jNWRlZmIzMjFhMWM7dG9vbHVfdnJ0eF8wMTE5dFp3SEFNNWU2Z3c1bWZBcWhod2kiOnsicmVxdWVzdElkIjoiZDA5ZTc2YmMtNTY2ZS00NjNiLWE4ZjEtYzVkZWZiMzIxYTFjIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMTE5dFp3SEFNNWU2Z3c1bWZBcWhod2kiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJTdWNjZXNzZnVsbHkgZWRpdGVkIHRoZSBmaWxlIHNyYy9BcHAudHN4LlxuUmVzdWx0IGZvciBzdHJfcmVwbGFjZSBmb3IgZW50cnkgd2l0aCBpbmRleCBbMF06XG5SZXBsYWNlbWVudCBzdWNjZXNzZnVsLlxuRWRpdGVkIHNlY3Rpb24gYWZ0ZXIgSURFIGF1dG8tZm9ybWF0dGluZyB3YXMgYXBwbGllZDpcbiAgICAxMlx0ICA8UXVlcnlDbGllbnRQcm92aWRlciBjbGllbnQ9e3F1ZXJ5Q2xpZW50fT5cbiAgICAxM1x0ICAgIDxUb29sdGlwUHJvdmlkZXI+XG4gICAgMTRcdCAgICAgIDxUb2FzdGVyIC8+XG4gICAgMTVcdCAgICAgIDxTb25uZXIgLz5cbiAgICAxNlx0ICAgICAgPEJyb3dzZXJSb3V0ZXIgYmFzZW5hbWU9XCIvc2l0ZS1ub3ZhXCI+XG4gICAgMTdcdCAgICAgICAgPFJvdXRlcz5cbiAgICAxOFx0ICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL1wiIGVsZW1lbnQ9ezxJbmRleCAvPn0gLz5cbiAgICAxOVx0ICAgICAgICAgIHsvKiBBREQgQUxMIENVU1RPTSBST1VURVMgQUJPVkUgVEhFIENBVENILUFMTCBcIipcIiBST1VURSAqL31cbiAgICAyMFx0ICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiKlwiIGVsZW1lbnQ9ezxOb3RGb3VuZCAvPn0gLz5cblxuUmV2aWV3IHRoZSBjaGFuZ2VzIGFuZCBtYWtlIHN1cmUgdGhleSBhcmUgYXMgZXhwZWN0ZWQgKGNvcnJlY3QgaW5kZW50YXRpb24sIG5vIGR1cGxpY2F0ZSBsaW5lcywgZXRjKS5cbkVkaXQgdGhlIGZpbGUgYWdhaW4gaWYgbmVjZXNzYXJ5LlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fSwiN2U0Yjg3ZGEtYzEyMy00ZjI2LTg1ZWYtYTRmNTMzY2ViNzFlO3Rvb2x1X3ZydHhfMDFCcnVvOUcyQUVQVnlLSlVESng4MnRpIjp7InJlcXVlc3RJZCI6IjdlNGI4N2RhLWMxMjMtNGYyNi04NWVmLWE0ZjUzM2NlYjcxZSIsInRvb2xVc2VJZCI6InRvb2x1X3ZydHhfMDFCcnVvOUcyQUVQVnlLSlVESng4MnRpIiwicGhhc2UiOjUsInJlc3VsdCI6eyJ0ZXh0IjoiSGVyZSBhcmUgdGhlIHJlc3VsdHMgZnJvbSBleGVjdXRpbmcgdGhlIGNvbW1hbmQuXG4gICAgICAgIDxyZXR1cm4tY29kZT5cbiAgICAgICAgMFxuICAgICAgICA8L3JldHVybi1jb2RlPlxuICAgICAgICA8c3Rkb3V0PlxuICAgICAgICBcbj4gdml0ZV9yZWFjdF9zaGFkY25fdHNAMC4wLjAgYnVpbGRcbj4gdml0ZSBidWlsZFxuXG5cdTAwMWJbMUdcdTAwMWJbMEtcdTAwMWJbMzZtdml0ZSB2NS40LjEwIFx1MDAxYlszMm1idWlsZGluZyBmb3IgcHJvZHVjdGlvbi4uLlx1MDAxYlszNm1cdTAwMWJbMzltXG5cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDEpIFx1MDAxYlsybWluZGV4Lmh0bWxcdTAwMWJbMjJtQnJvd3NlcnNsaXN0OiBicm93c2VycyBkYXRhIChjYW5pdXNlLWxpdGUpIGlzIDcgbW9udGhzIG9sZC4gUGxlYXNlIHJ1bjpcbiAgbnB4IHVwZGF0ZS1icm93c2Vyc2xpc3QtZGJAbGF0ZXN0XG4gIFdoeSB5b3Ugc2hvdWxkIGRvIGl0IHJlZ3VsYXJseTogaHR0cHM6Ly9naXRodWIuY29tL2Jyb3dzZXJzbGlzdC91cGRhdGUtZGIjcmVhZG1lXG5cdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDgpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbW9kZXJuL3R5cGVzLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMjgpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbW9kZXJuL3VzZVN1c3BlbnNlSW5maW5pdGVRdWVyeS5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDc3KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvQHJhZGl4LXVpL3JlYWN0LXBvcnRhbC9kaXN0L2luZGV4Lm1qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDI0MSkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2x1Y2lkZS1yZWFjdC9kaXN0L2VzbS9pY29ucy9zcXVhcmUtY2hhcnQtZ2FudHQuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxMDIwKSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvbHVjaWRlLXJlYWN0L2Rpc3QvZXNtL2ljb25zL2xldHRlci10ZXh0LmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMTY3NSkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL3JlY2hhcnRzL2VzNi9wb2xhci9Qb2xhckdyaWQuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHdHJhbnNmb3JtaW5nICgxNzM0KSBcdTAwMWJbMm1ub2RlX21vZHVsZXMvcmVjaGFydHMvZXM2L3V0aWwvUG9sYXJVdGlscy5qc1x1MDAxYlsyMm1cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUd0cmFuc2Zvcm1pbmcgKDE4OTYpIFx1MDAxYlsybW5vZGVfbW9kdWxlcy9sb2Rhc2gvX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzXHUwMDFiWzIybVx1MDAxYlsyS1x1MDAxYlsxR3RyYW5zZm9ybWluZyAoMjIzMCkgXHUwMDFiWzJtbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanNcdTAwMWJbMjJtXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzJLXHUwMDFiWzFHXHUwMDFiWzMybeKck1x1MDAxYlszOW0gMjQ4MSBtb2R1bGVzIHRyYW5zZm9ybWVkLlxuXHUwMDFiWzJLXHUwMDFiWzFHcmVuZGVyaW5nIGNodW5rcyAoMSkuLi5cdTAwMWJbMktcdTAwMWJbMUdcdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgwKS4uLlx1MDAxYlsyS1x1MDAxYlsxR2NvbXB1dGluZyBnemlwIHNpemUgKDEpLi4uXHUwMDFiWzJLXHUwMDFiWzFHY29tcHV0aW5nIGd6aXAgc2l6ZSAoMikuLi5cdTAwMWJbMktcdTAwMWJbMUdjb21wdXRpbmcgZ3ppcCBzaXplICgzKS4uLlx1MDAxYlsyS1x1MDAxYlsxR1x1MDAxYlsybWRpc3QvXHUwMDFiWzIybVx1MDAxYlszMm1pbmRleC5odG1sICAgICAgICAgICAgICAgICBcdTAwMWJbMzltXHUwMDFiWzFtXHUwMDFiWzJtICAxLjU5IGtCXHUwMDFiWzIybVx1MDAxYlsxbVx1MDAxYlsyMm1cdTAwMWJbMm0g4pSCIGd6aXA6ICAgMC43MyBrQlx1MDAxYlsyMm1cblx1MDAxYlsybWRpc3QvXHUwMDFiWzIybVx1MDAxYlsybWFzc2V0cy9cdTAwMWJbMjJtXHUwMDFiWzM1bWluZGV4LUJERlZwS0RtLmNzcyAgXHUwMDFiWzM5bVx1MDAxYlsxbVx1MDAxYlsybSA3MS40MiBrQlx1MDAxYlsyMm1cdTAwMWJbMW1cdTAwMWJbMjJtXHUwMDFiWzJtIOKUgiBnemlwOiAgMTIuMzYga0JcdTAwMWJbMjJtXG5cdTAwMWJbMm1kaXN0L1x1MDAxYlsyMm1cdTAwMWJbMm1hc3NldHMvXHUwMDFiWzIybVx1MDAxYlszNm1pbmRleC1EclY5TW5qWS5qcyAgIFx1MDAxYlszOW1cdTAwMWJbMW1cdTAwMWJbMzNtNzM3LjQyIGtCXHUwMDFiWzM5bVx1MDAxYlsyMm1cdTAwMWJbMm0g4pSCIGd6aXA6IDIxNS44OCBrQlx1MDAxYlsyMm1cblx1MDAxYlszM21cbighKSBTb21lIGNodW5rcyBhcmUgbGFyZ2VyIHRoYW4gNTAwIGtCIGFmdGVyIG1pbmlmaWNhdGlvbi4gQ29uc2lkZXI6XG4tIFVzaW5nIGR5bmFtaWMgaW1wb3J0KCkgdG8gY29kZS1zcGxpdCB0aGUgYXBwbGljYXRpb25cbi0gVXNlIGJ1aWxkLnJvbGx1cE9wdGlvbnMub3V0cHV0Lm1hbnVhbENodW5rcyB0byBpbXByb3ZlIGNodW5raW5nOiBodHRwczovL3JvbGx1cGpzLm9yZy9jb25maWd1cmF0aW9uLW9wdGlvbnMvI291dHB1dC1tYW51YWxjaHVua3Ncbi0gQWRqdXN0IGNodW5rIHNpemUgbGltaXQgZm9yIHRoaXMgd2FybmluZyB2aWEgYnVpbGQuY2h1bmtTaXplV2FybmluZ0xpbWl0Llx1MDAxYlszOW1cblx1MDAxYlszMm3inJMgYnVpbHQgaW4gMS44OHNcdTAwMWJbMzltXG5cdTAwMWJbMUdcdTAwMWJbMEvioJlcdTAwMWJbMUdcdTAwMWJbMEtcbiAgICAgICAgPC9zdGRvdXQ+XG4gICAgICAgIDxzdGRlcnI+XG4gICAgICAgIFxuICAgICAgICA8L3N0ZGVycj4iLCJpc0Vycm9yIjpmYWxzZSwicmVxdWVzdElkIjoiIn19LCIyNTI0ZTAyNC00NDY4LTQ0NTMtOWY2NC1iMTYzYWQwZTUwOGM7dG9vbHVfdnJ0eF8wMTF2NjVKdjVtTDlEekJQZUQ5VGJ6WlYiOnsicmVxdWVzdElkIjoiMjUyNGUwMjQtNDQ2OC00NDUzLTlmNjQtYjE2M2FkMGU1MDhjIiwidG9vbFVzZUlkIjoidG9vbHVfdnJ0eF8wMTF2NjVKdjVtTDlEekJQZUQ5VGJ6WlYiLCJwaGFzZSI6NSwicmVzdWx0Ijp7InRleHQiOiJIZXJlJ3MgdGhlIHJlc3VsdCBvZiBydW5uaW5nIGBjYXQgLW5gIG9uIGRpc3QvaW5kZXguaHRtbDpcbiAgICAgMVx0XG4gICAgIDJcdDwhRE9DVFlQRSBodG1sPlxuICAgICAzXHQ8aHRtbCBsYW5nPVwicnVcIj5cbiAgICAgNFx0ICA8aGVhZD5cbiAgICAgNVx0ICAgIDxtZXRhIGNoYXJzZXQ9XCJVVEYtOFwiIC8+XG4gICAgIDZcdCAgICA8bWV0YSBuYW1lPVwidmlld3BvcnRcIiBjb250ZW50PVwid2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMFwiIC8+XG4gICAgIDdcdCAgICA8dGl0bGU+Tm92YSBBSSAtIEt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyBBSS9NTDwvdGl0bGU+XG4gICAgIDhcdCAgICA8bWV0YSBuYW1lPVwiZGVzY3JpcHRpb25cIiBjb250ZW50PVwiTm92YSBBSSAtINC/0YDQtdC00L3QsNGB0YLRgNC+0LXQvdC90LDRjyBrdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8g0LfQsNC00LDRh9CwINC+0LHRg9GH0LXQvdC40Y8g0Lgg0LjQvdGE0LXRgNC10L3RgdCwLiDQodC90LjQttC10L3QuNC1INGA0LDRgdGF0L7QtNC+0LIg0Lgg0L/QvtCy0YvRiNC10L3QuNC1INGD0YLQuNC70LjQt9Cw0YbQuNC4INGA0LXRgdGD0YDRgdC+0LIg0LrQu9Cw0YHRgtC10YDQsC5cIiAvPlxuICAgICA5XHQgICAgPG1ldGEgbmFtZT1cImF1dGhvclwiIGNvbnRlbnQ9XCJOb3ZhIEFJXCIgLz5cbiAgICAxMFx0XG4gICAgMTFcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnRpdGxlXCIgY29udGVudD1cIk5vdmEgQUkgLSBLdWJlcm5ldGVzLdC/0LvQsNGC0YTQvtGA0LzQsCDQtNC70Y8gQUkvTUxcIiAvPlxuICAgIDEyXHQgICAgPG1ldGEgcHJvcGVydHk9XCJvZzpkZXNjcmlwdGlvblwiIGNvbnRlbnQ9XCJOb3ZhIEFJIC0g0L/RgNC10LTQvdCw0YHRgtGA0L7QtdC90L3QsNGPIGt1YmVybmV0ZXMt0L/Qu9Cw0YLRhNC+0YDQvNCwINC00LvRjyDQt9Cw0LTQsNGH0LAg0L7QsdGD0YfQtdC90LjRjyDQuCDQuNC90YTQtdGA0LXQvdGB0LAuINCh0L3QuNC20LXQvdC40LUg0YDQsNGB0YXQvtC00L7QsiDQuCDQv9C+0LLRi9GI0LXQvdC40LUg0YPRgtC40LvQuNC30LDRhtC40Lgg0YDQtdGB0YPRgNGB0L7QsiDQutC70LDRgdGC0LXRgNCwLlwiIC8+XG4gICAgMTNcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOnR5cGVcIiBjb250ZW50PVwid2Vic2l0ZVwiIC8+XG4gICAgMTRcdCAgICA8bWV0YSBwcm9wZXJ0eT1cIm9nOmltYWdlXCIgY29udGVudD1cImh0dHBzOi8vbG92YWJsZS5kZXYvb3BlbmdyYXBoLWltYWdlLXA5OHBxZy5wbmdcIiAvPlxuICAgIDE1XHRcbiAgICAxNlx0ICAgIDxtZXRhIG5hbWU9XCJ0d2l0dGVyOmNhcmRcIiBjb250ZW50PVwic3VtbWFyeV9sYXJnZV9pbWFnZVwiIC8+XG4gICAgMTdcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjpzaXRlXCIgY29udGVudD1cIkBsb3ZhYmxlX2RldlwiIC8+XG4gICAgMThcdCAgICA8bWV0YSBuYW1lPVwidHdpdHRlcjppbWFnZVwiIGNvbnRlbnQ9XCJodHRwczovL2xvdmFibGUuZGV2L29wZW5ncmFwaC1pbWFnZS1wOThwcWcucG5nXCIgLz5cbiAgICAxOVx0XG4gICAgMjBcdCAgICA8bGluayByZWw9XCJwcmVjb25uZWN0XCIgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb21cIj5cbiAgICAyMVx0ICAgIDxsaW5rIHJlbD1cInByZWNvbm5lY3RcIiBocmVmPVwiaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbVwiIGNyb3Nzb3JpZ2luPlxuICAgIDIyXHQgICAgPGxpbmsgaHJlZj1cImh0dHBzOi8vZm9udHMuZ29vZ2xlYXBpcy5jb20vY3NzMj9mYW1pbHk9SW50ZXI6d2dodEA0MDA7NTAwOzYwMDs3MDAmZGlzcGxheT1zd2FwXCIgcmVsPVwic3R5bGVzaGVldFwiPlxuICAgIDIzXHQgICAgPHNjcmlwdCB0eXBlPVwibW9kdWxlXCIgY3Jvc3NvcmlnaW4gc3JjPVwiL3NpdGUtbm92YS9hc3NldHMvaW5kZXgtRHJWOU1ualkuanNcIj48L3NjcmlwdD5cbiAgICAyNFx0ICAgIDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBjcm9zc29yaWdpbiBocmVmPVwiL3NpdGUtbm92YS9hc3NldHMvaW5kZXgtQkRGVnBLRG0uY3NzXCI+XG4gICAgMjVcdCAgPC9oZWFkPlxuICAgIDI2XHRcbiAgICAyN1x0ICA8Ym9keT5cbiAgICAyOFx0ICAgIDxkaXYgaWQ9XCJyb290XCI+PC9kaXY+XG4gICAgMjlcdCAgICA8IS0tIEdQVCBFbmdpbmVlciBzY3JpcHQgcmVtb3ZlZCAtLT5cbiAgICAzMFx0ICA8L2JvZHk+XG4gICAgMzFcdDwvaHRtbD5cbiAgICAzMlx0XG5Ub3RhbCBsaW5lcyBpbiBmaWxlOiAzMlxuIiwiaXNFcnJvciI6ZmFsc2UsInJlcXVlc3RJZCI6IiJ9fX0sImRyYWZ0RXhjaGFuZ2UiOnsicmVxdWVzdF9tZXNzYWdlIjoiIiwicmljaF90ZXh0X2pzb25fcmVwciI6eyJ0eXBlIjoiZG9jIiwiY29udGVudCI6W3sidHlwZSI6InBhcmFncmFwaCJ9XX0sInN0YXR1cyI6ImRyYWZ0In0sInJlcXVlc3RJZHMiOltdLCJpc1Bpbm5lZCI6ZmFsc2UsImlzU2hhcmVhYmxlIjp0cnVlLCJleHRyYURhdGEiOnsiaXNBZ2VudENvbnZlcnNhdGlvbiI6dHJ1ZSwiaGFzRGlydHlFZGl0cyI6dHJ1ZSwiYmFzZWxpbmVUaW1lc3RhbXAiOjE3NDcyMzMyNzg0NzZ9LCJwZXJzb25hVHlwZSI6MH19LCJhZ2VudEV4ZWN1dGlvbk1vZGUiOiJtYW51YWwiLCJpc0FnZW50RWRpdHNDb2xsYXBzZWQiOnRydWV9" />
      </map>
    </option>
  </component>
</project>